<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<profile xmlns="http://www.verapdf.org/ValidationProfile" flavour="ARLINGTON1_5">
	<details creator="veraPDF Consortium" created="2022-05-23T21:45:28.872+03:00">
		<name>Arlington PDF 1.5 validation profile</name>
		<description>Validation rules against PDF 1.5 Specification</description>
	</details>
	<hash></hash>
	<rules>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_5" clause="1" testNumber="922"/>
			<description>AAPL_ST shall not contain entries except Color, ColorSpace, Offset, Radius, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Color' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Offset' &amp;&amp; elem != 'Radius' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AAPL_ST contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Color' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Offset' &amp;&amp; elem != 'Radius' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_5" clause="17" testNumber="923"/>
			<description>Entry Color with type Array in AAPL_ST shall be object ArrayOfNumbersGeneral</description>
			<test>ColorHasTypeArray != true || Color_size == 1</test>
			<error>
				<message>Entry Color with type Array in AAPL_ST is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_5" clause="8" testNumber="924"/>
			<description>Entry Color in AAPL_ST shall have type Array</description>
			<test>containsColor == false || ColorHasTypeArray == true</test>
			<error>
				<message>Entry Color in AAPL_ST is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_5" clause="17" testNumber="925"/>
			<description>Entry ColorSpace with type Array in AAPL_ST shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in AAPL_ST is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_5" clause="8" testNumber="926"/>
			<description>Entry ColorSpace in AAPL_ST shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in AAPL_ST is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_5" clause="6" testNumber="927"/>
			<description>Entry ColorSpace with type Name in AAPL_ST shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in AAPL_ST has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_5" clause="17" testNumber="928"/>
			<description>Entry Offset with type Array in AAPL_ST shall be object ArrayOf_2Numbers</description>
			<test>OffsetHasTypeArray != true || Offset_size == 1</test>
			<error>
				<message>Entry Offset with type Array in AAPL_ST is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_5" clause="8" testNumber="929"/>
			<description>Entry Offset in AAPL_ST shall have type Array</description>
			<test>containsOffset == false || OffsetHasTypeArray == true</test>
			<error>
				<message>Entry Offset in AAPL_ST is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_5" clause="8" testNumber="930"/>
			<description>Entry Radius in AAPL_ST shall have type Number</description>
			<test>containsRadius == false || RadiusHasTypeNumber == true</test>
			<error>
				<message>Entry Radius in AAPL_ST is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_5" clause="9" testNumber="931"/>
			<description>Entry Radius with type Number in AAPL_ST shall satisfy special case: fn:Eval(@Radius &gt; 0)</description>
			<test>RadiusHasTypeNumber != true || (RadiusNumberValue &gt; 0)</test>
			<error>
				<message>Entry Radius with type Number in AAPL_ST does not satisfy special case: fn:Eval(@Radius &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_5" clause="8" testNumber="932"/>
			<description>Entry Subtype in AAPL_ST shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AAPL_ST is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_5" clause="6" testNumber="933"/>
			<description>Entry Subtype with type Name in AAPL_ST shall have value Shadow</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Shadow"</test>
			<error>
				<message>Entry Subtype with type Name in AAPL_ST has incorrect value %2 instead of Shadow</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_5" clause="8" testNumber="934"/>
			<description>Entry Type in AAPL_ST shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AAPL_ST is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_5" clause="6" testNumber="935"/>
			<description>Entry Type with type Name in AAPL_ST shall have value Style</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Style"</test>
			<error>
				<message>Entry Type with type Name in AAPL_ST has incorrect value %2 instead of Style</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_5" clause="1" testNumber="1004"/>
			<description>ActionECMAScript shall not contain entries except JS, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'JS' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionECMAScript contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'JS' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1005"/>
			<description>Entry JS with type Stream in ActionECMAScript shall be object Stream</description>
			<test>JSHasTypeStream != true || JS_size == 1</test>
			<error>
				<message>Entry JS with type Stream in ActionECMAScript is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1006"/>
			<description>Entry JS in ActionECMAScript shall have one of types: Stream, StringText</description>
			<test>containsJS == false || JSHasTypeStream == true || JSHasTypeStringText == true</test>
			<error>
				<message>Entry JS in ActionECMAScript is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_5" clause="7" testNumber="1007"/>
			<description>Entry JS in ActionECMAScript is required</description>
			<test>containsJS == true</test>
			<error>
				<message>Entry JS in ActionECMAScript is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_5" clause="10" testNumber="1008"/>
			<description>Entry JS with type Stream in ActionECMAScript shall be indirect</description>
			<test>JSHasTypeStream != true || isJSIndirect == true</test>
			<error>
				<message>Entry JS with type Stream in ActionECMAScript is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1009"/>
			<description>Entry Next with type Array in ActionECMAScript shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionECMAScript is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1010"/>
			<description>Entry Next with type Dictionary in ActionECMAScript shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionECMAScript is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1011"/>
			<description>Entry Next in ActionECMAScript shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionECMAScript is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1012"/>
			<description>Entry S in ActionECMAScript shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionECMAScript is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_5" clause="7" testNumber="1013"/>
			<description>Entry S in ActionECMAScript is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionECMAScript is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1014"/>
			<description>Entry S with type Name in ActionECMAScript shall have value JavaScript</description>
			<test>SHasTypeName != true || SNameValue == "JavaScript"</test>
			<error>
				<message>Entry S with type Name in ActionECMAScript has incorrect value %2 instead of JavaScript</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1015"/>
			<description>Entry Type in ActionECMAScript shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionECMAScript is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1016"/>
			<description>Entry Type with type Name in ActionECMAScript shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionECMAScript has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_5" clause="1" testNumber="1101"/>
			<description>ActionGoTo shall not contain entries except D, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionGoTo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1102"/>
			<description>Entry D with type Array in ActionGoTo shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in ActionGoTo is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1103"/>
			<description>Entry D in ActionGoTo shall have one of types: Array, StringByte, Name</description>
			<test>containsD == false || DHasTypeArray == true || DHasTypeStringByte == true || DHasTypeName == true</test>
			<error>
				<message>Entry D in ActionGoTo is not one of types: Array, StringByte, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_5" clause="7" testNumber="1104"/>
			<description>Entry D in ActionGoTo is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in ActionGoTo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1105"/>
			<description>Entry Next with type Array in ActionGoTo shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionGoTo is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1106"/>
			<description>Entry Next with type Dictionary in ActionGoTo shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionGoTo is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1107"/>
			<description>Entry Next in ActionGoTo shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionGoTo is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1108"/>
			<description>Entry S in ActionGoTo shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionGoTo is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_5" clause="7" testNumber="1109"/>
			<description>Entry S in ActionGoTo is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionGoTo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1110"/>
			<description>Entry S with type Name in ActionGoTo shall have value GoTo</description>
			<test>SHasTypeName != true || SNameValue == "GoTo"</test>
			<error>
				<message>Entry S with type Name in ActionGoTo has incorrect value %2 instead of GoTo</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1111"/>
			<description>Entry Type in ActionGoTo shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionGoTo is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1112"/>
			<description>Entry Type with type Name in ActionGoTo shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionGoTo has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_5" clause="1" testNumber="1323"/>
			<description>ActionGoToR shall not contain entries except D, F, NewWindow, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'NewWindow' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionGoToR contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'NewWindow' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1324"/>
			<description>Entry D with type Array in ActionGoToR shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in ActionGoToR is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1325"/>
			<description>Entry D in ActionGoToR shall have one of types: Array, StringByte, Name</description>
			<test>containsD == false || DHasTypeArray == true || DHasTypeStringByte == true || DHasTypeName == true</test>
			<error>
				<message>Entry D in ActionGoToR is not one of types: Array, StringByte, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_5" clause="7" testNumber="1326"/>
			<description>Entry D in ActionGoToR is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in ActionGoToR is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1327"/>
			<description>Entry F with type Dictionary in ActionGoToR shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ActionGoToR is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1328"/>
			<description>Entry F in ActionGoToR shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ActionGoToR is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_5" clause="7" testNumber="1329"/>
			<description>Entry F in ActionGoToR is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in ActionGoToR is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1330"/>
			<description>Entry NewWindow in ActionGoToR shall have type Boolean</description>
			<test>containsNewWindow == false || NewWindowHasTypeBoolean == true</test>
			<error>
				<message>Entry NewWindow in ActionGoToR is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1331"/>
			<description>Entry Next with type Array in ActionGoToR shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionGoToR is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1332"/>
			<description>Entry Next with type Dictionary in ActionGoToR shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionGoToR is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1333"/>
			<description>Entry Next in ActionGoToR shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionGoToR is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1334"/>
			<description>Entry S in ActionGoToR shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionGoToR is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_5" clause="7" testNumber="1335"/>
			<description>Entry S in ActionGoToR is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionGoToR is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1336"/>
			<description>Entry S with type Name in ActionGoToR shall have value GoToR</description>
			<test>SHasTypeName != true || SNameValue == "GoToR"</test>
			<error>
				<message>Entry S with type Name in ActionGoToR has incorrect value %2 instead of GoToR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1337"/>
			<description>Entry Type in ActionGoToR shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionGoToR is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1338"/>
			<description>Entry Type with type Name in ActionGoToR shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionGoToR has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_5" clause="1" testNumber="1437"/>
			<description>ActionHide shall not contain entries except H, Next, S, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionHide contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1438"/>
			<description>Entry H in ActionHide shall have type Boolean</description>
			<test>containsH == false || HHasTypeBoolean == true</test>
			<error>
				<message>Entry H in ActionHide is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1439"/>
			<description>Entry Next with type Array in ActionHide shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionHide is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1440"/>
			<description>Entry Next with type Dictionary in ActionHide shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionHide is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1441"/>
			<description>Entry Next in ActionHide shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionHide is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1442"/>
			<description>Entry S in ActionHide shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionHide is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_5" clause="7" testNumber="1443"/>
			<description>Entry S in ActionHide is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionHide is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1444"/>
			<description>Entry S with type Name in ActionHide shall have value Hide</description>
			<test>SHasTypeName != true || SNameValue == "Hide"</test>
			<error>
				<message>Entry S with type Name in ActionHide has incorrect value %2 instead of Hide</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1445"/>
			<description>Entry T with type Array in ActionHide shall be object ArrayOfActionHideAnnots</description>
			<test>THasTypeArray != true || T_size == 1</test>
			<error>
				<message>Entry T with type Array in ActionHide is not object ArrayOfActionHideAnnots</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1446"/>
			<description>Entry T with type Dictionary in ActionHide shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotPolyLine, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotTrapNetwork</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in ActionHide is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotPolyLine, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotTrapNetwork</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1447"/>
			<description>Entry T in ActionHide shall have one of types: Array, StringText, Dictionary</description>
			<test>containsT == false || THasTypeArray == true || THasTypeStringText == true || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in ActionHide is not one of types: Array, StringText, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_5" clause="7" testNumber="1448"/>
			<description>Entry T in ActionHide is required</description>
			<test>containsT == true</test>
			<error>
				<message>Entry T in ActionHide is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_5" clause="9" testNumber="1449"/>
			<description>Entry T with type StringText in ActionHide shall satisfy special case: fn:Eval(fn:IsFieldName(@T))</description>
			<test>THasTypeStringText != true || (TIsFieldName == true)</test>
			<error>
				<message>Entry T with type StringText in ActionHide does not satisfy special case: fn:Eval(fn:IsFieldName(@T))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_5" clause="10" testNumber="1450"/>
			<description>Entry T with type Dictionary in ActionHide shall be indirect</description>
			<test>THasTypeDictionary != true || isTIndirect == true</test>
			<error>
				<message>Entry T with type Dictionary in ActionHide is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1451"/>
			<description>Entry Type in ActionHide shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionHide is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1452"/>
			<description>Entry Type with type Name in ActionHide shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionHide has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_5" clause="1" testNumber="1537"/>
			<description>ActionImportData shall not contain entries except F, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionImportData contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1538"/>
			<description>Entry F with type Dictionary in ActionImportData shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ActionImportData is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1539"/>
			<description>Entry F in ActionImportData shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ActionImportData is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_5" clause="7" testNumber="1540"/>
			<description>Entry F in ActionImportData is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in ActionImportData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1541"/>
			<description>Entry Next with type Array in ActionImportData shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionImportData is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1542"/>
			<description>Entry Next with type Dictionary in ActionImportData shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionImportData is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1543"/>
			<description>Entry Next in ActionImportData shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionImportData is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1544"/>
			<description>Entry S in ActionImportData shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionImportData is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_5" clause="7" testNumber="1545"/>
			<description>Entry S in ActionImportData is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionImportData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1546"/>
			<description>Entry S with type Name in ActionImportData shall have value ImportData</description>
			<test>SHasTypeName != true || SNameValue == "ImportData"</test>
			<error>
				<message>Entry S with type Name in ActionImportData has incorrect value %2 instead of ImportData</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1547"/>
			<description>Entry Type in ActionImportData shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionImportData is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1548"/>
			<description>Entry Type with type Name in ActionImportData shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionImportData has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_5" clause="1" testNumber="1649"/>
			<description>ActionLaunch shall not contain entries except F, Mac, NewWindow, Next, S, Type, Unix, Win</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'NewWindow' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Unix' &amp;&amp; elem != 'Win').length == 0</test>
			<error>
				<message>ActionLaunch contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'NewWindow' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Unix' &amp;&amp; elem != 'Win').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1650"/>
			<description>Entry F with type Dictionary in ActionLaunch shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ActionLaunch is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1651"/>
			<description>Entry F in ActionLaunch shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ActionLaunch is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_5" clause="11" testNumber="1652"/>
			<description>Entry F in ActionLaunch is required, when fn:IsRequired(fn:Not(fn:IsPresent(Win) || fn:IsPresent(Mac) || fn:IsPresent(Unix)))</description>
			<test>(containsF == true || (((containsWin == true) || (containsMac == true) || (containsUnix == true)) != true) == false)</test>
			<error>
				<message>Entry F in ActionLaunch is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1653"/>
			<description>Entry Mac in ActionLaunch shall have type Null</description>
			<test>containsMac == false || MacHasTypeNull == true</test>
			<error>
				<message>Entry Mac in ActionLaunch is not of type Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1654"/>
			<description>Entry NewWindow in ActionLaunch shall have type Boolean</description>
			<test>containsNewWindow == false || NewWindowHasTypeBoolean == true</test>
			<error>
				<message>Entry NewWindow in ActionLaunch is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1655"/>
			<description>Entry Next with type Array in ActionLaunch shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionLaunch is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1656"/>
			<description>Entry Next with type Dictionary in ActionLaunch shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionLaunch is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1657"/>
			<description>Entry Next in ActionLaunch shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionLaunch is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1658"/>
			<description>Entry S in ActionLaunch shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionLaunch is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_5" clause="7" testNumber="1659"/>
			<description>Entry S in ActionLaunch is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionLaunch is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1660"/>
			<description>Entry S with type Name in ActionLaunch shall have value Launch</description>
			<test>SHasTypeName != true || SNameValue == "Launch"</test>
			<error>
				<message>Entry S with type Name in ActionLaunch has incorrect value %2 instead of Launch</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1661"/>
			<description>Entry Type in ActionLaunch shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionLaunch is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1662"/>
			<description>Entry Type with type Name in ActionLaunch shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionLaunch has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1663"/>
			<description>Entry Unix in ActionLaunch shall have type Null</description>
			<test>containsUnix == false || UnixHasTypeNull == true</test>
			<error>
				<message>Entry Unix in ActionLaunch is not of type Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1664"/>
			<description>Entry Win with type Dictionary in ActionLaunch shall be object MicrosoftWindowsLaunchParam</description>
			<test>WinHasTypeDictionary != true || Win_size == 1</test>
			<error>
				<message>Entry Win with type Dictionary in ActionLaunch is not object MicrosoftWindowsLaunchParam</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1665"/>
			<description>Entry Win in ActionLaunch shall have type Dictionary</description>
			<test>containsWin == false || WinHasTypeDictionary == true</test>
			<error>
				<message>Entry Win in ActionLaunch is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_5" clause="1" testNumber="1759"/>
			<description>ActionMovie shall not contain entries except Annotation, Next, Operation, S, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Annotation' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Operation' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionMovie contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Annotation' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Operation' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1760"/>
			<description>Entry Annotation with type Dictionary in ActionMovie shall be object AnnotMovie</description>
			<test>AnnotationHasTypeDictionary != true || Annotation_size == 1</test>
			<error>
				<message>Entry Annotation with type Dictionary in ActionMovie is not object AnnotMovie</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1761"/>
			<description>Entry Annotation in ActionMovie shall have type Dictionary</description>
			<test>containsAnnotation == false || AnnotationHasTypeDictionary == true</test>
			<error>
				<message>Entry Annotation in ActionMovie is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1762"/>
			<description>Entry Next with type Array in ActionMovie shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionMovie is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1763"/>
			<description>Entry Next with type Dictionary in ActionMovie shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionMovie is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1764"/>
			<description>Entry Next in ActionMovie shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionMovie is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1765"/>
			<description>Entry Operation in ActionMovie shall have type Name</description>
			<test>containsOperation == false || OperationHasTypeName == true</test>
			<error>
				<message>Entry Operation in ActionMovie is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1766"/>
			<description>Entry Operation with type Name in ActionMovie shall have one of values: Play, Pause, Stop, Resume</description>
			<test>OperationHasTypeName != true || OperationNameValue == "Play" || OperationNameValue == "Stop" || OperationNameValue == "Pause" || OperationNameValue == "Resume"</test>
			<error>
				<message>Entry Operation with type Name in ActionMovie has incorrect value %2 instead of Play, Pause, Stop, Resume</message>
				<arguments>
					<argument>keyName</argument>
					<argument>OperationNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1767"/>
			<description>Entry S in ActionMovie shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionMovie is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_5" clause="7" testNumber="1768"/>
			<description>Entry S in ActionMovie is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionMovie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1769"/>
			<description>Entry S with type Name in ActionMovie shall have value Movie</description>
			<test>SHasTypeName != true || SNameValue == "Movie"</test>
			<error>
				<message>Entry S with type Name in ActionMovie has incorrect value %2 instead of Movie</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1770"/>
			<description>Entry T in ActionMovie shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in ActionMovie is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1771"/>
			<description>Entry Type in ActionMovie shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionMovie is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1772"/>
			<description>Entry Type with type Name in ActionMovie shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionMovie has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_5" clause="1" testNumber="1837"/>
			<description>ActionNOP shall not contain entries except S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionNOP contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1838"/>
			<description>Entry S in ActionNOP shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionNOP is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_5" clause="7" testNumber="1839"/>
			<description>Entry S in ActionNOP is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionNOP is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_5" clause="5" testNumber="1840"/>
			<description>Entry S in ActionNOP is deprecated since PDF 1.2</description>
			<test>containsS == false</test>
			<error>
				<message>Entry S in ActionNOP is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1841"/>
			<description>Entry S with type Name in ActionNOP shall have value NOP</description>
			<test>SHasTypeName != true || SNameValue == "NOP"</test>
			<error>
				<message>Entry S with type Name in ActionNOP has incorrect value %2 instead of NOP</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1842"/>
			<description>Entry Type in ActionNOP shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionNOP is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_5" clause="5" testNumber="1843"/>
			<description>Entry Type in ActionNOP is deprecated since PDF 1.2</description>
			<test>containsType == false</test>
			<error>
				<message>Entry Type in ActionNOP is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1844"/>
			<description>Entry Type with type Name in ActionNOP shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionNOP has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_5" clause="1" testNumber="1902"/>
			<description>ActionNamed shall not contain entries except N, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionNamed contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1903"/>
			<description>Entry N in ActionNamed shall have type Name</description>
			<test>containsN == false || NHasTypeName == true</test>
			<error>
				<message>Entry N in ActionNamed is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_5" clause="7" testNumber="1904"/>
			<description>Entry N in ActionNamed is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in ActionNamed is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1905"/>
			<description>Entry Next with type Array in ActionNamed shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionNamed is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1906"/>
			<description>Entry Next with type Dictionary in ActionNamed shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionNamed is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1907"/>
			<description>Entry Next in ActionNamed shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionNamed is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1908"/>
			<description>Entry S in ActionNamed shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionNamed is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_5" clause="7" testNumber="1909"/>
			<description>Entry S in ActionNamed is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionNamed is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1910"/>
			<description>Entry S with type Name in ActionNamed shall have value Named</description>
			<test>SHasTypeName != true || SNameValue == "Named"</test>
			<error>
				<message>Entry S with type Name in ActionNamed has incorrect value %2 instead of Named</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1911"/>
			<description>Entry Type in ActionNamed shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionNamed is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1912"/>
			<description>Entry Type with type Name in ActionNamed shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionNamed has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="1" testNumber="1946"/>
			<description>ActionRendition shall not contain entries except AN, JS, Next, OP, R, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AN' &amp;&amp; elem != 'JS' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'OP' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionRendition contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AN' &amp;&amp; elem != 'JS' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'OP' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1947"/>
			<description>Entry AN with type Dictionary in ActionRendition shall be object AnnotScreen</description>
			<test>ANHasTypeDictionary != true || AN_size == 1</test>
			<error>
				<message>Entry AN with type Dictionary in ActionRendition is not object AnnotScreen</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1948"/>
			<description>Entry AN in ActionRendition shall have type Dictionary</description>
			<test>containsAN == false || ANHasTypeDictionary == true</test>
			<error>
				<message>Entry AN in ActionRendition is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="11" testNumber="1949"/>
			<description>Entry AN in ActionRendition is required, when fn:IsRequired((@OP &gt;= 0) &amp;&amp; (@OP &lt;= 4))</description>
			<test>(containsAN == true || ((OPIntegerValue &gt;= 0) &amp;&amp; (OPIntegerValue &lt;= 4)) == false)</test>
			<error>
				<message>Entry AN in ActionRendition is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="10" testNumber="1950"/>
			<description>Entry AN with type Dictionary in ActionRendition shall be indirect</description>
			<test>ANHasTypeDictionary != true || isANIndirect == true</test>
			<error>
				<message>Entry AN with type Dictionary in ActionRendition is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1951"/>
			<description>Entry JS with type Stream in ActionRendition shall be object Stream</description>
			<test>JSHasTypeStream != true || JS_size == 1</test>
			<error>
				<message>Entry JS with type Stream in ActionRendition is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1952"/>
			<description>Entry JS in ActionRendition shall have one of types: Stream, StringText</description>
			<test>containsJS == false || JSHasTypeStream == true || JSHasTypeStringText == true</test>
			<error>
				<message>Entry JS in ActionRendition is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="10" testNumber="1953"/>
			<description>Entry JS with type Stream in ActionRendition shall be indirect</description>
			<test>JSHasTypeStream != true || isJSIndirect == true</test>
			<error>
				<message>Entry JS with type Stream in ActionRendition is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1954"/>
			<description>Entry Next with type Array in ActionRendition shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionRendition is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1955"/>
			<description>Entry Next with type Dictionary in ActionRendition shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionRendition is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1956"/>
			<description>Entry Next in ActionRendition shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionRendition is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1957"/>
			<description>Entry OP in ActionRendition shall have type Integer</description>
			<test>containsOP == false || OPHasTypeInteger == true</test>
			<error>
				<message>Entry OP in ActionRendition is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="14" testNumber="1958"/>
			<description>Entry OP with type Integer in ActionRendition shall satisfy possible value predicate: fn:Eval((@OP &gt;= 0) &amp;&amp; (@OP &lt;= 4))</description>
			<test>OPHasTypeInteger != true || (OPIntegerValue &gt;= 0) &amp;&amp; (OPIntegerValue &lt;= 4)</test>
			<error>
				<message>Entry OP with type Integer in ActionRendition does not satisfy possible value predicate: fn:Eval((@OP &gt;= 0) &amp;&amp; (@OP &lt;= 4))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="17" testNumber="1959"/>
			<description>Entry R with type Dictionary in ActionRendition shall be one of objects RenditionSelector, RenditionMedia</description>
			<test>RHasTypeDictionary != true || R_size == 1</test>
			<error>
				<message>Entry R with type Dictionary in ActionRendition is not one of objects RenditionSelector, RenditionMedia</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1960"/>
			<description>Entry R in ActionRendition shall have type Dictionary</description>
			<test>containsR == false || RHasTypeDictionary == true</test>
			<error>
				<message>Entry R in ActionRendition is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="11" testNumber="1961"/>
			<description>Entry R in ActionRendition is required, when fn:IsRequired((@OP == 0) || (@OP == 4))</description>
			<test>(containsR == true || ((OPIntegerValue == 0) || (OPIntegerValue == 4)) == false)</test>
			<error>
				<message>Entry R in ActionRendition is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1962"/>
			<description>Entry S in ActionRendition shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionRendition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="7" testNumber="1963"/>
			<description>Entry S in ActionRendition is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionRendition is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1964"/>
			<description>Entry S with type Name in ActionRendition shall have value Rendition</description>
			<test>SHasTypeName != true || SNameValue == "Rendition"</test>
			<error>
				<message>Entry S with type Name in ActionRendition has incorrect value %2 instead of Rendition</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="8" testNumber="1965"/>
			<description>Entry Type in ActionRendition shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionRendition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_5" clause="6" testNumber="1966"/>
			<description>Entry Type with type Name in ActionRendition shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionRendition has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_5" clause="1" testNumber="2072"/>
			<description>ActionResetForm shall not contain entries except Fields, Flags, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Fields' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionResetForm contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Fields' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2073"/>
			<description>Entry Fields with type Array in ActionResetForm shall be object ArrayOfFieldID</description>
			<test>FieldsHasTypeArray != true || Fields_size == 1</test>
			<error>
				<message>Entry Fields with type Array in ActionResetForm is not object ArrayOfFieldID</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2074"/>
			<description>Entry Fields in ActionResetForm shall have type Array</description>
			<test>containsFields == false || FieldsHasTypeArray == true</test>
			<error>
				<message>Entry Fields in ActionResetForm is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2075"/>
			<description>Entry Flags in ActionResetForm shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in ActionResetForm is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_5" clause="6" testNumber="2076"/>
			<description>Entry Flags with type Bitmask in ActionResetForm shall have one of values: 0, 1</description>
			<test>FlagsHasTypeBitmask != true || FlagsBitmaskValue == 0 || FlagsBitmaskValue == 1</test>
			<error>
				<message>Entry Flags with type Bitmask in ActionResetForm has incorrect value %2 instead of 0, 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FlagsBitmaskValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_5" clause="9" testNumber="2077"/>
			<description>Entry Flags with type Bitmask in ActionResetForm shall satisfy special case: fn:Eval(fn:BitsClear(2 , 32))</description>
			<test>FlagsHasTypeBitmask != true || (((FlagsBitmaskValue &gt;&gt; 1 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 2 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in ActionResetForm does not satisfy special case: fn:Eval(fn:BitsClear(2 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2078"/>
			<description>Entry Next with type Array in ActionResetForm shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionResetForm is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2079"/>
			<description>Entry Next with type Dictionary in ActionResetForm shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionResetForm is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2080"/>
			<description>Entry Next in ActionResetForm shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionResetForm is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2081"/>
			<description>Entry S in ActionResetForm shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionResetForm is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_5" clause="7" testNumber="2082"/>
			<description>Entry S in ActionResetForm is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionResetForm is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_5" clause="6" testNumber="2083"/>
			<description>Entry S with type Name in ActionResetForm shall have value ResetForm</description>
			<test>SHasTypeName != true || SNameValue == "ResetForm"</test>
			<error>
				<message>Entry S with type Name in ActionResetForm has incorrect value %2 instead of ResetForm</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2084"/>
			<description>Entry Type in ActionResetForm shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionResetForm is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_5" clause="6" testNumber="2085"/>
			<description>Entry Type with type Name in ActionResetForm shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionResetForm has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_5" clause="1" testNumber="2166"/>
			<description>ActionSetOCGState shall not contain entries except Next, PreserveRB, S, State, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Next' &amp;&amp; elem != 'PreserveRB' &amp;&amp; elem != 'S' &amp;&amp; elem != 'State' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionSetOCGState contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Next' &amp;&amp; elem != 'PreserveRB' &amp;&amp; elem != 'S' &amp;&amp; elem != 'State' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2167"/>
			<description>Entry Next with type Array in ActionSetOCGState shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionSetOCGState is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2168"/>
			<description>Entry Next with type Dictionary in ActionSetOCGState shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionSetOCGState is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2169"/>
			<description>Entry Next in ActionSetOCGState shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionSetOCGState is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2170"/>
			<description>Entry PreserveRB in ActionSetOCGState shall have type Boolean</description>
			<test>containsPreserveRB == false || PreserveRBHasTypeBoolean == true</test>
			<error>
				<message>Entry PreserveRB in ActionSetOCGState is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2171"/>
			<description>Entry S in ActionSetOCGState shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionSetOCGState is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_5" clause="7" testNumber="2172"/>
			<description>Entry S in ActionSetOCGState is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionSetOCGState is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_5" clause="6" testNumber="2173"/>
			<description>Entry S with type Name in ActionSetOCGState shall have value SetOCGState</description>
			<test>SHasTypeName != true || SNameValue == "SetOCGState"</test>
			<error>
				<message>Entry S with type Name in ActionSetOCGState has incorrect value %2 instead of SetOCGState</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2174"/>
			<description>Entry State with type Array in ActionSetOCGState shall be object ArrayOfOCGState</description>
			<test>StateHasTypeArray != true || State_size == 1</test>
			<error>
				<message>Entry State with type Array in ActionSetOCGState is not object ArrayOfOCGState</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2175"/>
			<description>Entry State in ActionSetOCGState shall have type Array</description>
			<test>containsState == false || StateHasTypeArray == true</test>
			<error>
				<message>Entry State in ActionSetOCGState is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_5" clause="7" testNumber="2176"/>
			<description>Entry State in ActionSetOCGState is required</description>
			<test>containsState == true</test>
			<error>
				<message>Entry State in ActionSetOCGState is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2177"/>
			<description>Entry Type in ActionSetOCGState shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionSetOCGState is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_5" clause="6" testNumber="2178"/>
			<description>Entry Type with type Name in ActionSetOCGState shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionSetOCGState has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_5" clause="1" testNumber="2262"/>
			<description>ActionSetState shall not contain entries except AS, S, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AS' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionSetState contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AS' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2263"/>
			<description>Entry AS in ActionSetState shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in ActionSetState is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_5" clause="5" testNumber="2264"/>
			<description>Entry AS in ActionSetState is deprecated since PDF 1.2</description>
			<test>containsAS == false</test>
			<error>
				<message>Entry AS in ActionSetState is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2265"/>
			<description>Entry S in ActionSetState shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionSetState is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_5" clause="7" testNumber="2266"/>
			<description>Entry S in ActionSetState is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionSetState is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_5" clause="5" testNumber="2267"/>
			<description>Entry S in ActionSetState is deprecated since PDF 1.2</description>
			<test>containsS == false</test>
			<error>
				<message>Entry S in ActionSetState is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_5" clause="6" testNumber="2268"/>
			<description>Entry S with type Name in ActionSetState shall have value SetState</description>
			<test>SHasTypeName != true || SNameValue == "SetState"</test>
			<error>
				<message>Entry S with type Name in ActionSetState has incorrect value %2 instead of SetState</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2269"/>
			<description>Entry T with type Array in ActionSetState shall be object ArrayOfAnnots</description>
			<test>THasTypeArray != true || T_size == 1</test>
			<error>
				<message>Entry T with type Array in ActionSetState is not object ArrayOfAnnots</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2270"/>
			<description>Entry T with type Dictionary in ActionSetState shall be one of objects AnnotText, AnnotLink, AnnotSound, AnnotMovie, AnnotWidget</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in ActionSetState is not one of objects AnnotText, AnnotLink, AnnotSound, AnnotMovie, AnnotWidget</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2271"/>
			<description>Entry T in ActionSetState shall have one of types: Array, Dictionary</description>
			<test>containsT == false || THasTypeArray == true || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in ActionSetState is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_5" clause="7" testNumber="2272"/>
			<description>Entry T in ActionSetState is required</description>
			<test>containsT == true</test>
			<error>
				<message>Entry T in ActionSetState is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_5" clause="5" testNumber="2273"/>
			<description>Entry T in ActionSetState is deprecated since PDF 1.2</description>
			<test>containsT == false</test>
			<error>
				<message>Entry T in ActionSetState is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_5" clause="10" testNumber="2274"/>
			<description>Entry T with type Dictionary in ActionSetState shall be indirect</description>
			<test>THasTypeDictionary != true || isTIndirect == true</test>
			<error>
				<message>Entry T with type Dictionary in ActionSetState is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2275"/>
			<description>Entry Type in ActionSetState shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionSetState is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_5" clause="5" testNumber="2276"/>
			<description>Entry Type in ActionSetState is deprecated since PDF 1.2</description>
			<test>containsType == false</test>
			<error>
				<message>Entry Type in ActionSetState is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_5" clause="6" testNumber="2277"/>
			<description>Entry Type with type Name in ActionSetState shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionSetState has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_5" clause="1" testNumber="2380"/>
			<description>ActionSound shall not contain entries except Mix, Next, Repeat, S, Sound, Synchronous, Type, Volume</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Mix' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Repeat' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Sound' &amp;&amp; elem != 'Synchronous' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Volume').length == 0</test>
			<error>
				<message>ActionSound contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Mix' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Repeat' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Sound' &amp;&amp; elem != 'Synchronous' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Volume').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2381"/>
			<description>Entry Mix in ActionSound shall have type Boolean</description>
			<test>containsMix == false || MixHasTypeBoolean == true</test>
			<error>
				<message>Entry Mix in ActionSound is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2382"/>
			<description>Entry Next with type Array in ActionSound shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionSound is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2383"/>
			<description>Entry Next with type Dictionary in ActionSound shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionSound is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2384"/>
			<description>Entry Next in ActionSound shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionSound is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2385"/>
			<description>Entry Repeat in ActionSound shall have type Boolean</description>
			<test>containsRepeat == false || RepeatHasTypeBoolean == true</test>
			<error>
				<message>Entry Repeat in ActionSound is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2386"/>
			<description>Entry S in ActionSound shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_5" clause="7" testNumber="2387"/>
			<description>Entry S in ActionSound is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_5" clause="6" testNumber="2388"/>
			<description>Entry S with type Name in ActionSound shall have value Sound</description>
			<test>SHasTypeName != true || SNameValue == "Sound"</test>
			<error>
				<message>Entry S with type Name in ActionSound has incorrect value %2 instead of Sound</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2389"/>
			<description>Entry Sound with type Stream in ActionSound shall be object SoundObject</description>
			<test>SoundHasTypeStream != true || Sound_size == 1</test>
			<error>
				<message>Entry Sound with type Stream in ActionSound is not object SoundObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2390"/>
			<description>Entry Sound in ActionSound shall have type Stream</description>
			<test>containsSound == false || SoundHasTypeStream == true</test>
			<error>
				<message>Entry Sound in ActionSound is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_5" clause="7" testNumber="2391"/>
			<description>Entry Sound in ActionSound is required</description>
			<test>containsSound == true</test>
			<error>
				<message>Entry Sound in ActionSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_5" clause="10" testNumber="2392"/>
			<description>Entry Sound with type Stream in ActionSound shall be indirect</description>
			<test>SoundHasTypeStream != true || isSoundIndirect == true</test>
			<error>
				<message>Entry Sound with type Stream in ActionSound is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2393"/>
			<description>Entry Synchronous in ActionSound shall have type Boolean</description>
			<test>containsSynchronous == false || SynchronousHasTypeBoolean == true</test>
			<error>
				<message>Entry Synchronous in ActionSound is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2394"/>
			<description>Entry Type in ActionSound shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_5" clause="6" testNumber="2395"/>
			<description>Entry Type with type Name in ActionSound shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionSound has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2396"/>
			<description>Entry Volume in ActionSound shall have type Number</description>
			<test>containsVolume == false || VolumeHasTypeNumber == true</test>
			<error>
				<message>Entry Volume in ActionSound is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_5" clause="14" testNumber="2397"/>
			<description>Entry Volume with type Number in ActionSound shall satisfy possible value predicate: fn:Eval((@Volume &gt;= -1) &amp;&amp; (@Volume &lt;= 1))</description>
			<test>VolumeHasTypeNumber != true || (VolumeNumberValue &gt;= - 1) &amp;&amp; (VolumeNumberValue &lt;= 1)</test>
			<error>
				<message>Entry Volume with type Number in ActionSound does not satisfy possible value predicate: fn:Eval((@Volume &gt;= -1) &amp;&amp; (@Volume &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_5" clause="1" testNumber="2491"/>
			<description>ActionSubmitForm shall not contain entries except CharSet, F, Fields, Flags, S</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CharSet' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'S').length == 0</test>
			<error>
				<message>ActionSubmitForm contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CharSet' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'S').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2492"/>
			<description>Entry CharSet in ActionSubmitForm shall have type String</description>
			<test>containsCharSet == false || CharSetHasTypeString == true</test>
			<error>
				<message>Entry CharSet in ActionSubmitForm is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_5" clause="6" testNumber="2493"/>
			<description>Entry CharSet with type String in ActionSubmitForm shall have one of values: GBK, UHC, utf-16, utf-8, Shift-JIS, BigFive</description>
			<test>CharSetHasTypeString != true || CharSetStringValue == "utf-8" || CharSetStringValue == "utf-16" || CharSetStringValue == "Shift-JIS" || CharSetStringValue == "BigFive" || CharSetStringValue == "GBK" || CharSetStringValue == "UHC"</test>
			<error>
				<message>Entry CharSet with type String in ActionSubmitForm has incorrect value %2 instead of GBK, UHC, utf-16, utf-8, Shift-JIS, BigFive</message>
				<arguments>
					<argument>keyName</argument>
					<argument>CharSetStringValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2494"/>
			<description>Entry F with type Dictionary in ActionSubmitForm shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ActionSubmitForm is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2495"/>
			<description>Entry F in ActionSubmitForm shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ActionSubmitForm is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_5" clause="7" testNumber="2496"/>
			<description>Entry F in ActionSubmitForm is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in ActionSubmitForm is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2497"/>
			<description>Entry Fields with type Array in ActionSubmitForm shall be object ArrayOfFieldID</description>
			<test>FieldsHasTypeArray != true || Fields_size == 1</test>
			<error>
				<message>Entry Fields with type Array in ActionSubmitForm is not object ArrayOfFieldID</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2498"/>
			<description>Entry Fields in ActionSubmitForm shall have type Array</description>
			<test>containsFields == false || FieldsHasTypeArray == true</test>
			<error>
				<message>Entry Fields in ActionSubmitForm is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2499"/>
			<description>Entry Flags in ActionSubmitForm shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in ActionSubmitForm is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_5" clause="9" testNumber="2500"/>
			<description>Entry Flags with type Bitmask in ActionSubmitForm shall satisfy special case: fn:Eval(fn:BitClear(13) &amp;&amp; fn:BitsClear(15 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in ActionSubmitForm does not satisfy special case: fn:Eval(fn:BitClear(13) &amp;&amp; fn:BitsClear(15 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2501"/>
			<description>Entry S in ActionSubmitForm shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionSubmitForm is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_5" clause="7" testNumber="2502"/>
			<description>Entry S in ActionSubmitForm is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionSubmitForm is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_5" clause="6" testNumber="2503"/>
			<description>Entry S with type Name in ActionSubmitForm shall have value SubmitForm</description>
			<test>SHasTypeName != true || SNameValue == "SubmitForm"</test>
			<error>
				<message>Entry S with type Name in ActionSubmitForm has incorrect value %2 instead of SubmitForm</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="1" testNumber="2620"/>
			<description>ActionThread shall not contain entries except B, D, F, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionThread contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2621"/>
			<description>Entry B with type Dictionary in ActionThread shall be object Bead</description>
			<test>BHasTypeDictionary != true || B_size == 1</test>
			<error>
				<message>Entry B with type Dictionary in ActionThread is not object Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2622"/>
			<description>Entry B in ActionThread shall have one of types: Integer, Dictionary</description>
			<test>containsB == false || BHasTypeInteger == true || BHasTypeDictionary == true</test>
			<error>
				<message>Entry B in ActionThread is not one of types: Integer, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="14" testNumber="2623"/>
			<description>Entry B with type Integer in ActionThread shall satisfy possible value predicate: fn:Eval(@B &gt;= 0)</description>
			<test>BHasTypeInteger != true || BIntegerValue &gt;= 0</test>
			<error>
				<message>Entry B with type Integer in ActionThread does not satisfy possible value predicate: fn:Eval(@B &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="10" testNumber="2624"/>
			<description>Entry B with type Dictionary in ActionThread shall be indirect</description>
			<test>BHasTypeDictionary != true || isBIndirect == true</test>
			<error>
				<message>Entry B with type Dictionary in ActionThread is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2625"/>
			<description>Entry D with type Dictionary in ActionThread shall be object Thread</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in ActionThread is not object Thread</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2626"/>
			<description>Entry D in ActionThread shall have one of types: StringText, Integer, Dictionary</description>
			<test>containsD == false || DHasTypeStringText == true || DHasTypeInteger == true || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in ActionThread is not one of types: StringText, Integer, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="7" testNumber="2627"/>
			<description>Entry D in ActionThread is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in ActionThread is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="14" testNumber="2628"/>
			<description>Entry D with type Integer in ActionThread shall satisfy possible value predicate: fn:Eval((@D &gt;= 0) &amp;&amp; (@D &lt; fn:ArrayLength(trailer::Catalog::Threads)))</description>
			<test>DHasTypeInteger != true || (DIntegerValue &gt;= 0) &amp;&amp; (DIntegerValue &lt; trailerCatalogThreadsArraySize)</test>
			<error>
				<message>Entry D with type Integer in ActionThread does not satisfy possible value predicate: fn:Eval((@D &gt;= 0) &amp;&amp; (@D &lt; fn:ArrayLength(trailer::Catalog::Threads)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="10" testNumber="2629"/>
			<description>Entry D with type Dictionary in ActionThread shall be indirect</description>
			<test>DHasTypeDictionary != true || isDIndirect == true</test>
			<error>
				<message>Entry D with type Dictionary in ActionThread is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2630"/>
			<description>Entry F with type Dictionary in ActionThread shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ActionThread is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2631"/>
			<description>Entry F in ActionThread shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ActionThread is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2632"/>
			<description>Entry Next with type Array in ActionThread shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionThread is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2633"/>
			<description>Entry Next with type Dictionary in ActionThread shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionThread is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2634"/>
			<description>Entry Next in ActionThread shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionThread is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2635"/>
			<description>Entry S in ActionThread shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionThread is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="7" testNumber="2636"/>
			<description>Entry S in ActionThread is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionThread is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="6" testNumber="2637"/>
			<description>Entry S with type Name in ActionThread shall have value Thread</description>
			<test>SHasTypeName != true || SNameValue == "Thread"</test>
			<error>
				<message>Entry S with type Name in ActionThread has incorrect value %2 instead of Thread</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2638"/>
			<description>Entry Type in ActionThread shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionThread is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_5" clause="6" testNumber="2639"/>
			<description>Entry Type with type Name in ActionThread shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionThread has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_5" clause="1" testNumber="2700"/>
			<description>ActionTransition shall not contain entries except Next, S, Trans, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Trans' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionTransition contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Trans' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2701"/>
			<description>Entry Next with type Array in ActionTransition shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionTransition is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2702"/>
			<description>Entry Next with type Dictionary in ActionTransition shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionTransition is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2703"/>
			<description>Entry Next in ActionTransition shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionTransition is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2704"/>
			<description>Entry S in ActionTransition shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionTransition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_5" clause="7" testNumber="2705"/>
			<description>Entry S in ActionTransition is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionTransition is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_5" clause="6" testNumber="2706"/>
			<description>Entry S with type Name in ActionTransition shall have value Trans</description>
			<test>SHasTypeName != true || SNameValue == "Trans"</test>
			<error>
				<message>Entry S with type Name in ActionTransition has incorrect value %2 instead of Trans</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2707"/>
			<description>Entry Trans with type Dictionary in ActionTransition shall be object Transition</description>
			<test>TransHasTypeDictionary != true || Trans_size == 1</test>
			<error>
				<message>Entry Trans with type Dictionary in ActionTransition is not object Transition</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2708"/>
			<description>Entry Trans in ActionTransition shall have type Dictionary</description>
			<test>containsTrans == false || TransHasTypeDictionary == true</test>
			<error>
				<message>Entry Trans in ActionTransition is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_5" clause="7" testNumber="2709"/>
			<description>Entry Trans in ActionTransition is required</description>
			<test>containsTrans == true</test>
			<error>
				<message>Entry Trans in ActionTransition is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2710"/>
			<description>Entry Type in ActionTransition shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionTransition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_5" clause="6" testNumber="2711"/>
			<description>Entry Type with type Name in ActionTransition shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionTransition has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_5" clause="1" testNumber="2793"/>
			<description>ActionURI shall not contain entries except IsMap, Next, S, Type, URI</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'IsMap' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URI').length == 0</test>
			<error>
				<message>ActionURI contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'IsMap' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URI').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2794"/>
			<description>Entry IsMap in ActionURI shall have type Boolean</description>
			<test>containsIsMap == false || IsMapHasTypeBoolean == true</test>
			<error>
				<message>Entry IsMap in ActionURI is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2795"/>
			<description>Entry Next with type Array in ActionURI shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionURI is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2796"/>
			<description>Entry Next with type Dictionary in ActionURI shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionURI is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2797"/>
			<description>Entry Next in ActionURI shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionURI is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2798"/>
			<description>Entry S in ActionURI shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionURI is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_5" clause="7" testNumber="2799"/>
			<description>Entry S in ActionURI is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionURI is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_5" clause="6" testNumber="2800"/>
			<description>Entry S with type Name in ActionURI shall have value URI</description>
			<test>SHasTypeName != true || SNameValue == "URI"</test>
			<error>
				<message>Entry S with type Name in ActionURI has incorrect value %2 instead of URI</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2801"/>
			<description>Entry Type in ActionURI shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionURI is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_5" clause="6" testNumber="2802"/>
			<description>Entry Type with type Name in ActionURI shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionURI has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2803"/>
			<description>Entry URI in ActionURI shall have type StringAscii</description>
			<test>containsURI == false || URIHasTypeStringAscii == true</test>
			<error>
				<message>Entry URI in ActionURI is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_5" clause="7" testNumber="2804"/>
			<description>Entry URI in ActionURI is required</description>
			<test>containsURI == true</test>
			<error>
				<message>Entry URI in ActionURI is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_5" clause="1" testNumber="2852"/>
			<description>AddActionCatalog shall not contain entries except DC, DP, DS, WP, WS</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DC' &amp;&amp; elem != 'DP' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'WP' &amp;&amp; elem != 'WS').length == 0</test>
			<error>
				<message>AddActionCatalog contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DC' &amp;&amp; elem != 'DP' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'WP' &amp;&amp; elem != 'WS').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2853"/>
			<description>Entry DC with type Dictionary in AddActionCatalog shall be object ActionECMAScript</description>
			<test>DCHasTypeDictionary != true || DC_size == 1</test>
			<error>
				<message>Entry DC with type Dictionary in AddActionCatalog is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2854"/>
			<description>Entry DC in AddActionCatalog shall have type Dictionary</description>
			<test>containsDC == false || DCHasTypeDictionary == true</test>
			<error>
				<message>Entry DC in AddActionCatalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2855"/>
			<description>Entry DP with type Dictionary in AddActionCatalog shall be object ActionECMAScript</description>
			<test>DPHasTypeDictionary != true || DP_size == 1</test>
			<error>
				<message>Entry DP with type Dictionary in AddActionCatalog is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2856"/>
			<description>Entry DP in AddActionCatalog shall have type Dictionary</description>
			<test>containsDP == false || DPHasTypeDictionary == true</test>
			<error>
				<message>Entry DP in AddActionCatalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2857"/>
			<description>Entry DS with type Dictionary in AddActionCatalog shall be object ActionECMAScript</description>
			<test>DSHasTypeDictionary != true || DS_size == 1</test>
			<error>
				<message>Entry DS with type Dictionary in AddActionCatalog is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2858"/>
			<description>Entry DS in AddActionCatalog shall have type Dictionary</description>
			<test>containsDS == false || DSHasTypeDictionary == true</test>
			<error>
				<message>Entry DS in AddActionCatalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2859"/>
			<description>Entry WP with type Dictionary in AddActionCatalog shall be object ActionECMAScript</description>
			<test>WPHasTypeDictionary != true || WP_size == 1</test>
			<error>
				<message>Entry WP with type Dictionary in AddActionCatalog is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2860"/>
			<description>Entry WP in AddActionCatalog shall have type Dictionary</description>
			<test>containsWP == false || WPHasTypeDictionary == true</test>
			<error>
				<message>Entry WP in AddActionCatalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2861"/>
			<description>Entry WS with type Dictionary in AddActionCatalog shall be object ActionECMAScript</description>
			<test>WSHasTypeDictionary != true || WS_size == 1</test>
			<error>
				<message>Entry WS with type Dictionary in AddActionCatalog is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2862"/>
			<description>Entry WS in AddActionCatalog shall have type Dictionary</description>
			<test>containsWS == false || WSHasTypeDictionary == true</test>
			<error>
				<message>Entry WS in AddActionCatalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_5" clause="1" testNumber="2914"/>
			<description>AddActionFormField shall not contain entries except C, F, K, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'F' &amp;&amp; elem != 'K' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>AddActionFormField contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'F' &amp;&amp; elem != 'K' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2915"/>
			<description>Entry C with type Dictionary in AddActionFormField shall be object ActionECMAScript</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in AddActionFormField is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2916"/>
			<description>Entry C in AddActionFormField shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in AddActionFormField is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2917"/>
			<description>Entry F with type Dictionary in AddActionFormField shall be object ActionECMAScript</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in AddActionFormField is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2918"/>
			<description>Entry F in AddActionFormField shall have type Dictionary</description>
			<test>containsF == false || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in AddActionFormField is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2919"/>
			<description>Entry K with type Dictionary in AddActionFormField shall be object ActionECMAScript</description>
			<test>KHasTypeDictionary != true || K_size == 1</test>
			<error>
				<message>Entry K with type Dictionary in AddActionFormField is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2920"/>
			<description>Entry K in AddActionFormField shall have type Dictionary</description>
			<test>containsK == false || KHasTypeDictionary == true</test>
			<error>
				<message>Entry K in AddActionFormField is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2921"/>
			<description>Entry V with type Dictionary in AddActionFormField shall be object ActionECMAScript</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in AddActionFormField is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2922"/>
			<description>Entry V in AddActionFormField shall have type Dictionary</description>
			<test>containsV == false || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in AddActionFormField is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_5" clause="1" testNumber="2965"/>
			<description>AddActionPageObject shall not contain entries except C, O</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'O').length == 0</test>
			<error>
				<message>AddActionPageObject contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'O').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2966"/>
			<description>Entry C with type Dictionary in AddActionPageObject shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in AddActionPageObject is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2967"/>
			<description>Entry C in AddActionPageObject shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in AddActionPageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2968"/>
			<description>Entry O with type Dictionary in AddActionPageObject shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>OHasTypeDictionary != true || O_size == 1</test>
			<error>
				<message>Entry O with type Dictionary in AddActionPageObject is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2969"/>
			<description>Entry O in AddActionPageObject shall have type Dictionary</description>
			<test>containsO == false || OHasTypeDictionary == true</test>
			<error>
				<message>Entry O in AddActionPageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_5" clause="1" testNumber="2985"/>
			<description>AddActionScreenAnnotation shall not contain entries except D, E, PC, PI, PO, PV, U, X</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'E' &amp;&amp; elem != 'PC' &amp;&amp; elem != 'PI' &amp;&amp; elem != 'PO' &amp;&amp; elem != 'PV' &amp;&amp; elem != 'U' &amp;&amp; elem != 'X').length == 0</test>
			<error>
				<message>AddActionScreenAnnotation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'E' &amp;&amp; elem != 'PC' &amp;&amp; elem != 'PI' &amp;&amp; elem != 'PO' &amp;&amp; elem != 'PV' &amp;&amp; elem != 'U' &amp;&amp; elem != 'X').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2986"/>
			<description>Entry D with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2987"/>
			<description>Entry D in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in AddActionScreenAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2988"/>
			<description>Entry E with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>EHasTypeDictionary != true || E_size == 1</test>
			<error>
				<message>Entry E with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2989"/>
			<description>Entry E in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsE == false || EHasTypeDictionary == true</test>
			<error>
				<message>Entry E in AddActionScreenAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2990"/>
			<description>Entry PC with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>PCHasTypeDictionary != true || PC_size == 1</test>
			<error>
				<message>Entry PC with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2991"/>
			<description>Entry PC in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsPC == false || PCHasTypeDictionary == true</test>
			<error>
				<message>Entry PC in AddActionScreenAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2992"/>
			<description>Entry PI with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>PIHasTypeDictionary != true || PI_size == 1</test>
			<error>
				<message>Entry PI with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2993"/>
			<description>Entry PI in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsPI == false || PIHasTypeDictionary == true</test>
			<error>
				<message>Entry PI in AddActionScreenAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2994"/>
			<description>Entry PO with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>POHasTypeDictionary != true || PO_size == 1</test>
			<error>
				<message>Entry PO with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2995"/>
			<description>Entry PO in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsPO == false || POHasTypeDictionary == true</test>
			<error>
				<message>Entry PO in AddActionScreenAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2996"/>
			<description>Entry PV with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>PVHasTypeDictionary != true || PV_size == 1</test>
			<error>
				<message>Entry PV with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2997"/>
			<description>Entry PV in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsPV == false || PVHasTypeDictionary == true</test>
			<error>
				<message>Entry PV in AddActionScreenAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="2998"/>
			<description>Entry U with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>UHasTypeDictionary != true || U_size == 1</test>
			<error>
				<message>Entry U with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="2999"/>
			<description>Entry U in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsU == false || UHasTypeDictionary == true</test>
			<error>
				<message>Entry U in AddActionScreenAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3000"/>
			<description>Entry X with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>XHasTypeDictionary != true || X_size == 1</test>
			<error>
				<message>Entry X with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3001"/>
			<description>Entry X in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsX == false || XHasTypeDictionary == true</test>
			<error>
				<message>Entry X in AddActionScreenAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="1" testNumber="3092"/>
			<description>AddActionWidgetAnnotation shall not contain entries except Bl, D, E, Fo, PC, PI, PO, PV, U, X</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Bl' &amp;&amp; elem != 'D' &amp;&amp; elem != 'E' &amp;&amp; elem != 'Fo' &amp;&amp; elem != 'PC' &amp;&amp; elem != 'PI' &amp;&amp; elem != 'PO' &amp;&amp; elem != 'PV' &amp;&amp; elem != 'U' &amp;&amp; elem != 'X').length == 0</test>
			<error>
				<message>AddActionWidgetAnnotation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Bl' &amp;&amp; elem != 'D' &amp;&amp; elem != 'E' &amp;&amp; elem != 'Fo' &amp;&amp; elem != 'PC' &amp;&amp; elem != 'PI' &amp;&amp; elem != 'PO' &amp;&amp; elem != 'PV' &amp;&amp; elem != 'U' &amp;&amp; elem != 'X').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3093"/>
			<description>Entry Bl with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>BlHasTypeDictionary != true || Bl_size == 1</test>
			<error>
				<message>Entry Bl with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3094"/>
			<description>Entry Bl in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsBl == false || BlHasTypeDictionary == true</test>
			<error>
				<message>Entry Bl in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3095"/>
			<description>Entry D with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3096"/>
			<description>Entry D in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3097"/>
			<description>Entry E with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>EHasTypeDictionary != true || E_size == 1</test>
			<error>
				<message>Entry E with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3098"/>
			<description>Entry E in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsE == false || EHasTypeDictionary == true</test>
			<error>
				<message>Entry E in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3099"/>
			<description>Entry Fo with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>FoHasTypeDictionary != true || Fo_size == 1</test>
			<error>
				<message>Entry Fo with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3100"/>
			<description>Entry Fo in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsFo == false || FoHasTypeDictionary == true</test>
			<error>
				<message>Entry Fo in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3101"/>
			<description>Entry PC with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>PCHasTypeDictionary != true || PC_size == 1</test>
			<error>
				<message>Entry PC with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3102"/>
			<description>Entry PC in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsPC == false || PCHasTypeDictionary == true</test>
			<error>
				<message>Entry PC in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3103"/>
			<description>Entry PI with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>PIHasTypeDictionary != true || PI_size == 1</test>
			<error>
				<message>Entry PI with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3104"/>
			<description>Entry PI in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsPI == false || PIHasTypeDictionary == true</test>
			<error>
				<message>Entry PI in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3105"/>
			<description>Entry PO with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>POHasTypeDictionary != true || PO_size == 1</test>
			<error>
				<message>Entry PO with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3106"/>
			<description>Entry PO in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsPO == false || POHasTypeDictionary == true</test>
			<error>
				<message>Entry PO in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3107"/>
			<description>Entry PV with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>PVHasTypeDictionary != true || PV_size == 1</test>
			<error>
				<message>Entry PV with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3108"/>
			<description>Entry PV in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsPV == false || PVHasTypeDictionary == true</test>
			<error>
				<message>Entry PV in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3109"/>
			<description>Entry U with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>UHasTypeDictionary != true || U_size == 1</test>
			<error>
				<message>Entry U with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3110"/>
			<description>Entry U in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsU == false || UHasTypeDictionary == true</test>
			<error>
				<message>Entry U in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3111"/>
			<description>Entry X with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>XHasTypeDictionary != true || X_size == 1</test>
			<error>
				<message>Entry X with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3112"/>
			<description>Entry X in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsX == false || XHasTypeDictionary == true</test>
			<error>
				<message>Entry X in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_5" clause="1" testNumber="3188"/>
			<description>AlternateImage shall not contain entries except DefaultForPrinting, Image, OC</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DefaultForPrinting' &amp;&amp; elem != 'Image' &amp;&amp; elem != 'OC').length == 0</test>
			<error>
				<message>AlternateImage contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DefaultForPrinting' &amp;&amp; elem != 'Image' &amp;&amp; elem != 'OC').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3189"/>
			<description>Entry DefaultForPrinting in AlternateImage shall have type Boolean</description>
			<test>containsDefaultForPrinting == false || DefaultForPrintingHasTypeBoolean == true</test>
			<error>
				<message>Entry DefaultForPrinting in AlternateImage is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3190"/>
			<description>Entry Image with type Stream in AlternateImage shall be object XObjectImage</description>
			<test>ImageHasTypeStream != true || Image_size == 1</test>
			<error>
				<message>Entry Image with type Stream in AlternateImage is not object XObjectImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3191"/>
			<description>Entry Image in AlternateImage shall have type Stream</description>
			<test>containsImage == false || ImageHasTypeStream == true</test>
			<error>
				<message>Entry Image in AlternateImage is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_5" clause="7" testNumber="3192"/>
			<description>Entry Image in AlternateImage is required</description>
			<test>containsImage == true</test>
			<error>
				<message>Entry Image in AlternateImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_5" clause="10" testNumber="3193"/>
			<description>Entry Image with type Stream in AlternateImage shall be indirect</description>
			<test>ImageHasTypeStream != true || isImageIndirect == true</test>
			<error>
				<message>Entry Image with type Stream in AlternateImage is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3194"/>
			<description>Entry OC with type Dictionary in AlternateImage shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AlternateImage is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3195"/>
			<description>Entry OC in AlternateImage shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AlternateImage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="1" testNumber="3354"/>
			<description>AnnotCaret shall not contain entries except AP, AS, Border, C, CA, Contents, CreationDate, F, IRT, M, NM, OC, P, Popup, RC, RD, Rect, StructParent, Subj, Subtype, Sy, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Sy' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotCaret contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Sy' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3355"/>
			<description>Entry AP with type Dictionary in AnnotCaret shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotCaret is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3356"/>
			<description>Entry AP in AnnotCaret shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotCaret is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="11" testNumber="3357"/>
			<description>Entry AP in AnnotCaret is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotCaret is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3358"/>
			<description>Entry AS in AnnotCaret shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotCaret is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="11" testNumber="3359"/>
			<description>Entry AS in AnnotCaret is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotCaret is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3360"/>
			<description>Entry Border with type Array in AnnotCaret shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotCaret is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3361"/>
			<description>Entry Border in AnnotCaret shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotCaret is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3362"/>
			<description>Entry C with type Array in AnnotCaret shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotCaret is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3363"/>
			<description>Entry C in AnnotCaret shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotCaret is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3364"/>
			<description>Entry CA in AnnotCaret shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotCaret is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="14" testNumber="3365"/>
			<description>Entry CA with type Number in AnnotCaret shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotCaret does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3366"/>
			<description>Entry Contents in AnnotCaret shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotCaret is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3367"/>
			<description>Entry CreationDate in AnnotCaret shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotCaret is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3368"/>
			<description>Entry F in AnnotCaret shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotCaret is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="9" testNumber="3369"/>
			<description>Entry F with type Bitmask in AnnotCaret shall satisfy special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:BitsClear(11 , 32))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotCaret does not satisfy special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:BitsClear(11 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3370"/>
			<description>Entry IRT with type Dictionary in AnnotCaret shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotCaret is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3371"/>
			<description>Entry IRT in AnnotCaret shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotCaret is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="11" testNumber="3372"/>
			<description>Entry IRT in AnnotCaret is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotCaret is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3373"/>
			<description>Entry M in AnnotCaret shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotCaret is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3374"/>
			<description>Entry NM in AnnotCaret shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotCaret is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3375"/>
			<description>Entry OC with type Dictionary in AnnotCaret shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotCaret is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3376"/>
			<description>Entry OC in AnnotCaret shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotCaret is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3377"/>
			<description>Entry P with type Dictionary in AnnotCaret shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotCaret is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3378"/>
			<description>Entry P in AnnotCaret shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotCaret is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="10" testNumber="3379"/>
			<description>Entry P with type Dictionary in AnnotCaret shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotCaret is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3380"/>
			<description>Entry Popup with type Dictionary in AnnotCaret shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotCaret is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3381"/>
			<description>Entry Popup in AnnotCaret shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotCaret is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="10" testNumber="3382"/>
			<description>Entry Popup with type Dictionary in AnnotCaret shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotCaret is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3383"/>
			<description>Entry RC with type Stream in AnnotCaret shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotCaret is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3384"/>
			<description>Entry RC in AnnotCaret shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotCaret is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="10" testNumber="3385"/>
			<description>Entry RC with type Stream in AnnotCaret shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotCaret is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3386"/>
			<description>Entry RD in AnnotCaret shall have type Rectangle</description>
			<test>containsRD == false || RDHasTypeRectangle == true</test>
			<error>
				<message>Entry RD in AnnotCaret is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="9" testNumber="3387"/>
			<description>Entry RD with type Rectangle in AnnotCaret shall satisfy special case: fn:Eval((RD::@0&gt;= 0) &amp;&amp; (RD::@1&gt;= 0) &amp;&amp; (RD::@2&gt;= 0) &amp;&amp; (RD::@3&gt;= 0) &amp;&amp; ((RD::@1+ RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0+ RD::@2) &lt; fn:RectWidth(Rect)))</description>
			<test>RDHasTypeRectangle != true || ((RD0NumberValue &gt;= 0) &amp;&amp; (RD1NumberValue &gt;= 0) &amp;&amp; (RD2NumberValue &gt;= 0) &amp;&amp; (RD3NumberValue &gt;= 0) &amp;&amp; ((RD1NumberValue + RD3NumberValue) &lt; RectRectHeight) &amp;&amp; ((RD0NumberValue + RD2NumberValue) &lt; RectRectWidth))</test>
			<error>
				<message>Entry RD with type Rectangle in AnnotCaret does not satisfy special case: fn:Eval((RD::@0&gt;= 0) &amp;&amp; (RD::@1&gt;= 0) &amp;&amp; (RD::@2&gt;= 0) &amp;&amp; (RD::@3&gt;= 0) &amp;&amp; ((RD::@1+ RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0+ RD::@2) &lt; fn:RectWidth(Rect)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3388"/>
			<description>Entry Rect in AnnotCaret shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotCaret is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="7" testNumber="3389"/>
			<description>Entry Rect in AnnotCaret is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotCaret is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3390"/>
			<description>Entry StructParent in AnnotCaret shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotCaret is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3391"/>
			<description>Entry Subj in AnnotCaret shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotCaret is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3392"/>
			<description>Entry Subtype in AnnotCaret shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotCaret is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="7" testNumber="3393"/>
			<description>Entry Subtype in AnnotCaret is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotCaret is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="6" testNumber="3394"/>
			<description>Entry Subtype with type Name in AnnotCaret shall have value Caret</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Caret"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotCaret has incorrect value %2 instead of Caret</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3395"/>
			<description>Entry Sy in AnnotCaret shall have type Name</description>
			<test>containsSy == false || SyHasTypeName == true</test>
			<error>
				<message>Entry Sy in AnnotCaret is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="6" testNumber="3396"/>
			<description>Entry Sy with type Name in AnnotCaret shall have one of values: P, None</description>
			<test>SyHasTypeName != true || SyNameValue == "P" || SyNameValue == "None"</test>
			<error>
				<message>Entry Sy with type Name in AnnotCaret has incorrect value %2 instead of P, None</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SyNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3397"/>
			<description>Entry T in AnnotCaret shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotCaret is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3398"/>
			<description>Entry Type in AnnotCaret shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotCaret is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_5" clause="6" testNumber="3399"/>
			<description>Entry Type with type Name in AnnotCaret shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotCaret has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="1" testNumber="3627"/>
			<description>AnnotCircle shall not contain entries except AP, AS, BE, BS, Border, C, CA, Contents, CreationDate, F, IC, IRT, M, NM, OC, P, Popup, RC, RD, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotCircle contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3628"/>
			<description>Entry AP with type Dictionary in AnnotCircle shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotCircle is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3629"/>
			<description>Entry AP in AnnotCircle shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotCircle is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="11" testNumber="3630"/>
			<description>Entry AP in AnnotCircle is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotCircle is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3631"/>
			<description>Entry AS in AnnotCircle shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotCircle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="11" testNumber="3632"/>
			<description>Entry AS in AnnotCircle is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotCircle is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3633"/>
			<description>Entry BE with type Dictionary in AnnotCircle shall be object BorderEffect</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in AnnotCircle is not object BorderEffect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3634"/>
			<description>Entry BE in AnnotCircle shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in AnnotCircle is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3635"/>
			<description>Entry BS with type Dictionary in AnnotCircle shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotCircle is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3636"/>
			<description>Entry BS in AnnotCircle shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotCircle is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3637"/>
			<description>Entry Border with type Array in AnnotCircle shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotCircle is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3638"/>
			<description>Entry Border in AnnotCircle shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotCircle is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3639"/>
			<description>Entry C with type Array in AnnotCircle shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotCircle is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3640"/>
			<description>Entry C in AnnotCircle shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotCircle is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3641"/>
			<description>Entry CA in AnnotCircle shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotCircle is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="14" testNumber="3642"/>
			<description>Entry CA with type Number in AnnotCircle shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotCircle does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3643"/>
			<description>Entry Contents in AnnotCircle shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotCircle is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3644"/>
			<description>Entry CreationDate in AnnotCircle shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotCircle is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3645"/>
			<description>Entry F in AnnotCircle shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotCircle is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="9" testNumber="3646"/>
			<description>Entry F with type Bitmask in AnnotCircle shall satisfy special case: fn:Eval(fn:IsPDFVersion(1.3 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotCircle does not satisfy special case: fn:Eval(fn:IsPDFVersion(1.3 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3647"/>
			<description>Entry IC with type Array in AnnotCircle shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>ICHasTypeArray != true || IC_size == 1</test>
			<error>
				<message>Entry IC with type Array in AnnotCircle is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3648"/>
			<description>Entry IC in AnnotCircle shall have type Array</description>
			<test>containsIC == false || ICHasTypeArray == true</test>
			<error>
				<message>Entry IC in AnnotCircle is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3649"/>
			<description>Entry IRT with type Dictionary in AnnotCircle shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotCircle is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3650"/>
			<description>Entry IRT in AnnotCircle shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotCircle is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="11" testNumber="3651"/>
			<description>Entry IRT in AnnotCircle is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotCircle is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3652"/>
			<description>Entry M in AnnotCircle shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotCircle is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3653"/>
			<description>Entry NM in AnnotCircle shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotCircle is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3654"/>
			<description>Entry OC with type Dictionary in AnnotCircle shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotCircle is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3655"/>
			<description>Entry OC in AnnotCircle shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotCircle is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3656"/>
			<description>Entry P with type Dictionary in AnnotCircle shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotCircle is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3657"/>
			<description>Entry P in AnnotCircle shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotCircle is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="10" testNumber="3658"/>
			<description>Entry P with type Dictionary in AnnotCircle shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotCircle is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3659"/>
			<description>Entry Popup with type Dictionary in AnnotCircle shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotCircle is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3660"/>
			<description>Entry Popup in AnnotCircle shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotCircle is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="10" testNumber="3661"/>
			<description>Entry Popup with type Dictionary in AnnotCircle shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotCircle is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3662"/>
			<description>Entry RC with type Stream in AnnotCircle shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotCircle is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3663"/>
			<description>Entry RC in AnnotCircle shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotCircle is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="10" testNumber="3664"/>
			<description>Entry RC with type Stream in AnnotCircle shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotCircle is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3665"/>
			<description>Entry RD in AnnotCircle shall have type Rectangle</description>
			<test>containsRD == false || RDHasTypeRectangle == true</test>
			<error>
				<message>Entry RD in AnnotCircle is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="9" testNumber="3666"/>
			<description>Entry RD with type Rectangle in AnnotCircle shall satisfy special case: fn:Eval((RD::@0&gt;= 0) &amp;&amp; (RD::@1&gt;= 0) &amp;&amp; (RD::@2&gt;= 0) &amp;&amp; (RD::@3&gt;= 0) &amp;&amp; ((RD::@1+ RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0+ RD::@2) &lt; fn:RectWidth(Rect)))</description>
			<test>RDHasTypeRectangle != true || ((RD0NumberValue &gt;= 0) &amp;&amp; (RD1NumberValue &gt;= 0) &amp;&amp; (RD2NumberValue &gt;= 0) &amp;&amp; (RD3NumberValue &gt;= 0) &amp;&amp; ((RD1NumberValue + RD3NumberValue) &lt; RectRectHeight) &amp;&amp; ((RD0NumberValue + RD2NumberValue) &lt; RectRectWidth))</test>
			<error>
				<message>Entry RD with type Rectangle in AnnotCircle does not satisfy special case: fn:Eval((RD::@0&gt;= 0) &amp;&amp; (RD::@1&gt;= 0) &amp;&amp; (RD::@2&gt;= 0) &amp;&amp; (RD::@3&gt;= 0) &amp;&amp; ((RD::@1+ RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0+ RD::@2) &lt; fn:RectWidth(Rect)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3667"/>
			<description>Entry Rect in AnnotCircle shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotCircle is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="7" testNumber="3668"/>
			<description>Entry Rect in AnnotCircle is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotCircle is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3669"/>
			<description>Entry StructParent in AnnotCircle shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotCircle is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3670"/>
			<description>Entry Subj in AnnotCircle shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotCircle is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3671"/>
			<description>Entry Subtype in AnnotCircle shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotCircle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="7" testNumber="3672"/>
			<description>Entry Subtype in AnnotCircle is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotCircle is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="6" testNumber="3673"/>
			<description>Entry Subtype with type Name in AnnotCircle shall have value Circle</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Circle"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotCircle has incorrect value %2 instead of Circle</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3674"/>
			<description>Entry T in AnnotCircle shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotCircle is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3675"/>
			<description>Entry Type in AnnotCircle shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotCircle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_5" clause="6" testNumber="3676"/>
			<description>Entry Type with type Name in AnnotCircle shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotCircle has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="1" testNumber="3918"/>
			<description>AnnotFileAttachment shall not contain entries except AP, AS, Border, C, CA, Contents, CreationDate, F, FS, IRT, M, NM, Name, OC, P, Popup, RC, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FS' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotFileAttachment contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FS' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3919"/>
			<description>Entry AP with type Dictionary in AnnotFileAttachment shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotFileAttachment is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3920"/>
			<description>Entry AP in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotFileAttachment is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="11" testNumber="3921"/>
			<description>Entry AP in AnnotFileAttachment is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotFileAttachment is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3922"/>
			<description>Entry AS in AnnotFileAttachment shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotFileAttachment is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="11" testNumber="3923"/>
			<description>Entry AS in AnnotFileAttachment is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotFileAttachment is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3924"/>
			<description>Entry Border with type Array in AnnotFileAttachment shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotFileAttachment is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3925"/>
			<description>Entry Border in AnnotFileAttachment shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotFileAttachment is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3926"/>
			<description>Entry C with type Array in AnnotFileAttachment shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotFileAttachment is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3927"/>
			<description>Entry C in AnnotFileAttachment shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotFileAttachment is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3928"/>
			<description>Entry CA in AnnotFileAttachment shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotFileAttachment is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="14" testNumber="3929"/>
			<description>Entry CA with type Number in AnnotFileAttachment shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotFileAttachment does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3930"/>
			<description>Entry Contents in AnnotFileAttachment shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotFileAttachment is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3931"/>
			<description>Entry CreationDate in AnnotFileAttachment shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotFileAttachment is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3932"/>
			<description>Entry F in AnnotFileAttachment shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotFileAttachment is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="9" testNumber="3933"/>
			<description>Entry F with type Bitmask in AnnotFileAttachment shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotFileAttachment does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3934"/>
			<description>Entry FS with type Dictionary in AnnotFileAttachment shall be object FileSpecification</description>
			<test>FSHasTypeDictionary != true || FS_size == 1</test>
			<error>
				<message>Entry FS with type Dictionary in AnnotFileAttachment is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3935"/>
			<description>Entry FS in AnnotFileAttachment shall have one of types: String, Dictionary</description>
			<test>containsFS == false || FSHasTypeString == true || FSHasTypeDictionary == true</test>
			<error>
				<message>Entry FS in AnnotFileAttachment is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="7" testNumber="3936"/>
			<description>Entry FS in AnnotFileAttachment is required</description>
			<test>containsFS == true</test>
			<error>
				<message>Entry FS in AnnotFileAttachment is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3937"/>
			<description>Entry IRT with type Dictionary in AnnotFileAttachment shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotFileAttachment is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3938"/>
			<description>Entry IRT in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotFileAttachment is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="11" testNumber="3939"/>
			<description>Entry IRT in AnnotFileAttachment is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotFileAttachment is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3940"/>
			<description>Entry M in AnnotFileAttachment shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotFileAttachment is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3941"/>
			<description>Entry NM in AnnotFileAttachment shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotFileAttachment is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3942"/>
			<description>Entry Name in AnnotFileAttachment shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in AnnotFileAttachment is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3943"/>
			<description>Entry OC with type Dictionary in AnnotFileAttachment shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotFileAttachment is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3944"/>
			<description>Entry OC in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotFileAttachment is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3945"/>
			<description>Entry P with type Dictionary in AnnotFileAttachment shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotFileAttachment is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3946"/>
			<description>Entry P in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotFileAttachment is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="10" testNumber="3947"/>
			<description>Entry P with type Dictionary in AnnotFileAttachment shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotFileAttachment is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3948"/>
			<description>Entry Popup with type Dictionary in AnnotFileAttachment shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotFileAttachment is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3949"/>
			<description>Entry Popup in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotFileAttachment is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="10" testNumber="3950"/>
			<description>Entry Popup with type Dictionary in AnnotFileAttachment shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotFileAttachment is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="17" testNumber="3951"/>
			<description>Entry RC with type Stream in AnnotFileAttachment shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotFileAttachment is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3952"/>
			<description>Entry RC in AnnotFileAttachment shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotFileAttachment is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="10" testNumber="3953"/>
			<description>Entry RC with type Stream in AnnotFileAttachment shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotFileAttachment is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3954"/>
			<description>Entry Rect in AnnotFileAttachment shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotFileAttachment is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="7" testNumber="3955"/>
			<description>Entry Rect in AnnotFileAttachment is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotFileAttachment is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3956"/>
			<description>Entry StructParent in AnnotFileAttachment shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotFileAttachment is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3957"/>
			<description>Entry Subj in AnnotFileAttachment shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotFileAttachment is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3958"/>
			<description>Entry Subtype in AnnotFileAttachment shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotFileAttachment is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="7" testNumber="3959"/>
			<description>Entry Subtype in AnnotFileAttachment is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotFileAttachment is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="6" testNumber="3960"/>
			<description>Entry Subtype with type Name in AnnotFileAttachment shall have value FileAttachment</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "FileAttachment"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotFileAttachment has incorrect value %2 instead of FileAttachment</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3961"/>
			<description>Entry T in AnnotFileAttachment shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotFileAttachment is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="8" testNumber="3962"/>
			<description>Entry Type in AnnotFileAttachment shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotFileAttachment is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_5" clause="6" testNumber="3963"/>
			<description>Entry Type with type Name in AnnotFileAttachment shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotFileAttachment has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="1" testNumber="4191"/>
			<description>AnnotFreeText shall not contain entries except AP, AS, Border, C, CA, Contents, CreationDate, DA, DS, F, IRT, M, NM, OC, P, Popup, Q, RC, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotFreeText contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4192"/>
			<description>Entry AP with type Dictionary in AnnotFreeText shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotFreeText is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4193"/>
			<description>Entry AP in AnnotFreeText shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotFreeText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="11" testNumber="4194"/>
			<description>Entry AP in AnnotFreeText is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotFreeText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4195"/>
			<description>Entry AS in AnnotFreeText shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotFreeText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="11" testNumber="4196"/>
			<description>Entry AS in AnnotFreeText is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotFreeText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4197"/>
			<description>Entry Border with type Array in AnnotFreeText shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotFreeText is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4198"/>
			<description>Entry Border in AnnotFreeText shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotFreeText is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4199"/>
			<description>Entry C with type Array in AnnotFreeText shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotFreeText is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4200"/>
			<description>Entry C in AnnotFreeText shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotFreeText is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4201"/>
			<description>Entry CA in AnnotFreeText shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotFreeText is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="14" testNumber="4202"/>
			<description>Entry CA with type Number in AnnotFreeText shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotFreeText does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4203"/>
			<description>Entry Contents in AnnotFreeText shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotFreeText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4204"/>
			<description>Entry CreationDate in AnnotFreeText shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotFreeText is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4205"/>
			<description>Entry DA in AnnotFreeText shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in AnnotFreeText is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="7" testNumber="4206"/>
			<description>Entry DA in AnnotFreeText is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in AnnotFreeText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4207"/>
			<description>Entry DS in AnnotFreeText shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in AnnotFreeText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4208"/>
			<description>Entry F in AnnotFreeText shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotFreeText is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="9" testNumber="4209"/>
			<description>Entry F with type Bitmask in AnnotFreeText shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotFreeText does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4210"/>
			<description>Entry IRT with type Dictionary in AnnotFreeText shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotFreeText is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4211"/>
			<description>Entry IRT in AnnotFreeText shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotFreeText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="11" testNumber="4212"/>
			<description>Entry IRT in AnnotFreeText is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotFreeText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4213"/>
			<description>Entry M in AnnotFreeText shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotFreeText is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4214"/>
			<description>Entry NM in AnnotFreeText shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotFreeText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4215"/>
			<description>Entry OC with type Dictionary in AnnotFreeText shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotFreeText is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4216"/>
			<description>Entry OC in AnnotFreeText shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotFreeText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4217"/>
			<description>Entry P with type Dictionary in AnnotFreeText shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotFreeText is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4218"/>
			<description>Entry P in AnnotFreeText shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotFreeText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="10" testNumber="4219"/>
			<description>Entry P with type Dictionary in AnnotFreeText shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotFreeText is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4220"/>
			<description>Entry Popup with type Dictionary in AnnotFreeText shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotFreeText is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4221"/>
			<description>Entry Popup in AnnotFreeText shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotFreeText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="10" testNumber="4222"/>
			<description>Entry Popup with type Dictionary in AnnotFreeText shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotFreeText is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4223"/>
			<description>Entry Q in AnnotFreeText shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in AnnotFreeText is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="6" testNumber="4224"/>
			<description>Entry Q with type Integer in AnnotFreeText shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in AnnotFreeText has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4225"/>
			<description>Entry RC with type Stream in AnnotFreeText shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotFreeText is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4226"/>
			<description>Entry RC in AnnotFreeText shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotFreeText is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="10" testNumber="4227"/>
			<description>Entry RC with type Stream in AnnotFreeText shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotFreeText is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4228"/>
			<description>Entry Rect in AnnotFreeText shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotFreeText is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="7" testNumber="4229"/>
			<description>Entry Rect in AnnotFreeText is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotFreeText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4230"/>
			<description>Entry StructParent in AnnotFreeText shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotFreeText is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4231"/>
			<description>Entry Subj in AnnotFreeText shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotFreeText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4232"/>
			<description>Entry Subtype in AnnotFreeText shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotFreeText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="7" testNumber="4233"/>
			<description>Entry Subtype in AnnotFreeText is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotFreeText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="6" testNumber="4234"/>
			<description>Entry Subtype with type Name in AnnotFreeText shall have value FreeText</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "FreeText"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotFreeText has incorrect value %2 instead of FreeText</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4235"/>
			<description>Entry T in AnnotFreeText shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotFreeText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4236"/>
			<description>Entry Type in AnnotFreeText shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotFreeText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_5" clause="6" testNumber="4237"/>
			<description>Entry Type with type Name in AnnotFreeText shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotFreeText has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="1" testNumber="4501"/>
			<description>AnnotHighlight shall not contain entries except AP, AS, Border, C, CA, Contents, CreationDate, F, IRT, M, NM, OC, P, Popup, QuadPoints, RC, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotHighlight contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4502"/>
			<description>Entry AP with type Dictionary in AnnotHighlight shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotHighlight is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4503"/>
			<description>Entry AP in AnnotHighlight shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotHighlight is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="11" testNumber="4504"/>
			<description>Entry AP in AnnotHighlight is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotHighlight is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4505"/>
			<description>Entry AS in AnnotHighlight shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotHighlight is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="11" testNumber="4506"/>
			<description>Entry AS in AnnotHighlight is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotHighlight is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4507"/>
			<description>Entry Border with type Array in AnnotHighlight shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotHighlight is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4508"/>
			<description>Entry Border in AnnotHighlight shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotHighlight is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4509"/>
			<description>Entry C with type Array in AnnotHighlight shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotHighlight is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4510"/>
			<description>Entry C in AnnotHighlight shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotHighlight is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4511"/>
			<description>Entry CA in AnnotHighlight shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotHighlight is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="14" testNumber="4512"/>
			<description>Entry CA with type Number in AnnotHighlight shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotHighlight does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4513"/>
			<description>Entry Contents in AnnotHighlight shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotHighlight is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4514"/>
			<description>Entry CreationDate in AnnotHighlight shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotHighlight is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4515"/>
			<description>Entry F in AnnotHighlight shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotHighlight is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="9" testNumber="4516"/>
			<description>Entry F with type Bitmask in AnnotHighlight shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotHighlight does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4517"/>
			<description>Entry IRT with type Dictionary in AnnotHighlight shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotHighlight is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4518"/>
			<description>Entry IRT in AnnotHighlight shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotHighlight is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="11" testNumber="4519"/>
			<description>Entry IRT in AnnotHighlight is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotHighlight is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4520"/>
			<description>Entry M in AnnotHighlight shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotHighlight is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4521"/>
			<description>Entry NM in AnnotHighlight shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotHighlight is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4522"/>
			<description>Entry OC with type Dictionary in AnnotHighlight shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotHighlight is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4523"/>
			<description>Entry OC in AnnotHighlight shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotHighlight is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4524"/>
			<description>Entry P with type Dictionary in AnnotHighlight shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotHighlight is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4525"/>
			<description>Entry P in AnnotHighlight shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotHighlight is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="10" testNumber="4526"/>
			<description>Entry P with type Dictionary in AnnotHighlight shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotHighlight is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4527"/>
			<description>Entry Popup with type Dictionary in AnnotHighlight shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotHighlight is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4528"/>
			<description>Entry Popup in AnnotHighlight shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotHighlight is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="10" testNumber="4529"/>
			<description>Entry Popup with type Dictionary in AnnotHighlight shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotHighlight is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4530"/>
			<description>Entry QuadPoints with type Array in AnnotHighlight shall be object ArrayOfQuadPoints</description>
			<test>QuadPointsHasTypeArray != true || QuadPoints_size == 1</test>
			<error>
				<message>Entry QuadPoints with type Array in AnnotHighlight is not object ArrayOfQuadPoints</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4531"/>
			<description>Entry QuadPoints in AnnotHighlight shall have type Array</description>
			<test>containsQuadPoints == false || QuadPointsHasTypeArray == true</test>
			<error>
				<message>Entry QuadPoints in AnnotHighlight is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="7" testNumber="4532"/>
			<description>Entry QuadPoints in AnnotHighlight is required</description>
			<test>containsQuadPoints == true</test>
			<error>
				<message>Entry QuadPoints in AnnotHighlight is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4533"/>
			<description>Entry RC with type Stream in AnnotHighlight shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotHighlight is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4534"/>
			<description>Entry RC in AnnotHighlight shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotHighlight is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="10" testNumber="4535"/>
			<description>Entry RC with type Stream in AnnotHighlight shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotHighlight is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4536"/>
			<description>Entry Rect in AnnotHighlight shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotHighlight is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="7" testNumber="4537"/>
			<description>Entry Rect in AnnotHighlight is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotHighlight is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4538"/>
			<description>Entry StructParent in AnnotHighlight shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotHighlight is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4539"/>
			<description>Entry Subj in AnnotHighlight shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotHighlight is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4540"/>
			<description>Entry Subtype in AnnotHighlight shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotHighlight is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="7" testNumber="4541"/>
			<description>Entry Subtype in AnnotHighlight is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotHighlight is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="6" testNumber="4542"/>
			<description>Entry Subtype with type Name in AnnotHighlight shall have value Highlight</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Highlight"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotHighlight has incorrect value %2 instead of Highlight</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4543"/>
			<description>Entry T in AnnotHighlight shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotHighlight is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4544"/>
			<description>Entry Type in AnnotHighlight shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotHighlight is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_5" clause="6" testNumber="4545"/>
			<description>Entry Type with type Name in AnnotHighlight shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotHighlight has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="1" testNumber="4774"/>
			<description>AnnotInk shall not contain entries except AP, AS, BS, Border, C, CA, Contents, CreationDate, F, IRT, InkList, M, NM, OC, P, Popup, RC, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'InkList' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotInk contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'InkList' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4775"/>
			<description>Entry AP with type Dictionary in AnnotInk shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotInk is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4776"/>
			<description>Entry AP in AnnotInk shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotInk is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="11" testNumber="4777"/>
			<description>Entry AP in AnnotInk is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotInk is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4778"/>
			<description>Entry AS in AnnotInk shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotInk is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="11" testNumber="4779"/>
			<description>Entry AS in AnnotInk is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotInk is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4780"/>
			<description>Entry BS with type Dictionary in AnnotInk shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotInk is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4781"/>
			<description>Entry BS in AnnotInk shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotInk is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4782"/>
			<description>Entry Border with type Array in AnnotInk shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotInk is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4783"/>
			<description>Entry Border in AnnotInk shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotInk is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4784"/>
			<description>Entry C with type Array in AnnotInk shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotInk is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4785"/>
			<description>Entry C in AnnotInk shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotInk is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4786"/>
			<description>Entry CA in AnnotInk shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotInk is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="14" testNumber="4787"/>
			<description>Entry CA with type Number in AnnotInk shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotInk does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4788"/>
			<description>Entry Contents in AnnotInk shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotInk is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4789"/>
			<description>Entry CreationDate in AnnotInk shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotInk is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4790"/>
			<description>Entry F in AnnotInk shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotInk is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="9" testNumber="4791"/>
			<description>Entry F with type Bitmask in AnnotInk shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotInk does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4792"/>
			<description>Entry IRT with type Dictionary in AnnotInk shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotInk is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4793"/>
			<description>Entry IRT in AnnotInk shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotInk is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="11" testNumber="4794"/>
			<description>Entry IRT in AnnotInk is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotInk is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4795"/>
			<description>Entry InkList with type Array in AnnotInk shall be object ArrayOfArraysInkList</description>
			<test>InkListHasTypeArray != true || InkList_size == 1</test>
			<error>
				<message>Entry InkList with type Array in AnnotInk is not object ArrayOfArraysInkList</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4796"/>
			<description>Entry InkList in AnnotInk shall have type Array</description>
			<test>containsInkList == false || InkListHasTypeArray == true</test>
			<error>
				<message>Entry InkList in AnnotInk is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="7" testNumber="4797"/>
			<description>Entry InkList in AnnotInk is required</description>
			<test>containsInkList == true</test>
			<error>
				<message>Entry InkList in AnnotInk is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4798"/>
			<description>Entry M in AnnotInk shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotInk is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4799"/>
			<description>Entry NM in AnnotInk shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotInk is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4800"/>
			<description>Entry OC with type Dictionary in AnnotInk shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotInk is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4801"/>
			<description>Entry OC in AnnotInk shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotInk is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4802"/>
			<description>Entry P with type Dictionary in AnnotInk shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotInk is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4803"/>
			<description>Entry P in AnnotInk shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotInk is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="10" testNumber="4804"/>
			<description>Entry P with type Dictionary in AnnotInk shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotInk is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4805"/>
			<description>Entry Popup with type Dictionary in AnnotInk shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotInk is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4806"/>
			<description>Entry Popup in AnnotInk shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotInk is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="10" testNumber="4807"/>
			<description>Entry Popup with type Dictionary in AnnotInk shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotInk is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="17" testNumber="4808"/>
			<description>Entry RC with type Stream in AnnotInk shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotInk is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4809"/>
			<description>Entry RC in AnnotInk shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotInk is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="10" testNumber="4810"/>
			<description>Entry RC with type Stream in AnnotInk shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotInk is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4811"/>
			<description>Entry Rect in AnnotInk shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotInk is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="7" testNumber="4812"/>
			<description>Entry Rect in AnnotInk is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotInk is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4813"/>
			<description>Entry StructParent in AnnotInk shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotInk is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4814"/>
			<description>Entry Subj in AnnotInk shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotInk is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4815"/>
			<description>Entry Subtype in AnnotInk shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotInk is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="7" testNumber="4816"/>
			<description>Entry Subtype in AnnotInk is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotInk is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="6" testNumber="4817"/>
			<description>Entry Subtype with type Name in AnnotInk shall have value Ink</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Ink"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotInk has incorrect value %2 instead of Ink</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4818"/>
			<description>Entry T in AnnotInk shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotInk is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="8" testNumber="4819"/>
			<description>Entry Type in AnnotInk shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotInk is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_5" clause="6" testNumber="4820"/>
			<description>Entry Type with type Name in AnnotInk shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotInk has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="1" testNumber="5061"/>
			<description>AnnotLine shall not contain entries except AP, AS, BS, Border, C, CA, Contents, CreationDate, F, IC, IRT, L, LE, M, NM, OC, P, Popup, RC, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'L' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotLine contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'L' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5062"/>
			<description>Entry AP with type Dictionary in AnnotLine shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotLine is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5063"/>
			<description>Entry AP in AnnotLine shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="11" testNumber="5064"/>
			<description>Entry AP in AnnotLine is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5065"/>
			<description>Entry AS in AnnotLine shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="11" testNumber="5066"/>
			<description>Entry AS in AnnotLine is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5067"/>
			<description>Entry BS with type Dictionary in AnnotLine shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotLine is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5068"/>
			<description>Entry BS in AnnotLine shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5069"/>
			<description>Entry Border with type Array in AnnotLine shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotLine is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5070"/>
			<description>Entry Border in AnnotLine shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5071"/>
			<description>Entry C with type Array in AnnotLine shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotLine is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5072"/>
			<description>Entry C in AnnotLine shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5073"/>
			<description>Entry CA in AnnotLine shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotLine is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="14" testNumber="5074"/>
			<description>Entry CA with type Number in AnnotLine shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotLine does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5075"/>
			<description>Entry Contents in AnnotLine shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotLine is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5076"/>
			<description>Entry CreationDate in AnnotLine shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotLine is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5077"/>
			<description>Entry F in AnnotLine shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotLine is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="9" testNumber="5078"/>
			<description>Entry F with type Bitmask in AnnotLine shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotLine does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5079"/>
			<description>Entry IC with type Array in AnnotLine shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>ICHasTypeArray != true || IC_size == 1</test>
			<error>
				<message>Entry IC with type Array in AnnotLine is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5080"/>
			<description>Entry IC in AnnotLine shall have type Array</description>
			<test>containsIC == false || ICHasTypeArray == true</test>
			<error>
				<message>Entry IC in AnnotLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5081"/>
			<description>Entry IRT with type Dictionary in AnnotLine shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotLine is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5082"/>
			<description>Entry IRT in AnnotLine shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="11" testNumber="5083"/>
			<description>Entry IRT in AnnotLine is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5084"/>
			<description>Entry L with type Array in AnnotLine shall be object ArrayOf_4Numbers</description>
			<test>LHasTypeArray != true || L_size == 1</test>
			<error>
				<message>Entry L with type Array in AnnotLine is not object ArrayOf_4Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5085"/>
			<description>Entry L in AnnotLine shall have type Array</description>
			<test>containsL == false || LHasTypeArray == true</test>
			<error>
				<message>Entry L in AnnotLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="7" testNumber="5086"/>
			<description>Entry L in AnnotLine is required</description>
			<test>containsL == true</test>
			<error>
				<message>Entry L in AnnotLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5087"/>
			<description>Entry LE with type Array in AnnotLine shall be object ArrayOf_2LineEndingsNames</description>
			<test>LEHasTypeArray != true || LE_size == 1</test>
			<error>
				<message>Entry LE with type Array in AnnotLine is not object ArrayOf_2LineEndingsNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5088"/>
			<description>Entry LE in AnnotLine shall have type Array</description>
			<test>containsLE == false || LEHasTypeArray == true</test>
			<error>
				<message>Entry LE in AnnotLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5089"/>
			<description>Entry M in AnnotLine shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotLine is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5090"/>
			<description>Entry NM in AnnotLine shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotLine is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5091"/>
			<description>Entry OC with type Dictionary in AnnotLine shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotLine is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5092"/>
			<description>Entry OC in AnnotLine shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5093"/>
			<description>Entry P with type Dictionary in AnnotLine shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotLine is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5094"/>
			<description>Entry P in AnnotLine shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="10" testNumber="5095"/>
			<description>Entry P with type Dictionary in AnnotLine shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotLine is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5096"/>
			<description>Entry Popup with type Dictionary in AnnotLine shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotLine is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5097"/>
			<description>Entry Popup in AnnotLine shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="10" testNumber="5098"/>
			<description>Entry Popup with type Dictionary in AnnotLine shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotLine is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5099"/>
			<description>Entry RC with type Stream in AnnotLine shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotLine is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5100"/>
			<description>Entry RC in AnnotLine shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotLine is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="10" testNumber="5101"/>
			<description>Entry RC with type Stream in AnnotLine shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotLine is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5102"/>
			<description>Entry Rect in AnnotLine shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotLine is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="7" testNumber="5103"/>
			<description>Entry Rect in AnnotLine is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5104"/>
			<description>Entry StructParent in AnnotLine shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotLine is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5105"/>
			<description>Entry Subj in AnnotLine shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotLine is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5106"/>
			<description>Entry Subtype in AnnotLine shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="7" testNumber="5107"/>
			<description>Entry Subtype in AnnotLine is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="6" testNumber="5108"/>
			<description>Entry Subtype with type Name in AnnotLine shall have value Line</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Line"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotLine has incorrect value %2 instead of Line</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5109"/>
			<description>Entry T in AnnotLine shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotLine is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5110"/>
			<description>Entry Type in AnnotLine shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_5" clause="6" testNumber="5111"/>
			<description>Entry Type with type Name in AnnotLine shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotLine has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="1" testNumber="5445"/>
			<description>AnnotLink shall not contain entries except A, AP, AS, Border, C, Contents, Dest, F, H, M, NM, OC, P, PA, Rect, StructParent, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'F' &amp;&amp; elem != 'H' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PA' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotLink contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'F' &amp;&amp; elem != 'H' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PA' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5446"/>
			<description>Entry A with type Dictionary in AnnotLink shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotLink is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5447"/>
			<description>Entry A in AnnotLink shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotLink is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5448"/>
			<description>Entry AP with type Dictionary in AnnotLink shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotLink is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5449"/>
			<description>Entry AP in AnnotLink shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotLink is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5450"/>
			<description>Entry AS in AnnotLink shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotLink is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="11" testNumber="5451"/>
			<description>Entry AS in AnnotLink is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotLink is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5452"/>
			<description>Entry Border with type Array in AnnotLink shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotLink is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5453"/>
			<description>Entry Border in AnnotLink shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotLink is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5454"/>
			<description>Entry C with type Array in AnnotLink shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotLink is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5455"/>
			<description>Entry C in AnnotLink shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotLink is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5456"/>
			<description>Entry Contents in AnnotLink shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotLink is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5457"/>
			<description>Entry Dest with type Array in AnnotLink shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DestHasTypeArray != true || Dest_size == 1</test>
			<error>
				<message>Entry Dest with type Array in AnnotLink is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5458"/>
			<description>Entry Dest in AnnotLink shall have one of types: Array, StringByte, Name</description>
			<test>containsDest == false || DestHasTypeArray == true || DestHasTypeStringByte == true || DestHasTypeName == true</test>
			<error>
				<message>Entry Dest in AnnotLink is not one of types: Array, StringByte, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5459"/>
			<description>Entry F in AnnotLink shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotLink is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="9" testNumber="5460"/>
			<description>Entry F with type Bitmask in AnnotLink shall satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(2.0 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotLink does not satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(2.0 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5461"/>
			<description>Entry H in AnnotLink shall have type Name</description>
			<test>containsH == false || HHasTypeName == true</test>
			<error>
				<message>Entry H in AnnotLink is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="6" testNumber="5462"/>
			<description>Entry H with type Name in AnnotLink shall have one of values: P, I, N, O</description>
			<test>HHasTypeName != true || HNameValue == "N" || HNameValue == "I" || HNameValue == "O" || HNameValue == "P"</test>
			<error>
				<message>Entry H with type Name in AnnotLink has incorrect value %2 instead of P, I, N, O</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5463"/>
			<description>Entry M in AnnotLink shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotLink is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5464"/>
			<description>Entry NM in AnnotLink shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotLink is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5465"/>
			<description>Entry OC with type Dictionary in AnnotLink shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotLink is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5466"/>
			<description>Entry OC in AnnotLink shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotLink is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5467"/>
			<description>Entry P with type Dictionary in AnnotLink shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotLink is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5468"/>
			<description>Entry P in AnnotLink shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotLink is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="10" testNumber="5469"/>
			<description>Entry P with type Dictionary in AnnotLink shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotLink is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5470"/>
			<description>Entry PA with type Dictionary in AnnotLink shall be object ActionURI</description>
			<test>PAHasTypeDictionary != true || PA_size == 1</test>
			<error>
				<message>Entry PA with type Dictionary in AnnotLink is not object ActionURI</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5471"/>
			<description>Entry PA in AnnotLink shall have type Dictionary</description>
			<test>containsPA == false || PAHasTypeDictionary == true</test>
			<error>
				<message>Entry PA in AnnotLink is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5472"/>
			<description>Entry Rect in AnnotLink shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotLink is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="7" testNumber="5473"/>
			<description>Entry Rect in AnnotLink is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotLink is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5474"/>
			<description>Entry StructParent in AnnotLink shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotLink is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5475"/>
			<description>Entry Subtype in AnnotLink shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotLink is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="7" testNumber="5476"/>
			<description>Entry Subtype in AnnotLink is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotLink is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="6" testNumber="5477"/>
			<description>Entry Subtype with type Name in AnnotLink shall have value Link</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Link"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotLink has incorrect value %2 instead of Link</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5478"/>
			<description>Entry Type in AnnotLink shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotLink is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_5" clause="6" testNumber="5479"/>
			<description>Entry Type with type Name in AnnotLink shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotLink has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="1" testNumber="5700"/>
			<description>AnnotMovie shall not contain entries except A, AP, AS, Border, C, Contents, F, M, Movie, NM, OC, P, Rect, StructParent, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Movie' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotMovie contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Movie' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5701"/>
			<description>Entry A with type Dictionary in AnnotMovie shall be object MovieActivation</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotMovie is not object MovieActivation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5702"/>
			<description>Entry A in AnnotMovie shall have one of types: Boolean, Dictionary</description>
			<test>containsA == false || AHasTypeBoolean == true || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotMovie is not one of types: Boolean, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5703"/>
			<description>Entry AP with type Dictionary in AnnotMovie shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotMovie is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5704"/>
			<description>Entry AP in AnnotMovie shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotMovie is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="11" testNumber="5705"/>
			<description>Entry AP in AnnotMovie is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotMovie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5706"/>
			<description>Entry AS in AnnotMovie shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotMovie is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="11" testNumber="5707"/>
			<description>Entry AS in AnnotMovie is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotMovie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5708"/>
			<description>Entry Border with type Array in AnnotMovie shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotMovie is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5709"/>
			<description>Entry Border in AnnotMovie shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotMovie is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5710"/>
			<description>Entry C with type Array in AnnotMovie shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotMovie is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5711"/>
			<description>Entry C in AnnotMovie shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotMovie is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5712"/>
			<description>Entry Contents in AnnotMovie shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotMovie is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5713"/>
			<description>Entry F in AnnotMovie shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotMovie is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="9" testNumber="5714"/>
			<description>Entry F with type Bitmask in AnnotMovie shall satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotMovie does not satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5715"/>
			<description>Entry M in AnnotMovie shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotMovie is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5716"/>
			<description>Entry Movie with type Dictionary in AnnotMovie shall be object Movie</description>
			<test>MovieHasTypeDictionary != true || Movie_size == 1</test>
			<error>
				<message>Entry Movie with type Dictionary in AnnotMovie is not object Movie</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5717"/>
			<description>Entry Movie in AnnotMovie shall have type Dictionary</description>
			<test>containsMovie == false || MovieHasTypeDictionary == true</test>
			<error>
				<message>Entry Movie in AnnotMovie is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="7" testNumber="5718"/>
			<description>Entry Movie in AnnotMovie is required</description>
			<test>containsMovie == true</test>
			<error>
				<message>Entry Movie in AnnotMovie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5719"/>
			<description>Entry NM in AnnotMovie shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotMovie is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5720"/>
			<description>Entry OC with type Dictionary in AnnotMovie shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotMovie is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5721"/>
			<description>Entry OC in AnnotMovie shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotMovie is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5722"/>
			<description>Entry P with type Dictionary in AnnotMovie shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotMovie is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5723"/>
			<description>Entry P in AnnotMovie shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotMovie is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="10" testNumber="5724"/>
			<description>Entry P with type Dictionary in AnnotMovie shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotMovie is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5725"/>
			<description>Entry Rect in AnnotMovie shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotMovie is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="7" testNumber="5726"/>
			<description>Entry Rect in AnnotMovie is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotMovie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5727"/>
			<description>Entry StructParent in AnnotMovie shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotMovie is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5728"/>
			<description>Entry Subtype in AnnotMovie shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotMovie is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="7" testNumber="5729"/>
			<description>Entry Subtype in AnnotMovie is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotMovie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="6" testNumber="5730"/>
			<description>Entry Subtype with type Name in AnnotMovie shall have value Movie</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Movie"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotMovie has incorrect value %2 instead of Movie</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5731"/>
			<description>Entry T in AnnotMovie shall have type String</description>
			<test>containsT == false || THasTypeString == true</test>
			<error>
				<message>Entry T in AnnotMovie is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5732"/>
			<description>Entry Type in AnnotMovie shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotMovie is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_5" clause="6" testNumber="5733"/>
			<description>Entry Type with type Name in AnnotMovie shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotMovie has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="1" testNumber="5847"/>
			<description>AnnotPolyLine shall not contain entries except AP, AS, BE, BS, Border, C, CA, Contents, CreationDate, F, IC, IRT, LE, M, NM, OC, P, Popup, RC, Rect, StructParent, Subj, Subtype, T, Type, Vertices</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Vertices').length == 0</test>
			<error>
				<message>AnnotPolyLine contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Vertices').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5848"/>
			<description>Entry AP with type Dictionary in AnnotPolyLine shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotPolyLine is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5849"/>
			<description>Entry AP in AnnotPolyLine shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotPolyLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="11" testNumber="5850"/>
			<description>Entry AP in AnnotPolyLine is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotPolyLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5851"/>
			<description>Entry AS in AnnotPolyLine shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotPolyLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="11" testNumber="5852"/>
			<description>Entry AS in AnnotPolyLine is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotPolyLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5853"/>
			<description>Entry BE with type Dictionary in AnnotPolyLine shall be object BorderEffect</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in AnnotPolyLine is not object BorderEffect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5854"/>
			<description>Entry BE in AnnotPolyLine shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in AnnotPolyLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5855"/>
			<description>Entry BS with type Dictionary in AnnotPolyLine shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotPolyLine is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5856"/>
			<description>Entry BS in AnnotPolyLine shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotPolyLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5857"/>
			<description>Entry Border with type Array in AnnotPolyLine shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotPolyLine is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5858"/>
			<description>Entry Border in AnnotPolyLine shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotPolyLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5859"/>
			<description>Entry C with type Array in AnnotPolyLine shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotPolyLine is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5860"/>
			<description>Entry C in AnnotPolyLine shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotPolyLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5861"/>
			<description>Entry CA in AnnotPolyLine shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotPolyLine is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="14" testNumber="5862"/>
			<description>Entry CA with type Number in AnnotPolyLine shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotPolyLine does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5863"/>
			<description>Entry Contents in AnnotPolyLine shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotPolyLine is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5864"/>
			<description>Entry CreationDate in AnnotPolyLine shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotPolyLine is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5865"/>
			<description>Entry F in AnnotPolyLine shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotPolyLine is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="9" testNumber="5866"/>
			<description>Entry F with type Bitmask in AnnotPolyLine shall satisfy special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotPolyLine does not satisfy special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5867"/>
			<description>Entry IC with type Array in AnnotPolyLine shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>ICHasTypeArray != true || IC_size == 1</test>
			<error>
				<message>Entry IC with type Array in AnnotPolyLine is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5868"/>
			<description>Entry IC in AnnotPolyLine shall have type Array</description>
			<test>containsIC == false || ICHasTypeArray == true</test>
			<error>
				<message>Entry IC in AnnotPolyLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5869"/>
			<description>Entry IRT with type Dictionary in AnnotPolyLine shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotPolyLine is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5870"/>
			<description>Entry IRT in AnnotPolyLine shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotPolyLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="11" testNumber="5871"/>
			<description>Entry IRT in AnnotPolyLine is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotPolyLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5872"/>
			<description>Entry LE with type Array in AnnotPolyLine shall be object ArrayOf_2LineEndingsNames</description>
			<test>LEHasTypeArray != true || LE_size == 1</test>
			<error>
				<message>Entry LE with type Array in AnnotPolyLine is not object ArrayOf_2LineEndingsNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5873"/>
			<description>Entry LE in AnnotPolyLine shall have type Array</description>
			<test>containsLE == false || LEHasTypeArray == true</test>
			<error>
				<message>Entry LE in AnnotPolyLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5874"/>
			<description>Entry M in AnnotPolyLine shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotPolyLine is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5875"/>
			<description>Entry NM in AnnotPolyLine shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotPolyLine is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5876"/>
			<description>Entry OC with type Dictionary in AnnotPolyLine shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotPolyLine is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5877"/>
			<description>Entry OC in AnnotPolyLine shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotPolyLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5878"/>
			<description>Entry P with type Dictionary in AnnotPolyLine shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPolyLine is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5879"/>
			<description>Entry P in AnnotPolyLine shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotPolyLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="10" testNumber="5880"/>
			<description>Entry P with type Dictionary in AnnotPolyLine shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPolyLine is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5881"/>
			<description>Entry Popup with type Dictionary in AnnotPolyLine shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotPolyLine is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5882"/>
			<description>Entry Popup in AnnotPolyLine shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotPolyLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="10" testNumber="5883"/>
			<description>Entry Popup with type Dictionary in AnnotPolyLine shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotPolyLine is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5884"/>
			<description>Entry RC with type Stream in AnnotPolyLine shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotPolyLine is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5885"/>
			<description>Entry RC in AnnotPolyLine shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotPolyLine is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="10" testNumber="5886"/>
			<description>Entry RC with type Stream in AnnotPolyLine shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotPolyLine is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5887"/>
			<description>Entry Rect in AnnotPolyLine shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotPolyLine is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="7" testNumber="5888"/>
			<description>Entry Rect in AnnotPolyLine is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotPolyLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5889"/>
			<description>Entry StructParent in AnnotPolyLine shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotPolyLine is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5890"/>
			<description>Entry Subj in AnnotPolyLine shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotPolyLine is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5891"/>
			<description>Entry Subtype in AnnotPolyLine shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotPolyLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="7" testNumber="5892"/>
			<description>Entry Subtype in AnnotPolyLine is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotPolyLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="6" testNumber="5893"/>
			<description>Entry Subtype with type Name in AnnotPolyLine shall have value PolyLine</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "PolyLine"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotPolyLine has incorrect value %2 instead of PolyLine</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5894"/>
			<description>Entry T in AnnotPolyLine shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotPolyLine is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5895"/>
			<description>Entry Type in AnnotPolyLine shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotPolyLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="6" testNumber="5896"/>
			<description>Entry Type with type Name in AnnotPolyLine shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotPolyLine has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="17" testNumber="5897"/>
			<description>Entry Vertices with type Array in AnnotPolyLine shall be object ArrayOfNumbersGeneral</description>
			<test>VerticesHasTypeArray != true || Vertices_size == 1</test>
			<error>
				<message>Entry Vertices with type Array in AnnotPolyLine is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="8" testNumber="5898"/>
			<description>Entry Vertices in AnnotPolyLine shall have type Array</description>
			<test>containsVertices == false || VerticesHasTypeArray == true</test>
			<error>
				<message>Entry Vertices in AnnotPolyLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_5" clause="11" testNumber="5899"/>
			<description>Entry Vertices in AnnotPolyLine is required, when fn:IsRequired(fn:Not(fn:IsPresent(Path)))</description>
			<test>(containsVertices == true || (((containsPath == true)) != true) == false)</test>
			<error>
				<message>Entry Vertices in AnnotPolyLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="1" testNumber="6091"/>
			<description>AnnotPolygon shall not contain entries except AP, AS, BE, BS, Border, C, CA, Contents, CreationDate, F, IC, IRT, LE, M, NM, OC, P, Popup, RC, Rect, StructParent, Subj, Subtype, T, Type, Vertices</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Vertices').length == 0</test>
			<error>
				<message>AnnotPolygon contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Vertices').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6092"/>
			<description>Entry AP with type Dictionary in AnnotPolygon shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotPolygon is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6093"/>
			<description>Entry AP in AnnotPolygon shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotPolygon is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="11" testNumber="6094"/>
			<description>Entry AP in AnnotPolygon is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotPolygon is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6095"/>
			<description>Entry AS in AnnotPolygon shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotPolygon is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="11" testNumber="6096"/>
			<description>Entry AS in AnnotPolygon is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotPolygon is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6097"/>
			<description>Entry BE with type Dictionary in AnnotPolygon shall be object BorderEffect</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in AnnotPolygon is not object BorderEffect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6098"/>
			<description>Entry BE in AnnotPolygon shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in AnnotPolygon is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6099"/>
			<description>Entry BS with type Dictionary in AnnotPolygon shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotPolygon is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6100"/>
			<description>Entry BS in AnnotPolygon shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotPolygon is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6101"/>
			<description>Entry Border with type Array in AnnotPolygon shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotPolygon is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6102"/>
			<description>Entry Border in AnnotPolygon shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotPolygon is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6103"/>
			<description>Entry C with type Array in AnnotPolygon shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotPolygon is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6104"/>
			<description>Entry C in AnnotPolygon shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotPolygon is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6105"/>
			<description>Entry CA in AnnotPolygon shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotPolygon is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="14" testNumber="6106"/>
			<description>Entry CA with type Number in AnnotPolygon shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotPolygon does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6107"/>
			<description>Entry Contents in AnnotPolygon shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotPolygon is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6108"/>
			<description>Entry CreationDate in AnnotPolygon shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotPolygon is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6109"/>
			<description>Entry F in AnnotPolygon shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotPolygon is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="9" testNumber="6110"/>
			<description>Entry F with type Bitmask in AnnotPolygon shall satisfy special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotPolygon does not satisfy special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6111"/>
			<description>Entry IC with type Array in AnnotPolygon shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>ICHasTypeArray != true || IC_size == 1</test>
			<error>
				<message>Entry IC with type Array in AnnotPolygon is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6112"/>
			<description>Entry IC in AnnotPolygon shall have type Array</description>
			<test>containsIC == false || ICHasTypeArray == true</test>
			<error>
				<message>Entry IC in AnnotPolygon is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6113"/>
			<description>Entry IRT with type Dictionary in AnnotPolygon shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotPolygon is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6114"/>
			<description>Entry IRT in AnnotPolygon shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotPolygon is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="11" testNumber="6115"/>
			<description>Entry IRT in AnnotPolygon is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotPolygon is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6116"/>
			<description>Entry LE with type Array in AnnotPolygon shall be object ArrayOf_2LineEndingsNames</description>
			<test>LEHasTypeArray != true || LE_size == 1</test>
			<error>
				<message>Entry LE with type Array in AnnotPolygon is not object ArrayOf_2LineEndingsNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6117"/>
			<description>Entry LE in AnnotPolygon shall have type Array</description>
			<test>containsLE == false || LEHasTypeArray == true</test>
			<error>
				<message>Entry LE in AnnotPolygon is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6118"/>
			<description>Entry M in AnnotPolygon shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotPolygon is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6119"/>
			<description>Entry NM in AnnotPolygon shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotPolygon is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6120"/>
			<description>Entry OC with type Dictionary in AnnotPolygon shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotPolygon is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6121"/>
			<description>Entry OC in AnnotPolygon shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotPolygon is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6122"/>
			<description>Entry P with type Dictionary in AnnotPolygon shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPolygon is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6123"/>
			<description>Entry P in AnnotPolygon shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotPolygon is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="10" testNumber="6124"/>
			<description>Entry P with type Dictionary in AnnotPolygon shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPolygon is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6125"/>
			<description>Entry Popup with type Dictionary in AnnotPolygon shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotPolygon is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6126"/>
			<description>Entry Popup in AnnotPolygon shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotPolygon is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="10" testNumber="6127"/>
			<description>Entry Popup with type Dictionary in AnnotPolygon shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotPolygon is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6128"/>
			<description>Entry RC with type Stream in AnnotPolygon shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotPolygon is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6129"/>
			<description>Entry RC in AnnotPolygon shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotPolygon is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="10" testNumber="6130"/>
			<description>Entry RC with type Stream in AnnotPolygon shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotPolygon is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6131"/>
			<description>Entry Rect in AnnotPolygon shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotPolygon is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="7" testNumber="6132"/>
			<description>Entry Rect in AnnotPolygon is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotPolygon is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6133"/>
			<description>Entry StructParent in AnnotPolygon shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotPolygon is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6134"/>
			<description>Entry Subj in AnnotPolygon shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotPolygon is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6135"/>
			<description>Entry Subtype in AnnotPolygon shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotPolygon is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="7" testNumber="6136"/>
			<description>Entry Subtype in AnnotPolygon is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotPolygon is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="6" testNumber="6137"/>
			<description>Entry Subtype with type Name in AnnotPolygon shall have value Polygon</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Polygon"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotPolygon has incorrect value %2 instead of Polygon</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6138"/>
			<description>Entry T in AnnotPolygon shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotPolygon is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6139"/>
			<description>Entry Type in AnnotPolygon shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotPolygon is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="6" testNumber="6140"/>
			<description>Entry Type with type Name in AnnotPolygon shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotPolygon has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6141"/>
			<description>Entry Vertices with type Array in AnnotPolygon shall be object ArrayOfNumbersGeneral</description>
			<test>VerticesHasTypeArray != true || Vertices_size == 1</test>
			<error>
				<message>Entry Vertices with type Array in AnnotPolygon is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6142"/>
			<description>Entry Vertices in AnnotPolygon shall have type Array</description>
			<test>containsVertices == false || VerticesHasTypeArray == true</test>
			<error>
				<message>Entry Vertices in AnnotPolygon is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_5" clause="11" testNumber="6143"/>
			<description>Entry Vertices in AnnotPolygon is required, when fn:IsRequired(fn:Not(fn:IsPresent(Path)))</description>
			<test>(containsVertices == true || (((containsPath == true)) != true) == false)</test>
			<error>
				<message>Entry Vertices in AnnotPolygon is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="1" testNumber="6390"/>
			<description>AnnotPopup shall not contain entries except AP, AS, Border, C, Contents, F, M, NM, OC, Open, P, Parent, Rect, StructParent, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotPopup contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6391"/>
			<description>Entry AP with type Dictionary in AnnotPopup shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotPopup is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6392"/>
			<description>Entry AP in AnnotPopup shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotPopup is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6393"/>
			<description>Entry AS in AnnotPopup shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotPopup is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="11" testNumber="6394"/>
			<description>Entry AS in AnnotPopup is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotPopup is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6395"/>
			<description>Entry Border with type Array in AnnotPopup shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotPopup is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6396"/>
			<description>Entry Border in AnnotPopup shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotPopup is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6397"/>
			<description>Entry C with type Array in AnnotPopup shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotPopup is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6398"/>
			<description>Entry C in AnnotPopup shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotPopup is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6399"/>
			<description>Entry Contents in AnnotPopup shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotPopup is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6400"/>
			<description>Entry F in AnnotPopup shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotPopup is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="9" testNumber="6401"/>
			<description>Entry F with type Bitmask in AnnotPopup shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotPopup does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6402"/>
			<description>Entry M in AnnotPopup shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotPopup is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6403"/>
			<description>Entry NM in AnnotPopup shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotPopup is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6404"/>
			<description>Entry OC with type Dictionary in AnnotPopup shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotPopup is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6405"/>
			<description>Entry OC in AnnotPopup shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotPopup is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6406"/>
			<description>Entry Open in AnnotPopup shall have type Boolean</description>
			<test>containsOpen == false || OpenHasTypeBoolean == true</test>
			<error>
				<message>Entry Open in AnnotPopup is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6407"/>
			<description>Entry P with type Dictionary in AnnotPopup shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPopup is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6408"/>
			<description>Entry P in AnnotPopup shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotPopup is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="10" testNumber="6409"/>
			<description>Entry P with type Dictionary in AnnotPopup shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPopup is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6410"/>
			<description>Entry Parent with type Dictionary in AnnotPopup shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in AnnotPopup is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6411"/>
			<description>Entry Parent in AnnotPopup shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in AnnotPopup is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6412"/>
			<description>Entry Rect in AnnotPopup shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotPopup is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="7" testNumber="6413"/>
			<description>Entry Rect in AnnotPopup is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotPopup is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6414"/>
			<description>Entry StructParent in AnnotPopup shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotPopup is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6415"/>
			<description>Entry Subtype in AnnotPopup shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotPopup is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="7" testNumber="6416"/>
			<description>Entry Subtype in AnnotPopup is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotPopup is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="6" testNumber="6417"/>
			<description>Entry Subtype with type Name in AnnotPopup shall have value Popup</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Popup"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotPopup has incorrect value %2 instead of Popup</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6418"/>
			<description>Entry Type in AnnotPopup shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotPopup is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_5" clause="6" testNumber="6419"/>
			<description>Entry Type with type Name in AnnotPopup shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotPopup has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="1" testNumber="6549"/>
			<description>AnnotPrinterMark shall not contain entries except AP, AS, Border, C, Contents, F, M, MN, NM, OC, P, Rect, StructParent, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MN' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotPrinterMark contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MN' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6550"/>
			<description>Entry AP with type Dictionary in AnnotPrinterMark shall be object AppearancePrinterMark</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotPrinterMark is not object AppearancePrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6551"/>
			<description>Entry AP in AnnotPrinterMark shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="11" testNumber="6552"/>
			<description>Entry AP in AnnotPrinterMark is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotPrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6553"/>
			<description>Entry AS in AnnotPrinterMark shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotPrinterMark is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="11" testNumber="6554"/>
			<description>Entry AS in AnnotPrinterMark is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotPrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6555"/>
			<description>Entry Border with type Array in AnnotPrinterMark shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotPrinterMark is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6556"/>
			<description>Entry Border in AnnotPrinterMark shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotPrinterMark is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6557"/>
			<description>Entry C with type Array in AnnotPrinterMark shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotPrinterMark is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6558"/>
			<description>Entry C in AnnotPrinterMark shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotPrinterMark is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6559"/>
			<description>Entry Contents in AnnotPrinterMark shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotPrinterMark is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6560"/>
			<description>Entry F in AnnotPrinterMark shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotPrinterMark is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="7" testNumber="6561"/>
			<description>Entry F in AnnotPrinterMark is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in AnnotPrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="9" testNumber="6562"/>
			<description>Entry F with type Bitmask in AnnotPrinterMark shall satisfy special case: fn:Eval(fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotPrinterMark does not satisfy special case: fn:Eval(fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6563"/>
			<description>Entry M in AnnotPrinterMark shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotPrinterMark is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6564"/>
			<description>Entry MN in AnnotPrinterMark shall have type Name</description>
			<test>containsMN == false || MNHasTypeName == true</test>
			<error>
				<message>Entry MN in AnnotPrinterMark is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6565"/>
			<description>Entry NM in AnnotPrinterMark shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotPrinterMark is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6566"/>
			<description>Entry OC with type Dictionary in AnnotPrinterMark shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotPrinterMark is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6567"/>
			<description>Entry OC in AnnotPrinterMark shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6568"/>
			<description>Entry P with type Dictionary in AnnotPrinterMark shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPrinterMark is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6569"/>
			<description>Entry P in AnnotPrinterMark shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="10" testNumber="6570"/>
			<description>Entry P with type Dictionary in AnnotPrinterMark shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPrinterMark is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6571"/>
			<description>Entry Rect in AnnotPrinterMark shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotPrinterMark is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="7" testNumber="6572"/>
			<description>Entry Rect in AnnotPrinterMark is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotPrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6573"/>
			<description>Entry StructParent in AnnotPrinterMark shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotPrinterMark is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6574"/>
			<description>Entry Subtype in AnnotPrinterMark shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotPrinterMark is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="7" testNumber="6575"/>
			<description>Entry Subtype in AnnotPrinterMark is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotPrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="6" testNumber="6576"/>
			<description>Entry Subtype with type Name in AnnotPrinterMark shall have value PrinterMark</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "PrinterMark"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotPrinterMark has incorrect value %2 instead of PrinterMark</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6577"/>
			<description>Entry Type in AnnotPrinterMark shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotPrinterMark is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_5" clause="6" testNumber="6578"/>
			<description>Entry Type with type Name in AnnotPrinterMark shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotPrinterMark has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="1" testNumber="6985"/>
			<description>AnnotScreen shall not contain entries except A, AA, AP, AS, Border, C, Contents, F, M, MK, NM, OC, P, Rect, StructParent, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotScreen contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6986"/>
			<description>Entry A with type Dictionary in AnnotScreen shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotScreen is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6987"/>
			<description>Entry A in AnnotScreen shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotScreen is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6988"/>
			<description>Entry AA with type Dictionary in AnnotScreen shall be object AddActionScreenAnnotation</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in AnnotScreen is not object AddActionScreenAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6989"/>
			<description>Entry AA in AnnotScreen shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in AnnotScreen is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6990"/>
			<description>Entry AP with type Dictionary in AnnotScreen shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotScreen is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6991"/>
			<description>Entry AP in AnnotScreen shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotScreen is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="11" testNumber="6992"/>
			<description>Entry AP in AnnotScreen is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotScreen is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6993"/>
			<description>Entry AS in AnnotScreen shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotScreen is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="11" testNumber="6994"/>
			<description>Entry AS in AnnotScreen is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotScreen is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6995"/>
			<description>Entry Border with type Array in AnnotScreen shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotScreen is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6996"/>
			<description>Entry Border in AnnotScreen shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotScreen is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="17" testNumber="6997"/>
			<description>Entry C with type Array in AnnotScreen shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotScreen is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6998"/>
			<description>Entry C in AnnotScreen shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotScreen is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="8" testNumber="6999"/>
			<description>Entry Contents in AnnotScreen shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotScreen is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7000"/>
			<description>Entry F in AnnotScreen shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotScreen is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="9" testNumber="7001"/>
			<description>Entry F with type Bitmask in AnnotScreen shall satisfy special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotScreen does not satisfy special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7002"/>
			<description>Entry M in AnnotScreen shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotScreen is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7003"/>
			<description>Entry MK with type Dictionary in AnnotScreen shall be object AppearanceCharacteristics</description>
			<test>MKHasTypeDictionary != true || MK_size == 1</test>
			<error>
				<message>Entry MK with type Dictionary in AnnotScreen is not object AppearanceCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7004"/>
			<description>Entry MK in AnnotScreen shall have type Dictionary</description>
			<test>containsMK == false || MKHasTypeDictionary == true</test>
			<error>
				<message>Entry MK in AnnotScreen is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7005"/>
			<description>Entry NM in AnnotScreen shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotScreen is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7006"/>
			<description>Entry OC with type Dictionary in AnnotScreen shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotScreen is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7007"/>
			<description>Entry OC in AnnotScreen shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotScreen is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7008"/>
			<description>Entry P with type Dictionary in AnnotScreen shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotScreen is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7009"/>
			<description>Entry P in AnnotScreen shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotScreen is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="10" testNumber="7010"/>
			<description>Entry P with type Dictionary in AnnotScreen shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotScreen is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7011"/>
			<description>Entry Rect in AnnotScreen shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotScreen is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="7" testNumber="7012"/>
			<description>Entry Rect in AnnotScreen is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotScreen is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7013"/>
			<description>Entry StructParent in AnnotScreen shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotScreen is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7014"/>
			<description>Entry Subtype in AnnotScreen shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotScreen is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="7" testNumber="7015"/>
			<description>Entry Subtype in AnnotScreen is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotScreen is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="6" testNumber="7016"/>
			<description>Entry Subtype with type Name in AnnotScreen shall have value Screen</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Screen"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotScreen has incorrect value %2 instead of Screen</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7017"/>
			<description>Entry T in AnnotScreen shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotScreen is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7018"/>
			<description>Entry Type in AnnotScreen shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotScreen is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_5" clause="6" testNumber="7019"/>
			<description>Entry Type with type Name in AnnotScreen shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotScreen has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="1" testNumber="7234"/>
			<description>AnnotSound shall not contain entries except AP, AS, Border, C, CA, Contents, CreationDate, F, IRT, M, NM, Name, OC, P, Popup, RC, Rect, Sound, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'Sound' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotSound contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'Sound' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7235"/>
			<description>Entry AP with type Dictionary in AnnotSound shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotSound is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7236"/>
			<description>Entry AP in AnnotSound shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotSound is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="11" testNumber="7237"/>
			<description>Entry AP in AnnotSound is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7238"/>
			<description>Entry AS in AnnotSound shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="11" testNumber="7239"/>
			<description>Entry AS in AnnotSound is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7240"/>
			<description>Entry Border with type Array in AnnotSound shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotSound is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7241"/>
			<description>Entry Border in AnnotSound shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotSound is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7242"/>
			<description>Entry C with type Array in AnnotSound shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotSound is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7243"/>
			<description>Entry C in AnnotSound shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotSound is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7244"/>
			<description>Entry CA in AnnotSound shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotSound is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="14" testNumber="7245"/>
			<description>Entry CA with type Number in AnnotSound shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotSound does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7246"/>
			<description>Entry Contents in AnnotSound shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotSound is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7247"/>
			<description>Entry CreationDate in AnnotSound shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotSound is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7248"/>
			<description>Entry F in AnnotSound shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotSound is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="9" testNumber="7249"/>
			<description>Entry F with type Bitmask in AnnotSound shall satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotSound does not satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7250"/>
			<description>Entry IRT with type Dictionary in AnnotSound shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotSound is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7251"/>
			<description>Entry IRT in AnnotSound shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotSound is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="11" testNumber="7252"/>
			<description>Entry IRT in AnnotSound is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7253"/>
			<description>Entry M in AnnotSound shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotSound is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7254"/>
			<description>Entry NM in AnnotSound shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotSound is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7255"/>
			<description>Entry Name in AnnotSound shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in AnnotSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7256"/>
			<description>Entry OC with type Dictionary in AnnotSound shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotSound is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7257"/>
			<description>Entry OC in AnnotSound shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotSound is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7258"/>
			<description>Entry P with type Dictionary in AnnotSound shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotSound is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7259"/>
			<description>Entry P in AnnotSound shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotSound is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="10" testNumber="7260"/>
			<description>Entry P with type Dictionary in AnnotSound shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotSound is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7261"/>
			<description>Entry Popup with type Dictionary in AnnotSound shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotSound is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7262"/>
			<description>Entry Popup in AnnotSound shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotSound is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="10" testNumber="7263"/>
			<description>Entry Popup with type Dictionary in AnnotSound shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotSound is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7264"/>
			<description>Entry RC with type Stream in AnnotSound shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotSound is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7265"/>
			<description>Entry RC in AnnotSound shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotSound is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="10" testNumber="7266"/>
			<description>Entry RC with type Stream in AnnotSound shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotSound is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7267"/>
			<description>Entry Rect in AnnotSound shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotSound is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="7" testNumber="7268"/>
			<description>Entry Rect in AnnotSound is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7269"/>
			<description>Entry Sound with type Stream in AnnotSound shall be object SoundObject</description>
			<test>SoundHasTypeStream != true || Sound_size == 1</test>
			<error>
				<message>Entry Sound with type Stream in AnnotSound is not object SoundObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7270"/>
			<description>Entry Sound in AnnotSound shall have type Stream</description>
			<test>containsSound == false || SoundHasTypeStream == true</test>
			<error>
				<message>Entry Sound in AnnotSound is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="7" testNumber="7271"/>
			<description>Entry Sound in AnnotSound is required</description>
			<test>containsSound == true</test>
			<error>
				<message>Entry Sound in AnnotSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="10" testNumber="7272"/>
			<description>Entry Sound with type Stream in AnnotSound shall be indirect</description>
			<test>SoundHasTypeStream != true || isSoundIndirect == true</test>
			<error>
				<message>Entry Sound with type Stream in AnnotSound is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7273"/>
			<description>Entry StructParent in AnnotSound shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotSound is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7274"/>
			<description>Entry Subj in AnnotSound shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotSound is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7275"/>
			<description>Entry Subtype in AnnotSound shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="7" testNumber="7276"/>
			<description>Entry Subtype in AnnotSound is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="6" testNumber="7277"/>
			<description>Entry Subtype with type Name in AnnotSound shall have value Sound</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Sound"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotSound has incorrect value %2 instead of Sound</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7278"/>
			<description>Entry T in AnnotSound shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotSound is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7279"/>
			<description>Entry Type in AnnotSound shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_5" clause="6" testNumber="7280"/>
			<description>Entry Type with type Name in AnnotSound shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotSound has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="1" testNumber="7509"/>
			<description>AnnotSquare shall not contain entries except AP, AS, BE, BS, Border, C, Contents, CreationDate, F, IC, IRT, M, NM, OC, P, Popup, RC, RD, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotSquare contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7510"/>
			<description>Entry AP with type Dictionary in AnnotSquare shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotSquare is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7511"/>
			<description>Entry AP in AnnotSquare shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotSquare is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="11" testNumber="7512"/>
			<description>Entry AP in AnnotSquare is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotSquare is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7513"/>
			<description>Entry AS in AnnotSquare shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotSquare is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="11" testNumber="7514"/>
			<description>Entry AS in AnnotSquare is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotSquare is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7515"/>
			<description>Entry BE with type Dictionary in AnnotSquare shall be object BorderEffect</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in AnnotSquare is not object BorderEffect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7516"/>
			<description>Entry BE in AnnotSquare shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in AnnotSquare is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7517"/>
			<description>Entry BS with type Dictionary in AnnotSquare shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotSquare is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7518"/>
			<description>Entry BS in AnnotSquare shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotSquare is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7519"/>
			<description>Entry Border with type Array in AnnotSquare shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotSquare is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7520"/>
			<description>Entry Border in AnnotSquare shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotSquare is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7521"/>
			<description>Entry C with type Array in AnnotSquare shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotSquare is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7522"/>
			<description>Entry C in AnnotSquare shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotSquare is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7523"/>
			<description>Entry Contents in AnnotSquare shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotSquare is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7524"/>
			<description>Entry CreationDate in AnnotSquare shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotSquare is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7525"/>
			<description>Entry F in AnnotSquare shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotSquare is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="9" testNumber="7526"/>
			<description>Entry F with type Bitmask in AnnotSquare shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotSquare does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7527"/>
			<description>Entry IC with type Array in AnnotSquare shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>ICHasTypeArray != true || IC_size == 1</test>
			<error>
				<message>Entry IC with type Array in AnnotSquare is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7528"/>
			<description>Entry IC in AnnotSquare shall have type Array</description>
			<test>containsIC == false || ICHasTypeArray == true</test>
			<error>
				<message>Entry IC in AnnotSquare is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7529"/>
			<description>Entry IRT with type Dictionary in AnnotSquare shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotSquare is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7530"/>
			<description>Entry IRT in AnnotSquare shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotSquare is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="11" testNumber="7531"/>
			<description>Entry IRT in AnnotSquare is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotSquare is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7532"/>
			<description>Entry M in AnnotSquare shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotSquare is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7533"/>
			<description>Entry NM in AnnotSquare shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotSquare is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7534"/>
			<description>Entry OC with type Dictionary in AnnotSquare shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotSquare is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7535"/>
			<description>Entry OC in AnnotSquare shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotSquare is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7536"/>
			<description>Entry P with type Dictionary in AnnotSquare shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotSquare is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7537"/>
			<description>Entry P in AnnotSquare shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotSquare is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="10" testNumber="7538"/>
			<description>Entry P with type Dictionary in AnnotSquare shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotSquare is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7539"/>
			<description>Entry Popup with type Dictionary in AnnotSquare shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotSquare is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7540"/>
			<description>Entry Popup in AnnotSquare shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotSquare is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="10" testNumber="7541"/>
			<description>Entry Popup with type Dictionary in AnnotSquare shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotSquare is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7542"/>
			<description>Entry RC with type Stream in AnnotSquare shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotSquare is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7543"/>
			<description>Entry RC in AnnotSquare shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotSquare is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="10" testNumber="7544"/>
			<description>Entry RC with type Stream in AnnotSquare shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotSquare is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7545"/>
			<description>Entry RD in AnnotSquare shall have type Rectangle</description>
			<test>containsRD == false || RDHasTypeRectangle == true</test>
			<error>
				<message>Entry RD in AnnotSquare is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="9" testNumber="7546"/>
			<description>Entry RD with type Rectangle in AnnotSquare shall satisfy special case: fn:Eval((RD::@0&gt;= 0) &amp;&amp; (RD::@1&gt;= 0) &amp;&amp; (RD::@2&gt;= 0) &amp;&amp; (RD::@3&gt;= 0) &amp;&amp; ((RD::@1+ RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0+ RD::@2) &lt; fn:RectWidth(Rect)))</description>
			<test>RDHasTypeRectangle != true || ((RD0NumberValue &gt;= 0) &amp;&amp; (RD1NumberValue &gt;= 0) &amp;&amp; (RD2NumberValue &gt;= 0) &amp;&amp; (RD3NumberValue &gt;= 0) &amp;&amp; ((RD1NumberValue + RD3NumberValue) &lt; RectRectHeight) &amp;&amp; ((RD0NumberValue + RD2NumberValue) &lt; RectRectWidth))</test>
			<error>
				<message>Entry RD with type Rectangle in AnnotSquare does not satisfy special case: fn:Eval((RD::@0&gt;= 0) &amp;&amp; (RD::@1&gt;= 0) &amp;&amp; (RD::@2&gt;= 0) &amp;&amp; (RD::@3&gt;= 0) &amp;&amp; ((RD::@1+ RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0+ RD::@2) &lt; fn:RectWidth(Rect)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7547"/>
			<description>Entry Rect in AnnotSquare shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotSquare is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="7" testNumber="7548"/>
			<description>Entry Rect in AnnotSquare is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotSquare is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7549"/>
			<description>Entry StructParent in AnnotSquare shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotSquare is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7550"/>
			<description>Entry Subj in AnnotSquare shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotSquare is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7551"/>
			<description>Entry Subtype in AnnotSquare shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotSquare is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="7" testNumber="7552"/>
			<description>Entry Subtype in AnnotSquare is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotSquare is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="6" testNumber="7553"/>
			<description>Entry Subtype with type Name in AnnotSquare shall have value Square</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Square"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotSquare has incorrect value %2 instead of Square</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7554"/>
			<description>Entry T in AnnotSquare shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotSquare is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7555"/>
			<description>Entry Type in AnnotSquare shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotSquare is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_5" clause="6" testNumber="7556"/>
			<description>Entry Type with type Name in AnnotSquare shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotSquare has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="1" testNumber="7760"/>
			<description>AnnotSquiggly shall not contain entries except AP, AS, Border, C, CA, Contents, CreationDate, F, IRT, M, NM, OC, P, Popup, QuadPoints, RC, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotSquiggly contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7761"/>
			<description>Entry AP with type Dictionary in AnnotSquiggly shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotSquiggly is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7762"/>
			<description>Entry AP in AnnotSquiggly shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotSquiggly is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="11" testNumber="7763"/>
			<description>Entry AP in AnnotSquiggly is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotSquiggly is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7764"/>
			<description>Entry AS in AnnotSquiggly shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotSquiggly is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="11" testNumber="7765"/>
			<description>Entry AS in AnnotSquiggly is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotSquiggly is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7766"/>
			<description>Entry Border with type Array in AnnotSquiggly shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotSquiggly is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7767"/>
			<description>Entry Border in AnnotSquiggly shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotSquiggly is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7768"/>
			<description>Entry C with type Array in AnnotSquiggly shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotSquiggly is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7769"/>
			<description>Entry C in AnnotSquiggly shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotSquiggly is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7770"/>
			<description>Entry CA in AnnotSquiggly shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotSquiggly is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="14" testNumber="7771"/>
			<description>Entry CA with type Number in AnnotSquiggly shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotSquiggly does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7772"/>
			<description>Entry Contents in AnnotSquiggly shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotSquiggly is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7773"/>
			<description>Entry CreationDate in AnnotSquiggly shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotSquiggly is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7774"/>
			<description>Entry F in AnnotSquiggly shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotSquiggly is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="9" testNumber="7775"/>
			<description>Entry F with type Bitmask in AnnotSquiggly shall satisfy special case: fn:Eval(fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotSquiggly does not satisfy special case: fn:Eval(fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7776"/>
			<description>Entry IRT with type Dictionary in AnnotSquiggly shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotSquiggly is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7777"/>
			<description>Entry IRT in AnnotSquiggly shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotSquiggly is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="11" testNumber="7778"/>
			<description>Entry IRT in AnnotSquiggly is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotSquiggly is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7779"/>
			<description>Entry M in AnnotSquiggly shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotSquiggly is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7780"/>
			<description>Entry NM in AnnotSquiggly shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotSquiggly is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7781"/>
			<description>Entry OC with type Dictionary in AnnotSquiggly shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotSquiggly is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7782"/>
			<description>Entry OC in AnnotSquiggly shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotSquiggly is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7783"/>
			<description>Entry P with type Dictionary in AnnotSquiggly shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotSquiggly is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7784"/>
			<description>Entry P in AnnotSquiggly shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotSquiggly is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="10" testNumber="7785"/>
			<description>Entry P with type Dictionary in AnnotSquiggly shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotSquiggly is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7786"/>
			<description>Entry Popup with type Dictionary in AnnotSquiggly shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotSquiggly is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7787"/>
			<description>Entry Popup in AnnotSquiggly shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotSquiggly is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="10" testNumber="7788"/>
			<description>Entry Popup with type Dictionary in AnnotSquiggly shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotSquiggly is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7789"/>
			<description>Entry QuadPoints with type Array in AnnotSquiggly shall be object ArrayOfQuadPoints</description>
			<test>QuadPointsHasTypeArray != true || QuadPoints_size == 1</test>
			<error>
				<message>Entry QuadPoints with type Array in AnnotSquiggly is not object ArrayOfQuadPoints</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7790"/>
			<description>Entry QuadPoints in AnnotSquiggly shall have type Array</description>
			<test>containsQuadPoints == false || QuadPointsHasTypeArray == true</test>
			<error>
				<message>Entry QuadPoints in AnnotSquiggly is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="7" testNumber="7791"/>
			<description>Entry QuadPoints in AnnotSquiggly is required</description>
			<test>containsQuadPoints == true</test>
			<error>
				<message>Entry QuadPoints in AnnotSquiggly is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="17" testNumber="7792"/>
			<description>Entry RC with type Stream in AnnotSquiggly shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotSquiggly is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7793"/>
			<description>Entry RC in AnnotSquiggly shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotSquiggly is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="10" testNumber="7794"/>
			<description>Entry RC with type Stream in AnnotSquiggly shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotSquiggly is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7795"/>
			<description>Entry Rect in AnnotSquiggly shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotSquiggly is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="7" testNumber="7796"/>
			<description>Entry Rect in AnnotSquiggly is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotSquiggly is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7797"/>
			<description>Entry StructParent in AnnotSquiggly shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotSquiggly is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7798"/>
			<description>Entry Subj in AnnotSquiggly shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotSquiggly is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7799"/>
			<description>Entry Subtype in AnnotSquiggly shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotSquiggly is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="7" testNumber="7800"/>
			<description>Entry Subtype in AnnotSquiggly is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotSquiggly is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="6" testNumber="7801"/>
			<description>Entry Subtype with type Name in AnnotSquiggly shall have value Squiggly</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Squiggly"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotSquiggly has incorrect value %2 instead of Squiggly</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7802"/>
			<description>Entry T in AnnotSquiggly shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotSquiggly is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="8" testNumber="7803"/>
			<description>Entry Type in AnnotSquiggly shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotSquiggly is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_5" clause="6" testNumber="7804"/>
			<description>Entry Type with type Name in AnnotSquiggly shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotSquiggly has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="1" testNumber="8027"/>
			<description>AnnotStamp shall not contain entries except AP, AS, Border, C, CA, Contents, CreationDate, F, IRT, M, NM, Name, OC, P, Popup, RC, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotStamp contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8028"/>
			<description>Entry AP with type Dictionary in AnnotStamp shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotStamp is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8029"/>
			<description>Entry AP in AnnotStamp shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotStamp is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="11" testNumber="8030"/>
			<description>Entry AP in AnnotStamp is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8031"/>
			<description>Entry AS in AnnotStamp shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="11" testNumber="8032"/>
			<description>Entry AS in AnnotStamp is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8033"/>
			<description>Entry Border with type Array in AnnotStamp shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotStamp is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8034"/>
			<description>Entry Border in AnnotStamp shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotStamp is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8035"/>
			<description>Entry C with type Array in AnnotStamp shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotStamp is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8036"/>
			<description>Entry C in AnnotStamp shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotStamp is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8037"/>
			<description>Entry CA in AnnotStamp shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotStamp is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="14" testNumber="8038"/>
			<description>Entry CA with type Number in AnnotStamp shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotStamp does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8039"/>
			<description>Entry Contents in AnnotStamp shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotStamp is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8040"/>
			<description>Entry CreationDate in AnnotStamp shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotStamp is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8041"/>
			<description>Entry F in AnnotStamp shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotStamp is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="9" testNumber="8042"/>
			<description>Entry F with type Bitmask in AnnotStamp shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotStamp does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8043"/>
			<description>Entry IRT with type Dictionary in AnnotStamp shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotStamp is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8044"/>
			<description>Entry IRT in AnnotStamp shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotStamp is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="11" testNumber="8045"/>
			<description>Entry IRT in AnnotStamp is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8046"/>
			<description>Entry M in AnnotStamp shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotStamp is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8047"/>
			<description>Entry NM in AnnotStamp shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotStamp is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8048"/>
			<description>Entry Name in AnnotStamp shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in AnnotStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="9" testNumber="8049"/>
			<description>Entry Name with type Name in AnnotStamp shall satisfy special case: fn:Not(fn:IsRequired(fn:IsPresent(IT) &amp;&amp; fn:SinceVersion(2.0 , (@IT != Stamp))))</description>
			<test>NameHasTypeName != true || (((containsName == true || ((containsIT == true) &amp;&amp; true) == false)) != true)</test>
			<error>
				<message>Entry Name with type Name in AnnotStamp does not satisfy special case: fn:Not(fn:IsRequired(fn:IsPresent(IT) &amp;&amp; fn:SinceVersion(2.0 , (@IT != Stamp))))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8050"/>
			<description>Entry OC with type Dictionary in AnnotStamp shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotStamp is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8051"/>
			<description>Entry OC in AnnotStamp shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotStamp is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8052"/>
			<description>Entry P with type Dictionary in AnnotStamp shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotStamp is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8053"/>
			<description>Entry P in AnnotStamp shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotStamp is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="10" testNumber="8054"/>
			<description>Entry P with type Dictionary in AnnotStamp shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotStamp is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8055"/>
			<description>Entry Popup with type Dictionary in AnnotStamp shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotStamp is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8056"/>
			<description>Entry Popup in AnnotStamp shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotStamp is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="10" testNumber="8057"/>
			<description>Entry Popup with type Dictionary in AnnotStamp shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotStamp is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8058"/>
			<description>Entry RC with type Stream in AnnotStamp shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotStamp is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8059"/>
			<description>Entry RC in AnnotStamp shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotStamp is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="10" testNumber="8060"/>
			<description>Entry RC with type Stream in AnnotStamp shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotStamp is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8061"/>
			<description>Entry Rect in AnnotStamp shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotStamp is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="7" testNumber="8062"/>
			<description>Entry Rect in AnnotStamp is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8063"/>
			<description>Entry StructParent in AnnotStamp shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotStamp is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8064"/>
			<description>Entry Subj in AnnotStamp shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotStamp is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8065"/>
			<description>Entry Subtype in AnnotStamp shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="7" testNumber="8066"/>
			<description>Entry Subtype in AnnotStamp is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="6" testNumber="8067"/>
			<description>Entry Subtype with type Name in AnnotStamp shall have value Stamp</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Stamp"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotStamp has incorrect value %2 instead of Stamp</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8068"/>
			<description>Entry T in AnnotStamp shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotStamp is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8069"/>
			<description>Entry Type in AnnotStamp shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_5" clause="6" testNumber="8070"/>
			<description>Entry Type with type Name in AnnotStamp shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotStamp has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="1" testNumber="8291"/>
			<description>AnnotStrikeOut shall not contain entries except AP, AS, Border, C, CA, Contents, CreationDate, F, IRT, M, NM, OC, P, Popup, QuadPoints, RC, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotStrikeOut contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8292"/>
			<description>Entry AP with type Dictionary in AnnotStrikeOut shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotStrikeOut is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8293"/>
			<description>Entry AP in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotStrikeOut is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="11" testNumber="8294"/>
			<description>Entry AP in AnnotStrikeOut is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotStrikeOut is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8295"/>
			<description>Entry AS in AnnotStrikeOut shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotStrikeOut is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="11" testNumber="8296"/>
			<description>Entry AS in AnnotStrikeOut is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotStrikeOut is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8297"/>
			<description>Entry Border with type Array in AnnotStrikeOut shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotStrikeOut is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8298"/>
			<description>Entry Border in AnnotStrikeOut shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotStrikeOut is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8299"/>
			<description>Entry C with type Array in AnnotStrikeOut shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotStrikeOut is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8300"/>
			<description>Entry C in AnnotStrikeOut shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotStrikeOut is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8301"/>
			<description>Entry CA in AnnotStrikeOut shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotStrikeOut is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="14" testNumber="8302"/>
			<description>Entry CA with type Number in AnnotStrikeOut shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotStrikeOut does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8303"/>
			<description>Entry Contents in AnnotStrikeOut shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotStrikeOut is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8304"/>
			<description>Entry CreationDate in AnnotStrikeOut shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotStrikeOut is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8305"/>
			<description>Entry F in AnnotStrikeOut shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotStrikeOut is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="9" testNumber="8306"/>
			<description>Entry F with type Bitmask in AnnotStrikeOut shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotStrikeOut does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8307"/>
			<description>Entry IRT with type Dictionary in AnnotStrikeOut shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotStrikeOut is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8308"/>
			<description>Entry IRT in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotStrikeOut is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="11" testNumber="8309"/>
			<description>Entry IRT in AnnotStrikeOut is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotStrikeOut is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8310"/>
			<description>Entry M in AnnotStrikeOut shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotStrikeOut is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8311"/>
			<description>Entry NM in AnnotStrikeOut shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotStrikeOut is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8312"/>
			<description>Entry OC with type Dictionary in AnnotStrikeOut shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotStrikeOut is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8313"/>
			<description>Entry OC in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotStrikeOut is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8314"/>
			<description>Entry P with type Dictionary in AnnotStrikeOut shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotStrikeOut is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8315"/>
			<description>Entry P in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotStrikeOut is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="10" testNumber="8316"/>
			<description>Entry P with type Dictionary in AnnotStrikeOut shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotStrikeOut is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8317"/>
			<description>Entry Popup with type Dictionary in AnnotStrikeOut shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotStrikeOut is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8318"/>
			<description>Entry Popup in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotStrikeOut is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="10" testNumber="8319"/>
			<description>Entry Popup with type Dictionary in AnnotStrikeOut shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotStrikeOut is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8320"/>
			<description>Entry QuadPoints with type Array in AnnotStrikeOut shall be object ArrayOfQuadPoints</description>
			<test>QuadPointsHasTypeArray != true || QuadPoints_size == 1</test>
			<error>
				<message>Entry QuadPoints with type Array in AnnotStrikeOut is not object ArrayOfQuadPoints</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8321"/>
			<description>Entry QuadPoints in AnnotStrikeOut shall have type Array</description>
			<test>containsQuadPoints == false || QuadPointsHasTypeArray == true</test>
			<error>
				<message>Entry QuadPoints in AnnotStrikeOut is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="7" testNumber="8322"/>
			<description>Entry QuadPoints in AnnotStrikeOut is required</description>
			<test>containsQuadPoints == true</test>
			<error>
				<message>Entry QuadPoints in AnnotStrikeOut is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8323"/>
			<description>Entry RC with type Stream in AnnotStrikeOut shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotStrikeOut is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8324"/>
			<description>Entry RC in AnnotStrikeOut shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotStrikeOut is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="10" testNumber="8325"/>
			<description>Entry RC with type Stream in AnnotStrikeOut shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotStrikeOut is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8326"/>
			<description>Entry Rect in AnnotStrikeOut shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotStrikeOut is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="7" testNumber="8327"/>
			<description>Entry Rect in AnnotStrikeOut is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotStrikeOut is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8328"/>
			<description>Entry StructParent in AnnotStrikeOut shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotStrikeOut is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8329"/>
			<description>Entry Subj in AnnotStrikeOut shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotStrikeOut is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8330"/>
			<description>Entry Subtype in AnnotStrikeOut shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotStrikeOut is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="7" testNumber="8331"/>
			<description>Entry Subtype in AnnotStrikeOut is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotStrikeOut is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="6" testNumber="8332"/>
			<description>Entry Subtype with type Name in AnnotStrikeOut shall have value StrikeOut</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "StrikeOut"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotStrikeOut has incorrect value %2 instead of StrikeOut</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8333"/>
			<description>Entry T in AnnotStrikeOut shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotStrikeOut is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8334"/>
			<description>Entry Type in AnnotStrikeOut shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotStrikeOut is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_5" clause="6" testNumber="8335"/>
			<description>Entry Type with type Name in AnnotStrikeOut shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotStrikeOut has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="1" testNumber="8619"/>
			<description>AnnotText shall not contain entries except AP, AS, Border, C, CA, Contents, CreationDate, F, IRT, M, NM, Name, OC, Open, P, Popup, RC, Rect, State, StateModel, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'State' &amp;&amp; elem != 'StateModel' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotText contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'State' &amp;&amp; elem != 'StateModel' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8620"/>
			<description>Entry AP with type Dictionary in AnnotText shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotText is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8621"/>
			<description>Entry AP in AnnotText shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="11" testNumber="8622"/>
			<description>Entry AP in AnnotText is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8623"/>
			<description>Entry AS in AnnotText shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="11" testNumber="8624"/>
			<description>Entry AS in AnnotText is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8625"/>
			<description>Entry Border with type Array in AnnotText shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotText is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8626"/>
			<description>Entry Border in AnnotText shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotText is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8627"/>
			<description>Entry C with type Array in AnnotText shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotText is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8628"/>
			<description>Entry C in AnnotText shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotText is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8629"/>
			<description>Entry CA in AnnotText shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotText is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="14" testNumber="8630"/>
			<description>Entry CA with type Number in AnnotText shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotText does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8631"/>
			<description>Entry Contents in AnnotText shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8632"/>
			<description>Entry CreationDate in AnnotText shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotText is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8633"/>
			<description>Entry F in AnnotText shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotText is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="9" testNumber="8634"/>
			<description>Entry F with type Bitmask in AnnotText shall satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotText does not satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8635"/>
			<description>Entry IRT with type Dictionary in AnnotText shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotText is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8636"/>
			<description>Entry IRT in AnnotText shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="11" testNumber="8637"/>
			<description>Entry IRT in AnnotText is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8638"/>
			<description>Entry M in AnnotText shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotText is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8639"/>
			<description>Entry NM in AnnotText shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8640"/>
			<description>Entry Name in AnnotText shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in AnnotText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="6" testNumber="8641"/>
			<description>Entry Name with type Name in AnnotText shall have one of values: Comment, Help, Note, Insert, Key, NewParagraph, Paragraph</description>
			<test>NameHasTypeName != true || NameNameValue == "Comment" || NameNameValue == "Key" || NameNameValue == "Note" || NameNameValue == "Help" || NameNameValue == "NewParagraph" || NameNameValue == "Paragraph" || NameNameValue == "Insert"</test>
			<error>
				<message>Entry Name with type Name in AnnotText has incorrect value %2 instead of Comment, Help, Note, Insert, Key, NewParagraph, Paragraph</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8642"/>
			<description>Entry OC with type Dictionary in AnnotText shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotText is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8643"/>
			<description>Entry OC in AnnotText shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8644"/>
			<description>Entry Open in AnnotText shall have type Boolean</description>
			<test>containsOpen == false || OpenHasTypeBoolean == true</test>
			<error>
				<message>Entry Open in AnnotText is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8645"/>
			<description>Entry P with type Dictionary in AnnotText shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotText is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8646"/>
			<description>Entry P in AnnotText shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="10" testNumber="8647"/>
			<description>Entry P with type Dictionary in AnnotText shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotText is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8648"/>
			<description>Entry Popup with type Dictionary in AnnotText shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotText is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8649"/>
			<description>Entry Popup in AnnotText shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="10" testNumber="8650"/>
			<description>Entry Popup with type Dictionary in AnnotText shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotText is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8651"/>
			<description>Entry RC with type Stream in AnnotText shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotText is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8652"/>
			<description>Entry RC in AnnotText shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotText is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="10" testNumber="8653"/>
			<description>Entry RC with type Stream in AnnotText shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotText is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8654"/>
			<description>Entry Rect in AnnotText shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotText is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="7" testNumber="8655"/>
			<description>Entry Rect in AnnotText is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8656"/>
			<description>Entry State in AnnotText shall have type StringText</description>
			<test>containsState == false || StateHasTypeStringText == true</test>
			<error>
				<message>Entry State in AnnotText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="6" testNumber="8657"/>
			<description>Entry State with type StringText in AnnotText shall have one of values: Unmarked, Completed, Rejected, Cancelled, Marked, None, Accepted</description>
			<test>StateHasTypeStringText != true || StateStringTextValue == "Marked" || StateStringTextValue == "Unmarked" || StateStringTextValue == "Accepted" || StateStringTextValue == "Rejected" || StateStringTextValue == "Cancelled" || StateStringTextValue == "Completed" || StateStringTextValue == "None"</test>
			<error>
				<message>Entry State with type StringText in AnnotText has incorrect value %2 instead of Unmarked, Completed, Rejected, Cancelled, Marked, None, Accepted</message>
				<arguments>
					<argument>keyName</argument>
					<argument>StateStringTextValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8658"/>
			<description>Entry StateModel in AnnotText shall have type StringText</description>
			<test>containsStateModel == false || StateModelHasTypeStringText == true</test>
			<error>
				<message>Entry StateModel in AnnotText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="11" testNumber="8659"/>
			<description>Entry StateModel in AnnotText is required, when fn:IsRequired(fn:IsPresent(State))</description>
			<test>(containsStateModel == true || ((containsState == true)) == false)</test>
			<error>
				<message>Entry StateModel in AnnotText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="6" testNumber="8660"/>
			<description>Entry StateModel with type StringText in AnnotText shall have one of values: Review, Marked</description>
			<test>StateModelHasTypeStringText != true || StateModelStringTextValue == "Marked" || StateModelStringTextValue == "Review"</test>
			<error>
				<message>Entry StateModel with type StringText in AnnotText has incorrect value %2 instead of Review, Marked</message>
				<arguments>
					<argument>keyName</argument>
					<argument>StateModelStringTextValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8661"/>
			<description>Entry StructParent in AnnotText shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotText is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8662"/>
			<description>Entry Subj in AnnotText shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8663"/>
			<description>Entry Subtype in AnnotText shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="7" testNumber="8664"/>
			<description>Entry Subtype in AnnotText is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="6" testNumber="8665"/>
			<description>Entry Subtype with type Name in AnnotText shall have value Text</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Text"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotText has incorrect value %2 instead of Text</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8666"/>
			<description>Entry T in AnnotText shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8667"/>
			<description>Entry Type in AnnotText shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_5" clause="6" testNumber="8668"/>
			<description>Entry Type with type Name in AnnotText shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotText has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="1" testNumber="8912"/>
			<description>AnnotTrapNetwork shall not contain entries except AP, AS, AnnotStates, Border, C, Contents, F, FontFauxing, LastModified, M, NM, OC, P, Rect, StructParent, Subtype, Type, Version</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'AnnotStates' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FontFauxing' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version').length == 0</test>
			<error>
				<message>AnnotTrapNetwork contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'AnnotStates' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FontFauxing' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8913"/>
			<description>Entry AP with type Dictionary in AnnotTrapNetwork shall be object AppearanceTrapNet</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotTrapNetwork is not object AppearanceTrapNet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8914"/>
			<description>Entry AP in AnnotTrapNetwork shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotTrapNetwork is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="7" testNumber="8915"/>
			<description>Entry AP in AnnotTrapNetwork is required</description>
			<test>containsAP == true</test>
			<error>
				<message>Entry AP in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8916"/>
			<description>Entry AS in AnnotTrapNetwork shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotTrapNetwork is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="7" testNumber="8917"/>
			<description>Entry AS in AnnotTrapNetwork is required</description>
			<test>containsAS == true</test>
			<error>
				<message>Entry AS in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8918"/>
			<description>Entry AnnotStates with type Array in AnnotTrapNetwork shall be object ArrayOfAnnotStates</description>
			<test>AnnotStatesHasTypeArray != true || AnnotStates_size == 1</test>
			<error>
				<message>Entry AnnotStates with type Array in AnnotTrapNetwork is not object ArrayOfAnnotStates</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8919"/>
			<description>Entry AnnotStates in AnnotTrapNetwork shall have type Array</description>
			<test>containsAnnotStates == false || AnnotStatesHasTypeArray == true</test>
			<error>
				<message>Entry AnnotStates in AnnotTrapNetwork is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="11" testNumber="8920"/>
			<description>Entry AnnotStates in AnnotTrapNetwork is required, when fn:IsRequired(fn:IsPresent(Version) &amp;&amp; fn:Not(fn:IsPresent(LastModified)))</description>
			<test>(containsAnnotStates == true || ((containsVersion == true) &amp;&amp; ((containsLastModified == true)) != true) == false)</test>
			<error>
				<message>Entry AnnotStates in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8921"/>
			<description>Entry Border with type Array in AnnotTrapNetwork shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotTrapNetwork is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8922"/>
			<description>Entry Border in AnnotTrapNetwork shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotTrapNetwork is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8923"/>
			<description>Entry C with type Array in AnnotTrapNetwork shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotTrapNetwork is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8924"/>
			<description>Entry C in AnnotTrapNetwork shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotTrapNetwork is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8925"/>
			<description>Entry Contents in AnnotTrapNetwork shall have type String</description>
			<test>containsContents == false || ContentsHasTypeString == true</test>
			<error>
				<message>Entry Contents in AnnotTrapNetwork is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8926"/>
			<description>Entry F in AnnotTrapNetwork shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotTrapNetwork is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="7" testNumber="8927"/>
			<description>Entry F in AnnotTrapNetwork is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="9" testNumber="8928"/>
			<description>Entry F with type Bitmask in AnnotTrapNetwork shall satisfy special case: fn:Eval(fn:BitsClear(1 , 2) &amp;&amp; fn:BitSet(3) &amp;&amp; fn:BitsClear(4 , 6) &amp;&amp; fn:BitSet(7) &amp;&amp; fn:BitsClear(8 , 32))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 0 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 1 &amp; 1) == 0) &amp;&amp; (FBitmaskValue &gt;&gt; 2 &amp; 1) == 1 &amp;&amp; ((FBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 5 &amp; 1) == 0) &amp;&amp; (FBitmaskValue &gt;&gt; 6 &amp; 1) == 1 &amp;&amp; ((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotTrapNetwork does not satisfy special case: fn:Eval(fn:BitsClear(1 , 2) &amp;&amp; fn:BitSet(3) &amp;&amp; fn:BitsClear(4 , 6) &amp;&amp; fn:BitSet(7) &amp;&amp; fn:BitsClear(8 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8929"/>
			<description>Entry FontFauxing with type Array in AnnotTrapNetwork shall be object ArrayOfFonts</description>
			<test>FontFauxingHasTypeArray != true || FontFauxing_size == 1</test>
			<error>
				<message>Entry FontFauxing with type Array in AnnotTrapNetwork is not object ArrayOfFonts</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8930"/>
			<description>Entry FontFauxing in AnnotTrapNetwork shall have type Array</description>
			<test>containsFontFauxing == false || FontFauxingHasTypeArray == true</test>
			<error>
				<message>Entry FontFauxing in AnnotTrapNetwork is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8931"/>
			<description>Entry LastModified in AnnotTrapNetwork shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in AnnotTrapNetwork is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="11" testNumber="8932"/>
			<description>Entry LastModified in AnnotTrapNetwork is required, when fn:IsRequired(fn:Not(fn:IsPresent(Version)) &amp;&amp; fn:Not(fn:IsPresent(AnnotStates)))</description>
			<test>(containsLastModified == true || (((containsVersion == true)) != true &amp;&amp; ((containsAnnotStates == true)) != true) == false)</test>
			<error>
				<message>Entry LastModified in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8933"/>
			<description>Entry M in AnnotTrapNetwork shall have one of types: Date, String</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeString == true</test>
			<error>
				<message>Entry M in AnnotTrapNetwork is not one of types: Date, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8934"/>
			<description>Entry NM in AnnotTrapNetwork shall have type String</description>
			<test>containsNM == false || NMHasTypeString == true</test>
			<error>
				<message>Entry NM in AnnotTrapNetwork is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8935"/>
			<description>Entry OC with type Dictionary in AnnotTrapNetwork shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotTrapNetwork is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8936"/>
			<description>Entry OC in AnnotTrapNetwork shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotTrapNetwork is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8937"/>
			<description>Entry P with type Dictionary in AnnotTrapNetwork shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotTrapNetwork is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8938"/>
			<description>Entry P in AnnotTrapNetwork shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotTrapNetwork is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="10" testNumber="8939"/>
			<description>Entry P with type Dictionary in AnnotTrapNetwork shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotTrapNetwork is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8940"/>
			<description>Entry Rect in AnnotTrapNetwork shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotTrapNetwork is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="7" testNumber="8941"/>
			<description>Entry Rect in AnnotTrapNetwork is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8942"/>
			<description>Entry StructParent in AnnotTrapNetwork shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotTrapNetwork is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8943"/>
			<description>Entry Subtype in AnnotTrapNetwork shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotTrapNetwork is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="7" testNumber="8944"/>
			<description>Entry Subtype in AnnotTrapNetwork is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="6" testNumber="8945"/>
			<description>Entry Subtype with type Name in AnnotTrapNetwork shall have value TrapNet</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "TrapNet"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotTrapNetwork has incorrect value %2 instead of TrapNet</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8946"/>
			<description>Entry Type in AnnotTrapNetwork shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotTrapNetwork is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="6" testNumber="8947"/>
			<description>Entry Type with type Name in AnnotTrapNetwork shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotTrapNetwork has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="17" testNumber="8948"/>
			<description>Entry Version with type Array in AnnotTrapNetwork shall be object ArrayOfTrapNetVersionObjects</description>
			<test>VersionHasTypeArray != true || Version_size == 1</test>
			<error>
				<message>Entry Version with type Array in AnnotTrapNetwork is not object ArrayOfTrapNetVersionObjects</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="8" testNumber="8949"/>
			<description>Entry Version in AnnotTrapNetwork shall have type Array</description>
			<test>containsVersion == false || VersionHasTypeArray == true</test>
			<error>
				<message>Entry Version in AnnotTrapNetwork is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_5" clause="11" testNumber="8950"/>
			<description>Entry Version in AnnotTrapNetwork is required, when fn:IsRequired(fn:IsPresent(AnnotStates) &amp;&amp; fn:Not(fn:IsPresent(LastModified)))</description>
			<test>(containsVersion == true || ((containsAnnotStates == true) &amp;&amp; ((containsLastModified == true)) != true) == false)</test>
			<error>
				<message>Entry Version in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="1" testNumber="9146"/>
			<description>AnnotUnderline shall not contain entries except AP, AS, Border, C, CA, Contents, CreationDate, F, IRT, M, NM, OC, P, Popup, QuadPoints, RC, Rect, StructParent, Subj, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotUnderline contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9147"/>
			<description>Entry AP with type Dictionary in AnnotUnderline shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotUnderline is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9148"/>
			<description>Entry AP in AnnotUnderline shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotUnderline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="11" testNumber="9149"/>
			<description>Entry AP in AnnotUnderline is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotUnderline is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9150"/>
			<description>Entry AS in AnnotUnderline shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotUnderline is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="11" testNumber="9151"/>
			<description>Entry AS in AnnotUnderline is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotUnderline is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9152"/>
			<description>Entry Border with type Array in AnnotUnderline shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotUnderline is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9153"/>
			<description>Entry Border in AnnotUnderline shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotUnderline is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9154"/>
			<description>Entry C with type Array in AnnotUnderline shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotUnderline is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9155"/>
			<description>Entry C in AnnotUnderline shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotUnderline is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9156"/>
			<description>Entry CA in AnnotUnderline shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotUnderline is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="14" testNumber="9157"/>
			<description>Entry CA with type Number in AnnotUnderline shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotUnderline does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9158"/>
			<description>Entry Contents in AnnotUnderline shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotUnderline is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9159"/>
			<description>Entry CreationDate in AnnotUnderline shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotUnderline is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9160"/>
			<description>Entry F in AnnotUnderline shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotUnderline is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="9" testNumber="9161"/>
			<description>Entry F with type Bitmask in AnnotUnderline shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotUnderline does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9162"/>
			<description>Entry IRT with type Dictionary in AnnotUnderline shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotUnderline is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9163"/>
			<description>Entry IRT in AnnotUnderline shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotUnderline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="11" testNumber="9164"/>
			<description>Entry IRT in AnnotUnderline is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotUnderline is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9165"/>
			<description>Entry M in AnnotUnderline shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotUnderline is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9166"/>
			<description>Entry NM in AnnotUnderline shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotUnderline is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9167"/>
			<description>Entry OC with type Dictionary in AnnotUnderline shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotUnderline is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9168"/>
			<description>Entry OC in AnnotUnderline shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotUnderline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9169"/>
			<description>Entry P with type Dictionary in AnnotUnderline shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotUnderline is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9170"/>
			<description>Entry P in AnnotUnderline shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotUnderline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="10" testNumber="9171"/>
			<description>Entry P with type Dictionary in AnnotUnderline shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotUnderline is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9172"/>
			<description>Entry Popup with type Dictionary in AnnotUnderline shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotUnderline is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9173"/>
			<description>Entry Popup in AnnotUnderline shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotUnderline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="10" testNumber="9174"/>
			<description>Entry Popup with type Dictionary in AnnotUnderline shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotUnderline is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9175"/>
			<description>Entry QuadPoints with type Array in AnnotUnderline shall be object ArrayOfQuadPoints</description>
			<test>QuadPointsHasTypeArray != true || QuadPoints_size == 1</test>
			<error>
				<message>Entry QuadPoints with type Array in AnnotUnderline is not object ArrayOfQuadPoints</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9176"/>
			<description>Entry QuadPoints in AnnotUnderline shall have type Array</description>
			<test>containsQuadPoints == false || QuadPointsHasTypeArray == true</test>
			<error>
				<message>Entry QuadPoints in AnnotUnderline is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="7" testNumber="9177"/>
			<description>Entry QuadPoints in AnnotUnderline is required</description>
			<test>containsQuadPoints == true</test>
			<error>
				<message>Entry QuadPoints in AnnotUnderline is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9178"/>
			<description>Entry RC with type Stream in AnnotUnderline shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotUnderline is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9179"/>
			<description>Entry RC in AnnotUnderline shall have one of types: Stream, StringText</description>
			<test>containsRC == false || RCHasTypeStream == true || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AnnotUnderline is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="10" testNumber="9180"/>
			<description>Entry RC with type Stream in AnnotUnderline shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotUnderline is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9181"/>
			<description>Entry Rect in AnnotUnderline shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotUnderline is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="7" testNumber="9182"/>
			<description>Entry Rect in AnnotUnderline is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotUnderline is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9183"/>
			<description>Entry StructParent in AnnotUnderline shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotUnderline is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9184"/>
			<description>Entry Subj in AnnotUnderline shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotUnderline is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9185"/>
			<description>Entry Subtype in AnnotUnderline shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotUnderline is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="7" testNumber="9186"/>
			<description>Entry Subtype in AnnotUnderline is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotUnderline is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="6" testNumber="9187"/>
			<description>Entry Subtype with type Name in AnnotUnderline shall have value Underline</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Underline"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotUnderline has incorrect value %2 instead of Underline</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9188"/>
			<description>Entry T in AnnotUnderline shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotUnderline is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9189"/>
			<description>Entry Type in AnnotUnderline shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotUnderline is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_5" clause="6" testNumber="9190"/>
			<description>Entry Type with type Name in AnnotUnderline shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotUnderline has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="1" testNumber="9573"/>
			<description>AnnotWidget shall not contain entries except A, AA, AP, AS, BS, Border, C, Contents, F, Ff, H, Kids, M, MK, NM, OC, P, Parent, Rect, StructParent, Subtype, T, TM, TU, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotWidget contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9574"/>
			<description>Entry A with type Dictionary in AnnotWidget shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotWidget is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9575"/>
			<description>Entry A in AnnotWidget shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9576"/>
			<description>Entry AA with type Dictionary in AnnotWidget shall be object AddActionWidgetAnnotation</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in AnnotWidget is not object AddActionWidgetAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9577"/>
			<description>Entry AA in AnnotWidget shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9578"/>
			<description>Entry AP with type Dictionary in AnnotWidget shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotWidget is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9579"/>
			<description>Entry AP in AnnotWidget shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="11" testNumber="9580"/>
			<description>Entry AP in AnnotWidget is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotWidget is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9581"/>
			<description>Entry AS in AnnotWidget shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotWidget is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="11" testNumber="9582"/>
			<description>Entry AS in AnnotWidget is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotWidget is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9583"/>
			<description>Entry BS with type Dictionary in AnnotWidget shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotWidget is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9584"/>
			<description>Entry BS in AnnotWidget shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9585"/>
			<description>Entry Border with type Array in AnnotWidget shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotWidget is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9586"/>
			<description>Entry Border in AnnotWidget shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotWidget is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9587"/>
			<description>Entry C with type Array in AnnotWidget shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotWidget is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9588"/>
			<description>Entry C in AnnotWidget shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotWidget is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9589"/>
			<description>Entry Contents in AnnotWidget shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotWidget is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9590"/>
			<description>Entry F in AnnotWidget shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotWidget is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="9" testNumber="9591"/>
			<description>Entry F with type Bitmask in AnnotWidget shall satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotWidget does not satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9592"/>
			<description>Entry Ff in AnnotWidget shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in AnnotWidget is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9593"/>
			<description>Entry H in AnnotWidget shall have type Name</description>
			<test>containsH == false || HHasTypeName == true</test>
			<error>
				<message>Entry H in AnnotWidget is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="6" testNumber="9594"/>
			<description>Entry H with type Name in AnnotWidget shall have one of values: P, T, I, N, O</description>
			<test>HHasTypeName != true || HNameValue == "N" || HNameValue == "I" || HNameValue == "O" || HNameValue == "P" || HNameValue == "T"</test>
			<error>
				<message>Entry H with type Name in AnnotWidget has incorrect value %2 instead of P, T, I, N, O</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9595"/>
			<description>Entry Kids with type Array in AnnotWidget shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in AnnotWidget is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9596"/>
			<description>Entry Kids in AnnotWidget shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in AnnotWidget is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9597"/>
			<description>Entry M in AnnotWidget shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotWidget is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9598"/>
			<description>Entry MK with type Dictionary in AnnotWidget shall be object AppearanceCharacteristics</description>
			<test>MKHasTypeDictionary != true || MK_size == 1</test>
			<error>
				<message>Entry MK with type Dictionary in AnnotWidget is not object AppearanceCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9599"/>
			<description>Entry MK in AnnotWidget shall have type Dictionary</description>
			<test>containsMK == false || MKHasTypeDictionary == true</test>
			<error>
				<message>Entry MK in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9600"/>
			<description>Entry NM in AnnotWidget shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotWidget is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9601"/>
			<description>Entry OC with type Dictionary in AnnotWidget shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotWidget is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9602"/>
			<description>Entry OC in AnnotWidget shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9603"/>
			<description>Entry P with type Dictionary in AnnotWidget shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotWidget is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9604"/>
			<description>Entry P in AnnotWidget shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="10" testNumber="9605"/>
			<description>Entry P with type Dictionary in AnnotWidget shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotWidget is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9606"/>
			<description>Entry Parent with type Dictionary in AnnotWidget shall be object Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in AnnotWidget is not object Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9607"/>
			<description>Entry Parent in AnnotWidget shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9608"/>
			<description>Entry Rect in AnnotWidget shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotWidget is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="7" testNumber="9609"/>
			<description>Entry Rect in AnnotWidget is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotWidget is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9610"/>
			<description>Entry StructParent in AnnotWidget shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotWidget is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9611"/>
			<description>Entry Subtype in AnnotWidget shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotWidget is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="7" testNumber="9612"/>
			<description>Entry Subtype in AnnotWidget is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotWidget is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="6" testNumber="9613"/>
			<description>Entry Subtype with type Name in AnnotWidget shall have value Widget</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Widget"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotWidget has incorrect value %2 instead of Widget</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9614"/>
			<description>Entry T in AnnotWidget shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotWidget is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9615"/>
			<description>Entry TM in AnnotWidget shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in AnnotWidget is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9616"/>
			<description>Entry TU in AnnotWidget shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in AnnotWidget is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9617"/>
			<description>Entry Type in AnnotWidget shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotWidget is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_5" clause="6" testNumber="9618"/>
			<description>Entry Type with type Name in AnnotWidget shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotWidget has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_5" clause="1" testNumber="9811"/>
			<description>Appearance shall not contain entries except D, N, R</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R').length == 0</test>
			<error>
				<message>Appearance contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9812"/>
			<description>Entry D with type Stream in Appearance shall be one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>DHasTypeStream != true || D_size == 1</test>
			<error>
				<message>Entry D with type Stream in Appearance is not one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9813"/>
			<description>Entry D with type Dictionary in Appearance shall be object AppearanceSubDict</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in Appearance is not object AppearanceSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9814"/>
			<description>Entry D in Appearance shall have one of types: Stream, Dictionary</description>
			<test>containsD == false || DHasTypeStream == true || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in Appearance is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_5" clause="10" testNumber="9815"/>
			<description>Entry D with type Stream in Appearance shall be indirect</description>
			<test>DHasTypeStream != true || isDIndirect == true</test>
			<error>
				<message>Entry D with type Stream in Appearance is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9816"/>
			<description>Entry N with type Stream in Appearance shall be one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>NHasTypeStream != true || N_size == 1</test>
			<error>
				<message>Entry N with type Stream in Appearance is not one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9817"/>
			<description>Entry N with type Dictionary in Appearance shall be object AppearanceSubDict</description>
			<test>NHasTypeDictionary != true || N_size == 1</test>
			<error>
				<message>Entry N with type Dictionary in Appearance is not object AppearanceSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9818"/>
			<description>Entry N in Appearance shall have one of types: Stream, Dictionary</description>
			<test>containsN == false || NHasTypeStream == true || NHasTypeDictionary == true</test>
			<error>
				<message>Entry N in Appearance is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_5" clause="7" testNumber="9819"/>
			<description>Entry N in Appearance is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in Appearance is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_5" clause="10" testNumber="9820"/>
			<description>Entry N with type Stream in Appearance shall be indirect</description>
			<test>NHasTypeStream != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Stream in Appearance is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9821"/>
			<description>Entry R with type Stream in Appearance shall be one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>RHasTypeStream != true || R_size == 1</test>
			<error>
				<message>Entry R with type Stream in Appearance is not one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9822"/>
			<description>Entry R with type Dictionary in Appearance shall be object AppearanceSubDict</description>
			<test>RHasTypeDictionary != true || R_size == 1</test>
			<error>
				<message>Entry R with type Dictionary in Appearance is not object AppearanceSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9823"/>
			<description>Entry R in Appearance shall have one of types: Stream, Dictionary</description>
			<test>containsR == false || RHasTypeStream == true || RHasTypeDictionary == true</test>
			<error>
				<message>Entry R in Appearance is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_5" clause="10" testNumber="9824"/>
			<description>Entry R with type Stream in Appearance shall be indirect</description>
			<test>RHasTypeStream != true || isRIndirect == true</test>
			<error>
				<message>Entry R with type Stream in Appearance is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="1" testNumber="9931"/>
			<description>AppearanceCharacteristics shall not contain entries except AC, BC, BG, CA, I, IF, IX, R, RC, RI, TP</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AC' &amp;&amp; elem != 'BC' &amp;&amp; elem != 'BG' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'I' &amp;&amp; elem != 'IF' &amp;&amp; elem != 'IX' &amp;&amp; elem != 'R' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RI' &amp;&amp; elem != 'TP').length == 0</test>
			<error>
				<message>AppearanceCharacteristics contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AC' &amp;&amp; elem != 'BC' &amp;&amp; elem != 'BG' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'I' &amp;&amp; elem != 'IF' &amp;&amp; elem != 'IX' &amp;&amp; elem != 'R' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RI' &amp;&amp; elem != 'TP').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9932"/>
			<description>Entry AC in AppearanceCharacteristics shall have type StringText</description>
			<test>containsAC == false || ACHasTypeStringText == true</test>
			<error>
				<message>Entry AC in AppearanceCharacteristics is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9933"/>
			<description>Entry BC with type Array in AppearanceCharacteristics shall be object ArrayOfNumbersGeneral</description>
			<test>BCHasTypeArray != true || BC_size == 1</test>
			<error>
				<message>Entry BC with type Array in AppearanceCharacteristics is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9934"/>
			<description>Entry BC in AppearanceCharacteristics shall have type Array</description>
			<test>containsBC == false || BCHasTypeArray == true</test>
			<error>
				<message>Entry BC in AppearanceCharacteristics is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9935"/>
			<description>Entry BG with type Array in AppearanceCharacteristics shall be object ArrayOfNumbersGeneral</description>
			<test>BGHasTypeArray != true || BG_size == 1</test>
			<error>
				<message>Entry BG with type Array in AppearanceCharacteristics is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9936"/>
			<description>Entry BG in AppearanceCharacteristics shall have type Array</description>
			<test>containsBG == false || BGHasTypeArray == true</test>
			<error>
				<message>Entry BG in AppearanceCharacteristics is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9937"/>
			<description>Entry CA in AppearanceCharacteristics shall have type StringText</description>
			<test>containsCA == false || CAHasTypeStringText == true</test>
			<error>
				<message>Entry CA in AppearanceCharacteristics is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9938"/>
			<description>Entry I with type Stream in AppearanceCharacteristics shall be one of objects XObjectFormType1, XObjectImage</description>
			<test>IHasTypeStream != true || I_size == 1</test>
			<error>
				<message>Entry I with type Stream in AppearanceCharacteristics is not one of objects XObjectFormType1, XObjectImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9939"/>
			<description>Entry I in AppearanceCharacteristics shall have type Stream</description>
			<test>containsI == false || IHasTypeStream == true</test>
			<error>
				<message>Entry I in AppearanceCharacteristics is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="10" testNumber="9940"/>
			<description>Entry I with type Stream in AppearanceCharacteristics shall be indirect</description>
			<test>IHasTypeStream != true || isIIndirect == true</test>
			<error>
				<message>Entry I with type Stream in AppearanceCharacteristics is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9941"/>
			<description>Entry IF with type Dictionary in AppearanceCharacteristics shall be object IconFit</description>
			<test>IFHasTypeDictionary != true || IF_size == 1</test>
			<error>
				<message>Entry IF with type Dictionary in AppearanceCharacteristics is not object IconFit</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9942"/>
			<description>Entry IF in AppearanceCharacteristics shall have type Dictionary</description>
			<test>containsIF == false || IFHasTypeDictionary == true</test>
			<error>
				<message>Entry IF in AppearanceCharacteristics is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9943"/>
			<description>Entry IX with type Stream in AppearanceCharacteristics shall be one of objects XObjectFormType1, XObjectImage</description>
			<test>IXHasTypeStream != true || IX_size == 1</test>
			<error>
				<message>Entry IX with type Stream in AppearanceCharacteristics is not one of objects XObjectFormType1, XObjectImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9944"/>
			<description>Entry IX in AppearanceCharacteristics shall have type Stream</description>
			<test>containsIX == false || IXHasTypeStream == true</test>
			<error>
				<message>Entry IX in AppearanceCharacteristics is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="10" testNumber="9945"/>
			<description>Entry IX with type Stream in AppearanceCharacteristics shall be indirect</description>
			<test>IXHasTypeStream != true || isIXIndirect == true</test>
			<error>
				<message>Entry IX with type Stream in AppearanceCharacteristics is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9946"/>
			<description>Entry R in AppearanceCharacteristics shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in AppearanceCharacteristics is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9947"/>
			<description>Entry RC in AppearanceCharacteristics shall have type StringText</description>
			<test>containsRC == false || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AppearanceCharacteristics is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="17" testNumber="9948"/>
			<description>Entry RI with type Stream in AppearanceCharacteristics shall be one of objects XObjectFormType1, XObjectImage</description>
			<test>RIHasTypeStream != true || RI_size == 1</test>
			<error>
				<message>Entry RI with type Stream in AppearanceCharacteristics is not one of objects XObjectFormType1, XObjectImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9949"/>
			<description>Entry RI in AppearanceCharacteristics shall have type Stream</description>
			<test>containsRI == false || RIHasTypeStream == true</test>
			<error>
				<message>Entry RI in AppearanceCharacteristics is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="10" testNumber="9950"/>
			<description>Entry RI with type Stream in AppearanceCharacteristics shall be indirect</description>
			<test>RIHasTypeStream != true || isRIIndirect == true</test>
			<error>
				<message>Entry RI with type Stream in AppearanceCharacteristics is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="9951"/>
			<description>Entry TP in AppearanceCharacteristics shall have type Integer</description>
			<test>containsTP == false || TPHasTypeInteger == true</test>
			<error>
				<message>Entry TP in AppearanceCharacteristics is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_5" clause="6" testNumber="9952"/>
			<description>Entry TP with type Integer in AppearanceCharacteristics shall have one of values: 0, 1, 2, 3, 4, 5, 6</description>
			<test>TPHasTypeInteger != true || TPIntegerValue == 0 || TPIntegerValue == 1 || TPIntegerValue == 2 || TPIntegerValue == 3 || TPIntegerValue == 4 || TPIntegerValue == 5 || TPIntegerValue == 6</test>
			<error>
				<message>Entry TP with type Integer in AppearanceCharacteristics has incorrect value %2 instead of 0, 1, 2, 3, 4, 5, 6</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TPIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_5" clause="1" testNumber="10033"/>
			<description>AppearancePrinterMark shall not contain entries except D, N, R</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R').length == 0</test>
			<error>
				<message>AppearancePrinterMark contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10034"/>
			<description>Entry D with type Stream in AppearancePrinterMark shall be object XObjectFormPrinterMark</description>
			<test>DHasTypeStream != true || D_size == 1</test>
			<error>
				<message>Entry D with type Stream in AppearancePrinterMark is not object XObjectFormPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10035"/>
			<description>Entry D with type Dictionary in AppearancePrinterMark shall be object AppearancePrinterMarkSubDict</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in AppearancePrinterMark is not object AppearancePrinterMarkSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10036"/>
			<description>Entry D in AppearancePrinterMark shall have one of types: Stream, Dictionary</description>
			<test>containsD == false || DHasTypeStream == true || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in AppearancePrinterMark is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_5" clause="10" testNumber="10037"/>
			<description>Entry D with type Stream in AppearancePrinterMark shall be indirect</description>
			<test>DHasTypeStream != true || isDIndirect == true</test>
			<error>
				<message>Entry D with type Stream in AppearancePrinterMark is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10038"/>
			<description>Entry N with type Stream in AppearancePrinterMark shall be object XObjectFormPrinterMark</description>
			<test>NHasTypeStream != true || N_size == 1</test>
			<error>
				<message>Entry N with type Stream in AppearancePrinterMark is not object XObjectFormPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10039"/>
			<description>Entry N with type Dictionary in AppearancePrinterMark shall be object AppearancePrinterMarkSubDict</description>
			<test>NHasTypeDictionary != true || N_size == 1</test>
			<error>
				<message>Entry N with type Dictionary in AppearancePrinterMark is not object AppearancePrinterMarkSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10040"/>
			<description>Entry N in AppearancePrinterMark shall have one of types: Stream, Dictionary</description>
			<test>containsN == false || NHasTypeStream == true || NHasTypeDictionary == true</test>
			<error>
				<message>Entry N in AppearancePrinterMark is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_5" clause="7" testNumber="10041"/>
			<description>Entry N in AppearancePrinterMark is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in AppearancePrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_5" clause="10" testNumber="10042"/>
			<description>Entry N with type Stream in AppearancePrinterMark shall be indirect</description>
			<test>NHasTypeStream != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Stream in AppearancePrinterMark is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10043"/>
			<description>Entry R with type Stream in AppearancePrinterMark shall be object XObjectFormPrinterMark</description>
			<test>RHasTypeStream != true || R_size == 1</test>
			<error>
				<message>Entry R with type Stream in AppearancePrinterMark is not object XObjectFormPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10044"/>
			<description>Entry R with type Dictionary in AppearancePrinterMark shall be object AppearancePrinterMarkSubDict</description>
			<test>RHasTypeDictionary != true || R_size == 1</test>
			<error>
				<message>Entry R with type Dictionary in AppearancePrinterMark is not object AppearancePrinterMarkSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10045"/>
			<description>Entry R in AppearancePrinterMark shall have one of types: Stream, Dictionary</description>
			<test>containsR == false || RHasTypeStream == true || RHasTypeDictionary == true</test>
			<error>
				<message>Entry R in AppearancePrinterMark is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_5" clause="10" testNumber="10046"/>
			<description>Entry R with type Stream in AppearancePrinterMark shall be indirect</description>
			<test>RHasTypeStream != true || isRIndirect == true</test>
			<error>
				<message>Entry R with type Stream in AppearancePrinterMark is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMarkSubDictEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10092"/>
			<description>Entry with type Stream in AppearancePrinterMarkSubDict shall be object XObjectFormPrinterMark</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in AppearancePrinterMarkSubDict is not object XObjectFormPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMarkSubDictEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10093"/>
			<description>Entry in AppearancePrinterMarkSubDict shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in AppearancePrinterMarkSubDict is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMarkSubDictEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="10094"/>
			<description>Entry with type Stream in AppearancePrinterMarkSubDict shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in AppearancePrinterMarkSubDict is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceSubDictEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10110"/>
			<description>Entry with type Stream in AppearanceSubDict shall be object XObjectFormType1</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in AppearanceSubDict is not object XObjectFormType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceSubDictEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10111"/>
			<description>Entry in AppearanceSubDict shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in AppearanceSubDict is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceSubDictEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="10112"/>
			<description>Entry with type Stream in AppearanceSubDict shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in AppearanceSubDict is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_5" clause="1" testNumber="10150"/>
			<description>AppearanceTrapNet shall not contain entries except D, N, R</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R').length == 0</test>
			<error>
				<message>AppearanceTrapNet contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10151"/>
			<description>Entry D with type Stream in AppearanceTrapNet shall be object XObjectFormTrapNet</description>
			<test>DHasTypeStream != true || D_size == 1</test>
			<error>
				<message>Entry D with type Stream in AppearanceTrapNet is not object XObjectFormTrapNet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10152"/>
			<description>Entry D with type Dictionary in AppearanceTrapNet shall be object AppearanceTrapNetSubDict</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in AppearanceTrapNet is not object AppearanceTrapNetSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10153"/>
			<description>Entry D in AppearanceTrapNet shall have one of types: Stream, Dictionary</description>
			<test>containsD == false || DHasTypeStream == true || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in AppearanceTrapNet is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_5" clause="10" testNumber="10154"/>
			<description>Entry D with type Stream in AppearanceTrapNet shall be indirect</description>
			<test>DHasTypeStream != true || isDIndirect == true</test>
			<error>
				<message>Entry D with type Stream in AppearanceTrapNet is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10155"/>
			<description>Entry N with type Stream in AppearanceTrapNet shall be object XObjectFormTrapNet</description>
			<test>NHasTypeStream != true || N_size == 1</test>
			<error>
				<message>Entry N with type Stream in AppearanceTrapNet is not object XObjectFormTrapNet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10156"/>
			<description>Entry N with type Dictionary in AppearanceTrapNet shall be object AppearanceTrapNetSubDict</description>
			<test>NHasTypeDictionary != true || N_size == 1</test>
			<error>
				<message>Entry N with type Dictionary in AppearanceTrapNet is not object AppearanceTrapNetSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10157"/>
			<description>Entry N in AppearanceTrapNet shall have one of types: Stream, Dictionary</description>
			<test>containsN == false || NHasTypeStream == true || NHasTypeDictionary == true</test>
			<error>
				<message>Entry N in AppearanceTrapNet is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_5" clause="7" testNumber="10158"/>
			<description>Entry N in AppearanceTrapNet is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in AppearanceTrapNet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_5" clause="10" testNumber="10159"/>
			<description>Entry N with type Stream in AppearanceTrapNet shall be indirect</description>
			<test>NHasTypeStream != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Stream in AppearanceTrapNet is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10160"/>
			<description>Entry R with type Stream in AppearanceTrapNet shall be object XObjectFormTrapNet</description>
			<test>RHasTypeStream != true || R_size == 1</test>
			<error>
				<message>Entry R with type Stream in AppearanceTrapNet is not object XObjectFormTrapNet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10161"/>
			<description>Entry R with type Dictionary in AppearanceTrapNet shall be object AppearanceTrapNetSubDict</description>
			<test>RHasTypeDictionary != true || R_size == 1</test>
			<error>
				<message>Entry R with type Dictionary in AppearanceTrapNet is not object AppearanceTrapNetSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10162"/>
			<description>Entry R in AppearanceTrapNet shall have one of types: Stream, Dictionary</description>
			<test>containsR == false || RHasTypeStream == true || RHasTypeDictionary == true</test>
			<error>
				<message>Entry R in AppearanceTrapNet is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_5" clause="10" testNumber="10163"/>
			<description>Entry R with type Stream in AppearanceTrapNet shall be indirect</description>
			<test>RHasTypeStream != true || isRIndirect == true</test>
			<error>
				<message>Entry R with type Stream in AppearanceTrapNet is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNetSubDictEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10212"/>
			<description>Entry with type Stream in AppearanceTrapNetSubDict shall be object XObjectFormTrapNet</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in AppearanceTrapNetSubDict is not object XObjectFormTrapNet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNetSubDictEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10213"/>
			<description>Entry in AppearanceTrapNetSubDict shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in AppearanceTrapNetSubDict is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNetSubDictEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="10214"/>
			<description>Entry with type Stream in AppearanceTrapNetSubDict shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in AppearanceTrapNetSubDict is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_5" clause="2" testNumber="10343"/>
			<description>ArrayOf4Functions shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf4Functions contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10344"/>
			<description>Entry 0 with type Stream in ArrayOf4Functions shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry0HasTypeStream != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Stream in ArrayOf4Functions is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10345"/>
			<description>Entry 0 with type Dictionary in ArrayOf4Functions shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOf4Functions is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10346"/>
			<description>Entry 0 in ArrayOf4Functions shall have one of types: Stream, Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeStream == true || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in ArrayOf4Functions is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_5" clause="10" testNumber="10347"/>
			<description>Entry 0 with type Stream in ArrayOf4Functions shall be indirect</description>
			<test>entry0HasTypeStream != true || isentry0Indirect == true</test>
			<error>
				<message>Entry 0 with type Stream in ArrayOf4Functions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10348"/>
			<description>Entry 1 with type Stream in ArrayOf4Functions shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry1HasTypeStream != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Stream in ArrayOf4Functions is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10349"/>
			<description>Entry 1 with type Dictionary in ArrayOf4Functions shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry1HasTypeDictionary != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Dictionary in ArrayOf4Functions is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10350"/>
			<description>Entry 1 in ArrayOf4Functions shall have one of types: Stream, Dictionary</description>
			<test>size &lt;= 1 || entry1HasTypeStream == true || entry1HasTypeDictionary == true</test>
			<error>
				<message>Entry 1 in ArrayOf4Functions is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_5" clause="10" testNumber="10351"/>
			<description>Entry 1 with type Stream in ArrayOf4Functions shall be indirect</description>
			<test>entry1HasTypeStream != true || isentry1Indirect == true</test>
			<error>
				<message>Entry 1 with type Stream in ArrayOf4Functions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10352"/>
			<description>Entry 2 with type Stream in ArrayOf4Functions shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry2HasTypeStream != true || entry2_size == 1</test>
			<error>
				<message>Entry 2 with type Stream in ArrayOf4Functions is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10353"/>
			<description>Entry 2 with type Dictionary in ArrayOf4Functions shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry2HasTypeDictionary != true || entry2_size == 1</test>
			<error>
				<message>Entry 2 with type Dictionary in ArrayOf4Functions is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10354"/>
			<description>Entry 2 in ArrayOf4Functions shall have one of types: Stream, Dictionary</description>
			<test>size &lt;= 2 || entry2HasTypeStream == true || entry2HasTypeDictionary == true</test>
			<error>
				<message>Entry 2 in ArrayOf4Functions is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_5" clause="10" testNumber="10355"/>
			<description>Entry 2 with type Stream in ArrayOf4Functions shall be indirect</description>
			<test>entry2HasTypeStream != true || isentry2Indirect == true</test>
			<error>
				<message>Entry 2 with type Stream in ArrayOf4Functions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10356"/>
			<description>Entry 3 with type Stream in ArrayOf4Functions shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry3HasTypeStream != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Stream in ArrayOf4Functions is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10357"/>
			<description>Entry 3 with type Dictionary in ArrayOf4Functions shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry3HasTypeDictionary != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Dictionary in ArrayOf4Functions is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10358"/>
			<description>Entry 3 in ArrayOf4Functions shall have one of types: Stream, Dictionary</description>
			<test>size &lt;= 3 || entry3HasTypeStream == true || entry3HasTypeDictionary == true</test>
			<error>
				<message>Entry 3 in ArrayOf4Functions is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_5" clause="10" testNumber="10359"/>
			<description>Entry 3 with type Stream in ArrayOf4Functions shall be indirect</description>
			<test>entry3HasTypeStream != true || isentry3Indirect == true</test>
			<error>
				<message>Entry 3 with type Stream in ArrayOf4Functions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionHideAnnotsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10423"/>
			<description>Entry with type Dictionary in ArrayOfActionHideAnnots shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotPolyLine, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotTrapNetwork</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfActionHideAnnots is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotPolyLine, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotTrapNetwork</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionHideAnnotsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10424"/>
			<description>Entry in ArrayOfActionHideAnnots shall have one of types: StringText, Dictionary</description>
			<test>HasTypeStringText == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfActionHideAnnots is not one of types: StringText, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionHideAnnotsEntry">
			<id specification="ISO_32000_1_5" clause="9" testNumber="10425"/>
			<description>Entry with type StringText in ArrayOfActionHideAnnots shall satisfy special case: fn:Eval(fn:IsFieldName(@*))</description>
			<test>HasTypeStringText != true || (IsFieldName == true)</test>
			<error>
				<message>Entry %1 with type StringText in ArrayOfActionHideAnnots does not satisfy special case: fn:Eval(fn:IsFieldName(@*))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionHideAnnotsEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="10426"/>
			<description>Entry with type Dictionary in ArrayOfActionHideAnnots shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfActionHideAnnots is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10445"/>
			<description>Entry with type Dictionary in ArrayOfActions shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfActions is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10446"/>
			<description>Entry in ArrayOfActions shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfActions is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAnnotStatesEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10455"/>
			<description>Entry in ArrayOfAnnotStates shall have one of types: Name, Null</description>
			<test>HasTypeName == true || HasTypeNull == true</test>
			<error>
				<message>Entry %1 in ArrayOfAnnotStates is not one of types: Name, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAnnotsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10469"/>
			<description>Entry with type Dictionary in ArrayOfAnnots shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotPolyLine, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotTrapNetwork</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfAnnots is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotPolyLine, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotTrapNetwork</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAnnotsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10470"/>
			<description>Entry in ArrayOfAnnots shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfAnnots is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysInkListEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10481"/>
			<description>Entry with type Array in ArrayOfArraysInkList shall be object ArrayOfNumbersGeneral</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfArraysInkList is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysInkListEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10482"/>
			<description>Entry in ArrayOfArraysInkList shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %1 in ArrayOfArraysInkList is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysRBGroupsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10496"/>
			<description>Entry with type Array in ArrayOfArraysRBGroups shall be object ArrayOfOptContentGroups</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfArraysRBGroups is not object ArrayOfOptContentGroups</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysRBGroupsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10497"/>
			<description>Entry in ArrayOfArraysRBGroups shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %1 in ArrayOfArraysRBGroups is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysRBGroupsEntry">
			<id specification="ISO_32000_1_5" clause="9" testNumber="10498"/>
			<description>Entry with type Array in ArrayOfArraysRBGroups shall satisfy special case: fn:Eval(fn:ArrayLength(*) &gt; 0)</description>
			<test>HasTypeArray != true || (ArraySize &gt; 0)</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfArraysRBGroups does not satisfy special case: fn:Eval(fn:ArrayLength(*) &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysURLStringsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10512"/>
			<description>Entry with type Array in ArrayOfArraysURLStrings shall be object ArrayOfURLStrings</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfArraysURLStrings is not object ArrayOfURLStrings</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysURLStringsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10513"/>
			<description>Entry in ArrayOfArraysURLStrings shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %1 in ArrayOfArraysURLStrings is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeObjectsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10530"/>
			<description>Entry with type Dictionary in ArrayOfAttributeObjects shall be object StructureAttributesDict</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfAttributeObjects is not object StructureAttributesDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeObjectsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10531"/>
			<description>Entry in ArrayOfAttributeObjects shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfAttributeObjects is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_5" clause="4" testNumber="10552"/>
			<description>ArrayOfAttributeRevisionsSubArray shall contain at least 1 element</description>
			<test>size &gt;= 1</test>
			<error>
				<message>ArrayOfAttributeRevisionsSubArray contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10553"/>
			<description>Entry 0 with type Stream in ArrayOfAttributeRevisionsSubArray shall be object Stream</description>
			<test>entry0HasTypeStream != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Stream in ArrayOfAttributeRevisionsSubArray is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10554"/>
			<description>Entry 0 with type Dictionary in ArrayOfAttributeRevisionsSubArray shall be object StructureAttributesDict</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOfAttributeRevisionsSubArray is not object StructureAttributesDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10555"/>
			<description>Entry 0 in ArrayOfAttributeRevisionsSubArray shall have one of types: Stream, Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeStream == true || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in ArrayOfAttributeRevisionsSubArray is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_5" clause="10" testNumber="10556"/>
			<description>Entry 0 with type Stream in ArrayOfAttributeRevisionsSubArray shall be indirect</description>
			<test>entry0HasTypeStream != true || isentry0Indirect == true</test>
			<error>
				<message>Entry 0 with type Stream in ArrayOfAttributeRevisionsSubArray is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10557"/>
			<description>Entry 1 in ArrayOfAttributeRevisionsSubArray shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOfAttributeRevisionsSubArray is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_5" clause="14" testNumber="10558"/>
			<description>Entry 1 with type Integer in ArrayOfAttributeRevisionsSubArray shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeInteger != true || entry1IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfAttributeRevisionsSubArray does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBeadsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10592"/>
			<description>Entry with type Dictionary in ArrayOfBeads shall be one of objects BeadFirst, Bead</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfBeads is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBeadsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10593"/>
			<description>Entry in ArrayOfBeads shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfBeads is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBeadsEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="10594"/>
			<description>Entry with type Dictionary in ArrayOfBeads shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfBeads is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBlendModesEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10607"/>
			<description>Entry in ArrayOfBlendModes shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfBlendModes is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBlendModesEntry">
			<id specification="ISO_32000_1_5" clause="19" testNumber="10608"/>
			<description>Entry with type Name in ArrayOfBlendModes shouldn't have deprecated value "Compatible"</description>
			<test>NameValue != "Compatible"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfBlendModes has deprecated value "Compatible"</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBlendModesEntry">
			<id specification="ISO_32000_1_5" clause="13" testNumber="10609"/>
			<description>Entry with type Name in ArrayOfBlendModes shall have one of values: Screen, ColorDodge, Saturation, Color, Luminosity, Darken, Difference, Compatible, Normal, SoftLight, ColorBurn, Multiply, Exclusion, HardLight, Hue, Overlay, Lighten</description>
			<test>HasTypeName != true || NameValue == "Compatible" || NameValue == "Normal" || NameValue == "Multiply" || NameValue == "Screen" || NameValue == "Difference" || NameValue == "Darken" || NameValue == "Lighten" || NameValue == "ColorDodge" || NameValue == "ColorBurn" || NameValue == "Exclusion" || NameValue == "HardLight" || NameValue == "Overlay" || NameValue == "SoftLight" || NameValue == "Luminosity" || NameValue == "Hue" || NameValue == "Saturation" || NameValue == "Color"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfBlendModes has incorrect value %2 instead of Screen, ColorDodge, Saturation, Color, Luminosity, Darken, Difference, Compatible, Normal, SoftLight, ColorBurn, Multiply, Exclusion, HardLight, Hue, Overlay, Lighten</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCIDGlyphMetricsW2Entry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10630"/>
			<description>Entry with type Array in ArrayOfCIDGlyphMetricsW2 shall be object ArrayOfNumbersGeneral</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfCIDGlyphMetricsW2 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCIDGlyphMetricsW2Entry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10631"/>
			<description>Entry in ArrayOfCIDGlyphMetricsW2 shall have one of types: Array, Number, Integer</description>
			<test>HasTypeArray == true || HasTypeNumber == true || HasTypeInteger == true</test>
			<error>
				<message>Entry %1 in ArrayOfCIDGlyphMetricsW2 is not one of types: Array, Number, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCIDGlyphMetricsW2Entry">
			<id specification="ISO_32000_1_5" clause="9" testNumber="10632"/>
			<description>Entry with type Array in ArrayOfCIDGlyphMetricsW2 shall satisfy special case: fn:Eval((fn:ArrayLength(*) mod 3) == 0)</description>
			<test>HasTypeArray != true || ((ArraySize % 3) == 0)</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfCIDGlyphMetricsW2 does not satisfy special case: fn:Eval((fn:ArrayLength(*) mod 3) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCIDGlyphMetricsWEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10648"/>
			<description>Entry with type Array in ArrayOfCIDGlyphMetricsW shall be object ArrayOfNumbersGeneral</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfCIDGlyphMetricsW is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCIDGlyphMetricsWEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10649"/>
			<description>Entry in ArrayOfCIDGlyphMetricsW shall have one of types: Array, Number, Integer</description>
			<test>HasTypeArray == true || HasTypeNumber == true || HasTypeInteger == true</test>
			<error>
				<message>Entry %1 in ArrayOfCIDGlyphMetricsW is not one of types: Array, Number, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfClassNamesRevisionsSubArray">
			<id specification="ISO_32000_1_5" clause="4" testNumber="10664"/>
			<description>ArrayOfClassNamesRevisionsSubArray shall contain at least 1 element</description>
			<test>size &gt;= 1</test>
			<error>
				<message>ArrayOfClassNamesRevisionsSubArray contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfClassNamesRevisionsSubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10665"/>
			<description>Entry 0 in ArrayOfClassNamesRevisionsSubArray shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ArrayOfClassNamesRevisionsSubArray is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfClassNamesRevisionsSubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10666"/>
			<description>Entry 1 in ArrayOfClassNamesRevisionsSubArray shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOfClassNamesRevisionsSubArray is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfClassNamesRevisionsSubArray">
			<id specification="ISO_32000_1_5" clause="14" testNumber="10667"/>
			<description>Entry 1 with type Integer in ArrayOfClassNamesRevisionsSubArray shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeInteger != true || entry1IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfClassNamesRevisionsSubArray does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCompressionFilterNamesEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10690"/>
			<description>Entry in ArrayOfCompressionFilterNames shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfCompressionFilterNames is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCompressionFilterNamesEntry">
			<id specification="ISO_32000_1_5" clause="6" testNumber="10691"/>
			<description>Entry with type Name in ArrayOfCompressionFilterNames shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>HasTypeName != true || NameValue == "ASCIIHexDecode" || NameValue == "ASCII85Decode" || NameValue == "LZWDecode" || NameValue == "FlateDecode" || NameValue == "RunLengthDecode" || NameValue == "Crypt"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfCompressionFilterNames has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDashPatternsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10716"/>
			<description>Entry in ArrayOfDashPatterns shall have type Number</description>
			<test>HasTypeNumber == true</test>
			<error>
				<message>Entry %1 in ArrayOfDashPatterns is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDecodeParamsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10730"/>
			<description>Entry with type Dictionary in ArrayOfDecodeParams shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfDecodeParams is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDecodeParamsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10731"/>
			<description>Entry in ArrayOfDecodeParams shall have one of types: Null, Dictionary</description>
			<test>HasTypeNull == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfDecodeParams is not one of types: Null, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDescendantFonts">
			<id specification="ISO_32000_1_5" clause="2" testNumber="10747"/>
			<description>ArrayOfDescendantFonts shall contain exactly 1 element</description>
			<test>size == 1</test>
			<error>
				<message>ArrayOfDescendantFonts contains %1 element(s) instead of 1</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDescendantFonts">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10748"/>
			<description>Entry 0 with type Dictionary in ArrayOfDescendantFonts shall be one of objects FontCIDType0, FontCIDType2</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOfDescendantFonts is not one of objects FontCIDType0, FontCIDType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDescendantFonts">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10749"/>
			<description>Entry 0 in ArrayOfDescendantFonts shall have type Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in ArrayOfDescendantFonts is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDifferencesEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10767"/>
			<description>Entry in ArrayOfDifferences shall have one of types: Integer, Name</description>
			<test>HasTypeInteger == true || HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfDifferences is not one of types: Integer, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_5" clause="2" testNumber="10794"/>
			<description>ArrayOfDuration shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfDuration contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10795"/>
			<description>Entry 0 in ArrayOfDuration shall have one of types: StringByte, Integer</description>
			<test>size &lt;= 0 || entry0HasTypeStringByte == true || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOfDuration is not one of types: StringByte, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_5" clause="14" testNumber="10796"/>
			<description>Entry 0 with type StringByte in ArrayOfDuration shall satisfy possible value predicate: fn:Eval(fn:StringLength(0) == 8)</description>
			<test>entry0HasTypeStringByte != true || entry0StringSize == 8</test>
			<error>
				<message>Entry 0 with type StringByte in ArrayOfDuration does not satisfy possible value predicate: fn:Eval(fn:StringLength(0) == 8)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_5" clause="14" testNumber="10797"/>
			<description>Entry 0 with type Integer in ArrayOfDuration shall satisfy possible value predicate: fn:Eval(@0 &gt; 0)</description>
			<test>entry0HasTypeInteger != true || entry0IntegerValue &gt; 0</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOfDuration does not satisfy possible value predicate: fn:Eval(@0 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10798"/>
			<description>Entry 1 in ArrayOfDuration shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOfDuration is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_5" clause="14" testNumber="10799"/>
			<description>Entry 1 with type Integer in ArrayOfDuration shall satisfy possible value predicate: fn:Eval(@1 &gt; 0)</description>
			<test>entry1HasTypeInteger != true || entry1IntegerValue &gt; 0</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfDuration does not satisfy possible value predicate: fn:Eval(@1 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldChoiceOptEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10820"/>
			<description>Entry with type Array in ArrayOfFieldChoiceOpt shall be object ArrayOf_2StringsText</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfFieldChoiceOpt is not object ArrayOf_2StringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldChoiceOptEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10821"/>
			<description>Entry in ArrayOfFieldChoiceOpt shall have one of types: Array, StringText</description>
			<test>HasTypeArray == true || HasTypeStringText == true</test>
			<error>
				<message>Entry %1 in ArrayOfFieldChoiceOpt is not one of types: Array, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldIDEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10834"/>
			<description>Entry with type Dictionary in ArrayOfFieldID shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfFieldID is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldIDEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10835"/>
			<description>Entry in ArrayOfFieldID shall have one of types: StringText, Dictionary</description>
			<test>HasTypeStringText == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfFieldID is not one of types: StringText, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10848"/>
			<description>Entry with type Dictionary in ArrayOfFields shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidget</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfFields is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidget</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10849"/>
			<description>Entry in ArrayOfFields shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfFields is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFilterNamesEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10868"/>
			<description>Entry in ArrayOfFilterNames shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfFilterNames is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFilterNamesEntry">
			<id specification="ISO_32000_1_5" clause="6" testNumber="10869"/>
			<description>Entry with type Name in ArrayOfFilterNames shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>HasTypeName != true || NameValue == "ASCIIHexDecode" || NameValue == "ASCII85Decode" || NameValue == "LZWDecode" || NameValue == "FlateDecode" || NameValue == "RunLengthDecode" || NameValue == "CCITTFaxDecode" || NameValue == "JBIG2Decode" || NameValue == "DCTDecode" || NameValue == "JPXDecode" || NameValue == "Crypt"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfFilterNames has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_5" clause="2" testNumber="10886"/>
			<description>ArrayOfFontAndSize shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfFontAndSize contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10887"/>
			<description>Entry 0 with type Dictionary in ArrayOfFontAndSize shall be one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOfFontAndSize is not one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10888"/>
			<description>Entry 0 in ArrayOfFontAndSize shall have type Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in ArrayOfFontAndSize is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_5" clause="10" testNumber="10889"/>
			<description>Entry 0 with type Dictionary in ArrayOfFontAndSize shall be indirect</description>
			<test>entry0HasTypeDictionary != true || isentry0Indirect == true</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOfFontAndSize is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10890"/>
			<description>Entry 1 in ArrayOfFontAndSize shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfFontAndSize is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10910"/>
			<description>Entry with type Dictionary in ArrayOfFonts shall be one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfFonts is not one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10911"/>
			<description>Entry in ArrayOfFonts shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfFonts is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFunctionsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10929"/>
			<description>Entry with type Stream in ArrayOfFunctions shall be one of objects FunctionType0, FunctionType4</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfFunctions is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFunctionsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10930"/>
			<description>Entry with type Dictionary in ArrayOfFunctions shall be one of objects FunctionType2, FunctionType3</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfFunctions is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFunctionsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10931"/>
			<description>Entry in ArrayOfFunctions shall have one of types: Stream, Dictionary</description>
			<test>HasTypeStream == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfFunctions is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFunctionsEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="10932"/>
			<description>Entry with type Stream in ArrayOfFunctions shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfFunctions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfGSPDashPatterns">
			<id specification="ISO_32000_1_5" clause="2" testNumber="10953"/>
			<description>ArrayOfGSPDashPatterns shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfGSPDashPatterns contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfGSPDashPatterns">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10954"/>
			<description>Entry 0 with type Array in ArrayOfGSPDashPatterns shall be object ArrayOfDashPatterns</description>
			<test>entry0HasTypeArray != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Array in ArrayOfGSPDashPatterns is not object ArrayOfDashPatterns</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfGSPDashPatterns">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10955"/>
			<description>Entry 0 in ArrayOfGSPDashPatterns shall have type Array</description>
			<test>size &lt;= 0 || entry0HasTypeArray == true</test>
			<error>
				<message>Entry 0 in ArrayOfGSPDashPatterns is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfGSPDashPatterns">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10956"/>
			<description>Entry 1 in ArrayOfGSPDashPatterns shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfGSPDashPatterns is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfImageAlternatesEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10973"/>
			<description>Entry with type Dictionary in ArrayOfImageAlternates shall be object AlternateImage</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfImageAlternates is not object AlternateImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfImageAlternatesEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10974"/>
			<description>Entry in ArrayOfImageAlternates shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfImageAlternates is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfIntegersGeneralEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10994"/>
			<description>Entry in ArrayOfIntegersGeneral shall have type Integer</description>
			<test>HasTypeInteger == true</test>
			<error>
				<message>Entry %1 in ArrayOfIntegersGeneral is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfMediaPlayerInfoEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="10998"/>
			<description>Entry with type Dictionary in ArrayOfMediaPlayerInfo shall be object MediaPlayerInfo</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfMediaPlayerInfo is not object MediaPlayerInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfMediaPlayerInfoEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="10999"/>
			<description>Entry in ArrayOfMediaPlayerInfo shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfMediaPlayerInfo is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForProcSetEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11025"/>
			<description>Entry in ArrayOfNamesForProcSet shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfNamesForProcSet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForProcSetEntry">
			<id specification="ISO_32000_1_5" clause="5" testNumber="11026"/>
			<description>Entry in ArrayOfNamesForProcSet is deprecated since PDF 1.4</description>
			<test>false</test>
			<error>
				<message>Entry %1 in ArrayOfNamesForProcSet is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForProcSetEntry">
			<id specification="ISO_32000_1_5" clause="6" testNumber="11027"/>
			<description>Entry with type Name in ArrayOfNamesForProcSet shall have one of values: ImageI, PDF, ImageC, ImageB, Text</description>
			<test>HasTypeName != true || NameValue == "PDF" || NameValue == "Text" || NameValue == "ImageB" || NameValue == "ImageC" || NameValue == "ImageI"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfNamesForProcSet has incorrect value %2 instead of ImageI, PDF, ImageC, ImageB, Text</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesGeneralEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11039"/>
			<description>Entry in ArrayOfNamesGeneral shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfNamesGeneral is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNonNegativeIntegersGeneralEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11053"/>
			<description>Entry in ArrayOfNonNegativeIntegersGeneral shall have type Integer</description>
			<test>HasTypeInteger == true</test>
			<error>
				<message>Entry %1 in ArrayOfNonNegativeIntegersGeneral is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNonNegativeIntegersGeneralEntry">
			<id specification="ISO_32000_1_5" clause="9" testNumber="11054"/>
			<description>Entry with type Integer in ArrayOfNonNegativeIntegersGeneral shall satisfy special case: fn:Eval(@* &gt;= 0)</description>
			<test>HasTypeInteger != true || (IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry %1 with type Integer in ArrayOfNonNegativeIntegersGeneral does not satisfy special case: fn:Eval(@* &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNumbersGeneralEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11072"/>
			<description>Entry in ArrayOfNumbersGeneral shall have type Number</description>
			<test>HasTypeNumber == true</test>
			<error>
				<message>Entry %1 in ArrayOfNumbersGeneral is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCConfigEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11076"/>
			<description>Entry with type Dictionary in ArrayOfOCConfig shall be object OptContentConfig</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOCConfig is not object OptContentConfig</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCConfigEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11077"/>
			<description>Entry in ArrayOfOCConfig shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfOCConfig is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11084"/>
			<description>Entry with type Dictionary in ArrayOfOCG shall be object OptContentGroup</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOCG is not object OptContentGroup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11085"/>
			<description>Entry in ArrayOfOCG shall have one of types: Null, Dictionary</description>
			<test>HasTypeNull == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfOCG is not one of types: Null, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGStateEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11092"/>
			<description>Entry with type Dictionary in ArrayOfOCGState shall be object OptContentGroup</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOCGState is not object OptContentGroup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGStateEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11093"/>
			<description>Entry in ArrayOfOCGState shall have one of types: Name, Dictionary</description>
			<test>HasTypeName == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfOCGState is not one of types: Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGStateEntry">
			<id specification="ISO_32000_1_5" clause="6" testNumber="11094"/>
			<description>Entry with type Name in ArrayOfOCGState shall have one of values: Toggle, OFF, ON</description>
			<test>HasTypeName != true || NameValue == "ON" || NameValue == "OFF" || NameValue == "Toggle"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfOCGState has incorrect value %2 instead of Toggle, OFF, ON</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGindirectEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11104"/>
			<description>Entry with type Dictionary in ArrayOfOCGindirect shall be object OptContentGroup</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOCGindirect is not object OptContentGroup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGindirectEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11105"/>
			<description>Entry in ArrayOfOCGindirect shall have one of types: Null, Dictionary</description>
			<test>HasTypeNull == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfOCGindirect is not one of types: Null, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGindirectEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="11106"/>
			<description>Entry with type Null in ArrayOfOCGindirect shall be indirect</description>
			<test>HasTypeNull != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Null in ArrayOfOCGindirect is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGindirectEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="11107"/>
			<description>Entry with type Dictionary in ArrayOfOCGindirect shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOCGindirect is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCUsageEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11120"/>
			<description>Entry with type Dictionary in ArrayOfOCUsage shall be object OptContentUsageApplication</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOCUsage is not object OptContentUsageApplication</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCUsageEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11121"/>
			<description>Entry in ArrayOfOCUsage shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfOCUsage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_5" clause="2" testNumber="11158"/>
			<description>ArrayOfOPI13Color shall contain exactly 5 elements</description>
			<test>size == 5</test>
			<error>
				<message>ArrayOfOPI13Color contains %1 element(s) instead of 5</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11159"/>
			<description>Entry 0 in ArrayOfOPI13Color shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOfOPI13Color is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_5" clause="14" testNumber="11160"/>
			<description>Entry 0 with type Number in ArrayOfOPI13Color shall satisfy possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</description>
			<test>entry0HasTypeNumber != true || (entry0NumberValue &gt;= 0) &amp;&amp; (entry0NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 0 with type Number in ArrayOfOPI13Color does not satisfy possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11161"/>
			<description>Entry 1 in ArrayOfOPI13Color shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfOPI13Color is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_5" clause="14" testNumber="11162"/>
			<description>Entry 1 with type Number in ArrayOfOPI13Color shall satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</description>
			<test>entry1HasTypeNumber != true || (entry1NumberValue &gt;= 0) &amp;&amp; (entry1NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 1 with type Number in ArrayOfOPI13Color does not satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11163"/>
			<description>Entry 2 in ArrayOfOPI13Color shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOfOPI13Color is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_5" clause="14" testNumber="11164"/>
			<description>Entry 2 with type Number in ArrayOfOPI13Color shall satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</description>
			<test>entry2HasTypeNumber != true || (entry2NumberValue &gt;= 0) &amp;&amp; (entry2NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 2 with type Number in ArrayOfOPI13Color does not satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11165"/>
			<description>Entry 3 in ArrayOfOPI13Color shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOfOPI13Color is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_5" clause="14" testNumber="11166"/>
			<description>Entry 3 with type Number in ArrayOfOPI13Color shall satisfy possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</description>
			<test>entry3HasTypeNumber != true || (entry3NumberValue &gt;= 0) &amp;&amp; (entry3NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 3 with type Number in ArrayOfOPI13Color does not satisfy possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11167"/>
			<description>Entry 4 in ArrayOfOPI13Color shall have type StringByte</description>
			<test>size &lt;= 4 || entry4HasTypeStringByte == true</test>
			<error>
				<message>Entry 4 in ArrayOfOPI13Color is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2Inks">
			<id specification="ISO_32000_1_5" clause="3" testNumber="11207"/>
			<description>ArrayOfOPI2Inks shall contain 1 + 2*n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 1</test>
			<error>
				<message>ArrayOfOPI2Inks contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2Inks">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11208"/>
			<description>Entry 0 in ArrayOfOPI2Inks shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ArrayOfOPI2Inks is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2Inks">
			<id specification="ISO_32000_1_5" clause="6" testNumber="11209"/>
			<description>Entry 0 with type Name in ArrayOfOPI2Inks shall have value monochrome</description>
			<test>entry0HasTypeName != true || entry0NameValue == "monochrome"</test>
			<error>
				<message>Entry 0 with type Name in ArrayOfOPI2Inks has incorrect value %2 instead of monochrome</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2InksSubArray">
			<id specification="ISO_32000_1_5" clause="2" testNumber="11231"/>
			<description>ArrayOfOPI2InksSubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfOPI2InksSubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2InksSubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11232"/>
			<description>Entry 0 in ArrayOfOPI2InksSubArray shall have type String</description>
			<test>size &lt;= 0 || entry0HasTypeString == true</test>
			<error>
				<message>Entry 0 in ArrayOfOPI2InksSubArray is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2InksSubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11233"/>
			<description>Entry 1 in ArrayOfOPI2InksSubArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfOPI2InksSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2InksSubArray">
			<id specification="ISO_32000_1_5" clause="14" testNumber="11234"/>
			<description>Entry 1 with type Number in ArrayOfOPI2InksSubArray shall satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</description>
			<test>entry1HasTypeNumber != true || (entry1NumberValue &gt;= 0) &amp;&amp; (entry1NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 1 with type Number in ArrayOfOPI2InksSubArray does not satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentGroupsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11247"/>
			<description>Entry with type Dictionary in ArrayOfOptContentGroups shall be object OptContentGroup</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOptContentGroups is not object OptContentGroup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentGroupsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11248"/>
			<description>Entry in ArrayOfOptContentGroups shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfOptContentGroups is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrderElementsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11255"/>
			<description>Entry with type Array in ArrayOfOptContentOrderElements shall be object ArrayOfOptContentOrders</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfOptContentOrderElements is not object ArrayOfOptContentOrders</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrderElementsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11256"/>
			<description>Entry with type Dictionary in ArrayOfOptContentOrderElements shall be object OptContentGroup</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOptContentOrderElements is not object OptContentGroup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrderElementsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11257"/>
			<description>Entry in ArrayOfOptContentOrderElements shall have one of types: Array, Dictionary</description>
			<test>HasTypeArray == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfOptContentOrderElements is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrders">
			<id specification="ISO_32000_1_5" clause="4" testNumber="11267"/>
			<description>ArrayOfOptContentOrders shall contain at least 1 element</description>
			<test>size &gt;= 1</test>
			<error>
				<message>ArrayOfOptContentOrders contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrders">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11268"/>
			<description>Entry 0 with type Dictionary in ArrayOfOptContentOrders shall be object OptContentGroup</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOfOptContentOrders is not object OptContentGroup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrders">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11269"/>
			<description>Entry 0 in ArrayOfOptContentOrders shall have one of types: StringText, Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeStringText == true || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in ArrayOfOptContentOrders is not one of types: StringText, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrdersEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11279"/>
			<description>Entry with type Dictionary in ArrayOfOptContentOrders shall be object OptContentGroup</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOptContentOrders is not object OptContentGroup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrdersEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11280"/>
			<description>Entry in ArrayOfOptContentOrders shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfOptContentOrders is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOutputIntentsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11289"/>
			<description>Entry with type Dictionary in ArrayOfOutputIntents shall be object OutputIntents</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOutputIntents is not object OutputIntents</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOutputIntentsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11290"/>
			<description>Entry in ArrayOfOutputIntents shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfOutputIntents is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPageTreeNodeKidsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11307"/>
			<description>Entry with type Dictionary in ArrayOfPageTreeNodeKids shall be one of objects PageTreeNode, PageObject</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfPageTreeNodeKids is not one of objects PageTreeNode, PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPageTreeNodeKidsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11308"/>
			<description>Entry in ArrayOfPageTreeNodeKids shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfPageTreeNodeKids is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPagesEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11323"/>
			<description>Entry with type Dictionary in ArrayOfPages shall be object PageObject</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfPages is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPagesEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11324"/>
			<description>Entry in ArrayOfPages shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfPages is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPagesEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="11325"/>
			<description>Entry with type Dictionary in ArrayOfPages shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfPages is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPagesEntry">
			<id specification="ISO_32000_1_5" clause="9" testNumber="11326"/>
			<description>Entry with type Dictionary in ArrayOfPages shall satisfy special case: fn:Eval(fn:IsPresent(*::SeparationInfo))</description>
			<test>HasTypeDictionary != true || ((containsAnySeparationInfo == true))</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfPages does not satisfy special case: fn:Eval(fn:IsPresent(*::SeparationInfo))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPoints">
			<id specification="ISO_32000_1_5" clause="3" testNumber="11348"/>
			<description>ArrayOfQuadPoints shall contain 8*n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 8 == 0</test>
			<error>
				<message>ArrayOfQuadPoints contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_5" clause="2" testNumber="11370"/>
			<description>ArrayOfQuadPointsSubArray shall contain exactly 8 elements</description>
			<test>size == 8</test>
			<error>
				<message>ArrayOfQuadPointsSubArray contains %1 element(s) instead of 8</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11371"/>
			<description>Entry 0 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11372"/>
			<description>Entry 1 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11373"/>
			<description>Entry 2 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11374"/>
			<description>Entry 3 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11375"/>
			<description>Entry 4 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11376"/>
			<description>Entry 5 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11377"/>
			<description>Entry 6 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 6 || entry6HasTypeNumber == true</test>
			<error>
				<message>Entry 6 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11378"/>
			<description>Entry 7 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 7 || entry7HasTypeNumber == true</test>
			<error>
				<message>Entry 7 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRenditionsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11406"/>
			<description>Entry with type Dictionary in ArrayOfRenditions shall be one of objects RenditionMedia, RenditionSelector</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfRenditions is not one of objects RenditionMedia, RenditionSelector</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRenditionsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11407"/>
			<description>Entry in ArrayOfRenditions shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfRenditions is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSignatureReferencesEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11438"/>
			<description>Entry with type Dictionary in ArrayOfSignatureReferences shall be one of objects SignatureReferenceDocMDP, SignatureReferenceFieldMDP, SignatureReferenceIdentity, SignatureReferenceUR</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfSignatureReferences is not one of objects SignatureReferenceDocMDP, SignatureReferenceFieldMDP, SignatureReferenceIdentity, SignatureReferenceUR</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSignatureReferencesEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11439"/>
			<description>Entry in ArrayOfSignatureReferences shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfSignatureReferences is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSignatureSubFilterNamesEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11446"/>
			<description>Entry in ArrayOfSignatureSubFilterNames shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfSignatureSubFilterNames is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSignatureSubFilterNamesEntry">
			<id specification="ISO_32000_1_5" clause="6" testNumber="11447"/>
			<description>Entry with type Name in ArrayOfSignatureSubFilterNames shall have one of values: adbe.pkcs7.detached, adbe.x509.rsa_sha1, adbe.pkcs7.sha1</description>
			<test>HasTypeName != true || NameValue == "adbe.pkcs7.detached" || NameValue == "adbe.pkcs7.sha1" || NameValue == "adbe.x509.rsa_sha1"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfSignatureSubFilterNames has incorrect value %2 instead of adbe.pkcs7.detached, adbe.x509.rsa_sha1, adbe.pkcs7.sha1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSoftwareIdentifiersEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11455"/>
			<description>Entry with type Dictionary in ArrayOfSoftwareIdentifiers shall be object SoftwareIdentifier</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfSoftwareIdentifiers is not object SoftwareIdentifier</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSoftwareIdentifiersEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11456"/>
			<description>Entry in ArrayOfSoftwareIdentifiers shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfSoftwareIdentifiers is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSoftwareVersionsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11463"/>
			<description>Entry in ArrayOfSoftwareVersions shall have type Integer</description>
			<test>HasTypeInteger == true</test>
			<error>
				<message>Entry %1 in ArrayOfSoftwareVersions is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSoftwareVersionsEntry">
			<id specification="ISO_32000_1_5" clause="14" testNumber="11464"/>
			<description>Entry with type Integer in ArrayOfSoftwareVersions shall satisfy possible value predicate: fn:Eval(@* &gt;= 0)</description>
			<test>HasTypeInteger != true || IntegerValue &gt;= 0</test>
			<error>
				<message>Entry %1 with type Integer in ArrayOfSoftwareVersions does not satisfy possible value predicate: fn:Eval(@* &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSourceInformationEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11475"/>
			<description>Entry with type Dictionary in ArrayOfSourceInformation shall be object SourceInformation</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfSourceInformation is not object SourceInformation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSourceInformationEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11476"/>
			<description>Entry in ArrayOfSourceInformation shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfSourceInformation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStreamsGeneralEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11498"/>
			<description>Entry with type Stream in ArrayOfStreamsGeneral shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfStreamsGeneral is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStreamsGeneralEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11499"/>
			<description>Entry in ArrayOfStreamsGeneral shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in ArrayOfStreamsGeneral is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStreamsGeneralEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="11500"/>
			<description>Entry with type Stream in ArrayOfStreamsGeneral shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfStreamsGeneral is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStringsByteEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11514"/>
			<description>Entry in ArrayOfStringsByte shall have type StringByte</description>
			<test>HasTypeStringByte == true</test>
			<error>
				<message>Entry %1 in ArrayOfStringsByte is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStringsTextEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11521"/>
			<description>Entry in ArrayOfStringsText shall have type StringText</description>
			<test>HasTypeStringText == true</test>
			<error>
				<message>Entry %1 in ArrayOfStringsText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11531"/>
			<description>Entry with type Dictionary in ArrayOfStructElem shall be object StructElem</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfStructElem is not object StructElem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11532"/>
			<description>Entry in ArrayOfStructElem shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfStructElem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="11533"/>
			<description>Entry with type Dictionary in ArrayOfStructElem shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfStructElem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemKidsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11547"/>
			<description>Entry with type Dictionary in ArrayOfStructElemKids shall be one of objects StructElem, MarkedContentReference, ObjectReference</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfStructElemKids is not one of objects StructElem, MarkedContentReference, ObjectReference</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemKidsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11548"/>
			<description>Entry in ArrayOfStructElemKids shall have one of types: Integer, Dictionary</description>
			<test>HasTypeInteger == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfStructElemKids is not one of types: Integer, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTags">
			<id specification="ISO_32000_1_5" clause="3" testNumber="11562"/>
			<description>ArrayOfTags shall contain 2*n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 0</test>
			<error>
				<message>ArrayOfTags contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTagsSubArray">
			<id specification="ISO_32000_1_5" clause="2" testNumber="11575"/>
			<description>ArrayOfTagsSubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfTagsSubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTagsSubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11576"/>
			<description>Entry 0 in ArrayOfTagsSubArray shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOfTagsSubArray is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTagsSubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11577"/>
			<description>Entry 1 in ArrayOfTagsSubArray shall have type StringAscii</description>
			<test>size &lt;= 1 || entry1HasTypeStringAscii == true</test>
			<error>
				<message>Entry 1 in ArrayOfTagsSubArray is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfThreadsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11595"/>
			<description>Entry with type Dictionary in ArrayOfThreads shall be object Thread</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfThreads is not object Thread</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfThreadsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11596"/>
			<description>Entry in ArrayOfThreads shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfThreads is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11617"/>
			<description>Entry with type Array in ArrayOfTrapNetVersionObjects shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfTrapNetVersionObjects is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11618"/>
			<description>Entry with type Stream in ArrayOfTrapNetVersionObjects shall be one of objects PatternType1, ShadingType4, ShadingType5, ShadingType6, ShadingType7, Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfTrapNetVersionObjects is not one of objects PatternType1, ShadingType4, ShadingType5, ShadingType6, ShadingType7, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11619"/>
			<description>Entry with type Dictionary in ArrayOfTrapNetVersionObjects shall be one of objects OPIVersion13Dict, OPIVersion20Dict, GraphicsStateParameter, PatternType2, ShadingType1, ShadingType2, ShadingType3, XObjectFormType1, XObjectImage, XObjectFormPS, XObjectFormPSpassthrough, FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfTrapNetVersionObjects is not one of objects OPIVersion13Dict, OPIVersion20Dict, GraphicsStateParameter, PatternType2, ShadingType1, ShadingType2, ShadingType3, XObjectFormType1, XObjectImage, XObjectFormPS, XObjectFormPSpassthrough, FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11620"/>
			<description>Entry in ArrayOfTrapNetVersionObjects shall have one of types: Array, Stream, Dictionary</description>
			<test>HasTypeArray == true || HasTypeStream == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfTrapNetVersionObjects is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="11621"/>
			<description>Entry with type Array in ArrayOfTrapNetVersionObjects shall be indirect</description>
			<test>HasTypeArray != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfTrapNetVersionObjects is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="11622"/>
			<description>Entry with type Stream in ArrayOfTrapNetVersionObjects shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfTrapNetVersionObjects is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="11623"/>
			<description>Entry with type Dictionary in ArrayOfTrapNetVersionObjects shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfTrapNetVersionObjects is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapRegionsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11651"/>
			<description>Entry with type Dictionary in ArrayOfTrapRegions shall be object TrapRegion</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfTrapRegions is not object TrapRegion</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapRegionsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11652"/>
			<description>Entry in ArrayOfTrapRegions shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfTrapRegions is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapRegionsEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="11653"/>
			<description>Entry with type Dictionary in ArrayOfTrapRegions shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfTrapRegions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfURLStringsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11665"/>
			<description>Entry in ArrayOfURLStrings shall have type StringText</description>
			<test>HasTypeStringText == true</test>
			<error>
				<message>Entry %1 in ArrayOfURLStrings is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureCommandsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11695"/>
			<description>Entry with type Dictionary in ArrayOfWebCaptureCommands shall be object WebCaptureCommand</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfWebCaptureCommands is not object WebCaptureCommand</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureCommandsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11696"/>
			<description>Entry in ArrayOfWebCaptureCommands shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfWebCaptureCommands is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureCommandsEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="11697"/>
			<description>Entry with type Dictionary in ArrayOfWebCaptureCommands shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfWebCaptureCommands is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureImagesEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11713"/>
			<description>Entry with type Stream in ArrayOfWebCaptureImages shall be object XObjectImage</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfWebCaptureImages is not object XObjectImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureImagesEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11714"/>
			<description>Entry in ArrayOfWebCaptureImages shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in ArrayOfWebCaptureImages is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureImagesEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="11715"/>
			<description>Entry with type Stream in ArrayOfWebCaptureImages shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfWebCaptureImages is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCapturePagesEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="11731"/>
			<description>Entry with type Dictionary in ArrayOfWebCapturePages shall be object PageObject</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfWebCapturePages is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCapturePagesEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11732"/>
			<description>Entry in ArrayOfWebCapturePages shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfWebCapturePages is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCapturePagesEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="11733"/>
			<description>Entry with type Dictionary in ArrayOfWebCapturePages shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfWebCapturePages is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegers">
			<id specification="ISO_32000_1_5" clause="3" testNumber="11763"/>
			<description>ArrayOfXRefIndexIntegers shall contain 2*n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 0</test>
			<error>
				<message>ArrayOfXRefIndexIntegers contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_5" clause="2" testNumber="11767"/>
			<description>ArrayOfXRefIndexIntegersSubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfXRefIndexIntegersSubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11768"/>
			<description>Entry 0 in ArrayOfXRefIndexIntegersSubArray shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOfXRefIndexIntegersSubArray is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_5" clause="16" testNumber="11769"/>
			<description>If entry 0 with type Integer in ArrayOfXRefIndexIntegersSubArray satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>entry0HasTypeInteger != true || (isentry0Indirect == false)</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOfXRefIndexIntegersSubArray is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_5" clause="9" testNumber="11770"/>
			<description>Entry 0 with type Integer in ArrayOfXRefIndexIntegersSubArray shall satisfy special case: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeInteger != true || (entry0IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOfXRefIndexIntegersSubArray does not satisfy special case: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11771"/>
			<description>Entry 1 in ArrayOfXRefIndexIntegersSubArray shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOfXRefIndexIntegersSubArray is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_5" clause="16" testNumber="11772"/>
			<description>If entry 1 with type Integer in ArrayOfXRefIndexIntegersSubArray satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>entry1HasTypeInteger != true || (isentry1Indirect == false)</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfXRefIndexIntegersSubArray is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_5" clause="9" testNumber="11773"/>
			<description>Entry 1 with type Integer in ArrayOfXRefIndexIntegersSubArray shall satisfy special case: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeInteger != true || (entry1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfXRefIndexIntegersSubArray does not satisfy special case: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_5" clause="2" testNumber="11795"/>
			<description>ArrayOfXRefWIntegers shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>ArrayOfXRefWIntegers contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11796"/>
			<description>Entry 0 in ArrayOfXRefWIntegers shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOfXRefWIntegers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_5" clause="16" testNumber="11797"/>
			<description>If entry 0 with type Integer in ArrayOfXRefWIntegers satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>entry0HasTypeInteger != true || (isentry0Indirect == false)</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOfXRefWIntegers is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_5" clause="14" testNumber="11798"/>
			<description>Entry 0 with type Integer in ArrayOfXRefWIntegers shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeInteger != true || entry0IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOfXRefWIntegers does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11799"/>
			<description>Entry 1 in ArrayOfXRefWIntegers shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOfXRefWIntegers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_5" clause="16" testNumber="11800"/>
			<description>If entry 1 with type Integer in ArrayOfXRefWIntegers satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>entry1HasTypeInteger != true || (isentry1Indirect == false)</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfXRefWIntegers is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_5" clause="14" testNumber="11801"/>
			<description>Entry 1 with type Integer in ArrayOfXRefWIntegers shall satisfy possible value predicate: fn:Eval(@1 &gt; 0)</description>
			<test>entry1HasTypeInteger != true || entry1IntegerValue &gt; 0</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfXRefWIntegers does not satisfy possible value predicate: fn:Eval(@1 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11802"/>
			<description>Entry 2 in ArrayOfXRefWIntegers shall have type Integer</description>
			<test>size &lt;= 2 || entry2HasTypeInteger == true</test>
			<error>
				<message>Entry 2 in ArrayOfXRefWIntegers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_5" clause="16" testNumber="11803"/>
			<description>If entry 2 with type Integer in ArrayOfXRefWIntegers satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>entry2HasTypeInteger != true || (isentry2Indirect == false)</test>
			<error>
				<message>Entry 2 with type Integer in ArrayOfXRefWIntegers is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_5" clause="14" testNumber="11804"/>
			<description>Entry 2 with type Integer in ArrayOfXRefWIntegers shall satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeInteger != true || entry2IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Integer in ArrayOfXRefWIntegers does not satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Booleans">
			<id specification="ISO_32000_1_5" clause="2" testNumber="11841"/>
			<description>ArrayOf_2Booleans shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2Booleans contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Booleans">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11842"/>
			<description>Entry 0 in ArrayOf_2Booleans shall have type Boolean</description>
			<test>size &lt;= 0 || entry0HasTypeBoolean == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2Booleans is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Booleans">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11843"/>
			<description>Entry 1 in ArrayOf_2Booleans shall have type Boolean</description>
			<test>size &lt;= 1 || entry1HasTypeBoolean == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2Booleans is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2DashNumbers">
			<id specification="ISO_32000_1_5" clause="2" testNumber="11865"/>
			<description>ArrayOf_2DashNumbers shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2DashNumbers contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2DashNumbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11866"/>
			<description>Entry 0 in ArrayOf_2DashNumbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2DashNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2DashNumbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11867"/>
			<description>Entry 1 in ArrayOf_2DashNumbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2DashNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Integers">
			<id specification="ISO_32000_1_5" clause="2" testNumber="11886"/>
			<description>ArrayOf_2Integers shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2Integers contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Integers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11887"/>
			<description>Entry 0 in ArrayOf_2Integers shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Integers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11888"/>
			<description>Entry 1 in ArrayOf_2Integers shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2LineEndingsNames">
			<id specification="ISO_32000_1_5" clause="2" testNumber="11903"/>
			<description>ArrayOf_2LineEndingsNames shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2LineEndingsNames contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2LineEndingsNames">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11904"/>
			<description>Entry 0 in ArrayOf_2LineEndingsNames shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2LineEndingsNames is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2LineEndingsNames">
			<id specification="ISO_32000_1_5" clause="6" testNumber="11905"/>
			<description>Entry 0 with type Name in ArrayOf_2LineEndingsNames shall have one of values: ClosedArrow, Circle, ROpenArrow, Slash, Diamond, OpenArrow, Square, Butt, None, RClosedArrow</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Square" || entry0NameValue == "Circle" || entry0NameValue == "Diamond" || entry0NameValue == "OpenArrow" || entry0NameValue == "ClosedArrow" || entry0NameValue == "None" || entry0NameValue == "Butt" || entry0NameValue == "ROpenArrow" || entry0NameValue == "RClosedArrow" || entry0NameValue == "Slash"</test>
			<error>
				<message>Entry 0 with type Name in ArrayOf_2LineEndingsNames has incorrect value %2 instead of ClosedArrow, Circle, ROpenArrow, Slash, Diamond, OpenArrow, Square, Butt, None, RClosedArrow</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2LineEndingsNames">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11906"/>
			<description>Entry 1 in ArrayOf_2LineEndingsNames shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2LineEndingsNames is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2LineEndingsNames">
			<id specification="ISO_32000_1_5" clause="6" testNumber="11907"/>
			<description>Entry 1 with type Name in ArrayOf_2LineEndingsNames shall have one of values: ClosedArrow, Circle, ROpenArrow, Slash, Diamond, OpenArrow, Square, Butt, None, RClosedArrow</description>
			<test>entry1HasTypeName != true || entry1NameValue == "Square" || entry1NameValue == "Circle" || entry1NameValue == "Diamond" || entry1NameValue == "OpenArrow" || entry1NameValue == "ClosedArrow" || entry1NameValue == "None" || entry1NameValue == "Butt" || entry1NameValue == "ROpenArrow" || entry1NameValue == "RClosedArrow" || entry1NameValue == "Slash"</test>
			<error>
				<message>Entry 1 with type Name in ArrayOf_2LineEndingsNames has incorrect value %2 instead of ClosedArrow, Circle, ROpenArrow, Slash, Diamond, OpenArrow, Square, Butt, None, RClosedArrow</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Numbers">
			<id specification="ISO_32000_1_5" clause="2" testNumber="11932"/>
			<description>ArrayOf_2Numbers shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2Numbers contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11933"/>
			<description>Entry 0 in ArrayOf_2Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11934"/>
			<description>Entry 1 in ArrayOf_2Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsByte">
			<id specification="ISO_32000_1_5" clause="2" testNumber="11956"/>
			<description>ArrayOf_2StringsByte shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2StringsByte contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsByte">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11957"/>
			<description>Entry 0 in ArrayOf_2StringsByte shall have type StringByte</description>
			<test>size &lt;= 0 || entry0HasTypeStringByte == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2StringsByte is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsByte">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11958"/>
			<description>Entry 1 in ArrayOf_2StringsByte shall have type StringByte</description>
			<test>size &lt;= 1 || entry1HasTypeStringByte == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2StringsByte is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsText">
			<id specification="ISO_32000_1_5" clause="2" testNumber="11971"/>
			<description>ArrayOf_2StringsText shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2StringsText contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11972"/>
			<description>Entry 0 in ArrayOf_2StringsText shall have type StringText</description>
			<test>size &lt;= 0 || entry0HasTypeStringText == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2StringsText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsText">
			<id specification="ISO_32000_1_5" clause="8" testNumber="11973"/>
			<description>Entry 1 in ArrayOf_2StringsText shall have type StringText</description>
			<test>size &lt;= 1 || entry1HasTypeStringText == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2StringsText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_5" clause="2" testNumber="12005"/>
			<description>ArrayOf_3Integers shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>ArrayOf_3Integers contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12006"/>
			<description>Entry 0 in ArrayOf_3Integers shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOf_3Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_5" clause="14" testNumber="12007"/>
			<description>Entry 0 with type Integer in ArrayOf_3Integers shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeInteger != true || entry0IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOf_3Integers does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12008"/>
			<description>Entry 1 in ArrayOf_3Integers shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOf_3Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_5" clause="14" testNumber="12009"/>
			<description>Entry 1 with type Integer in ArrayOf_3Integers shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeInteger != true || entry1IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOf_3Integers does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12010"/>
			<description>Entry 2 in ArrayOf_3Integers shall have type Integer</description>
			<test>size &lt;= 2 || entry2HasTypeInteger == true</test>
			<error>
				<message>Entry 2 in ArrayOf_3Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_5" clause="14" testNumber="12011"/>
			<description>Entry 2 with type Integer in ArrayOf_3Integers shall satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeInteger != true || entry2IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Integer in ArrayOf_3Integers does not satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_5" clause="2" testNumber="12056"/>
			<description>ArrayOf_3RGBNumbers shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>ArrayOf_3RGBNumbers contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12057"/>
			<description>Entry 0 in ArrayOf_3RGBNumbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_3RGBNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_5" clause="14" testNumber="12058"/>
			<description>Entry 0 with type Number in ArrayOf_3RGBNumbers shall satisfy possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</description>
			<test>entry0HasTypeNumber != true || (entry0NumberValue &gt;= 0) &amp;&amp; (entry0NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 0 with type Number in ArrayOf_3RGBNumbers does not satisfy possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12059"/>
			<description>Entry 1 in ArrayOf_3RGBNumbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_3RGBNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_5" clause="14" testNumber="12060"/>
			<description>Entry 1 with type Number in ArrayOf_3RGBNumbers shall satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</description>
			<test>entry1HasTypeNumber != true || (entry1NumberValue &gt;= 0) &amp;&amp; (entry1NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_3RGBNumbers does not satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12061"/>
			<description>Entry 2 in ArrayOf_3RGBNumbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_3RGBNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_5" clause="14" testNumber="12062"/>
			<description>Entry 2 with type Number in ArrayOf_3RGBNumbers shall satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</description>
			<test>entry2HasTypeNumber != true || (entry2NumberValue &gt;= 0) &amp;&amp; (entry2NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 2 with type Number in ArrayOf_3RGBNumbers does not satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_5" clause="4" testNumber="12148"/>
			<description>ArrayOf_4AnnotBorderCharacteristics shall contain at least 3 elements</description>
			<test>size &gt;= 3</test>
			<error>
				<message>ArrayOf_4AnnotBorderCharacteristics contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12149"/>
			<description>Entry 0 in ArrayOf_4AnnotBorderCharacteristics shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4AnnotBorderCharacteristics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_5" clause="14" testNumber="12150"/>
			<description>Entry 0 with type Number in ArrayOf_4AnnotBorderCharacteristics shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in ArrayOf_4AnnotBorderCharacteristics does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12151"/>
			<description>Entry 1 in ArrayOf_4AnnotBorderCharacteristics shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4AnnotBorderCharacteristics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_5" clause="14" testNumber="12152"/>
			<description>Entry 1 with type Number in ArrayOf_4AnnotBorderCharacteristics shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4AnnotBorderCharacteristics does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12153"/>
			<description>Entry 2 in ArrayOf_4AnnotBorderCharacteristics shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4AnnotBorderCharacteristics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_5" clause="14" testNumber="12154"/>
			<description>Entry 2 with type Number in ArrayOf_4AnnotBorderCharacteristics shall satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Number in ArrayOf_4AnnotBorderCharacteristics does not satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_5" clause="17" testNumber="12155"/>
			<description>Entry 3 with type Array in ArrayOf_4AnnotBorderCharacteristics shall be object ArrayOf_2DashNumbers</description>
			<test>entry3HasTypeArray != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Array in ArrayOf_4AnnotBorderCharacteristics is not object ArrayOf_2DashNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12156"/>
			<description>Entry 3 in ArrayOf_4AnnotBorderCharacteristics shall have type Array</description>
			<test>size &lt;= 3 || entry3HasTypeArray == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4AnnotBorderCharacteristics is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_5" clause="2" testNumber="12184"/>
			<description>ArrayOf_4BorderColorArrays shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf_4BorderColorArrays contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_5" clause="17" testNumber="12185"/>
			<description>Entry 0 with type Array in ArrayOf_4BorderColorArrays shall be object ArrayOf_3RGBNumbers</description>
			<test>entry0HasTypeArray != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Array in ArrayOf_4BorderColorArrays is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12186"/>
			<description>Entry 0 in ArrayOf_4BorderColorArrays shall have one of types: Array, Null</description>
			<test>size &lt;= 0 || entry0HasTypeArray == true || entry0HasTypeNull == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4BorderColorArrays is not one of types: Array, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_5" clause="17" testNumber="12187"/>
			<description>Entry 1 with type Array in ArrayOf_4BorderColorArrays shall be object ArrayOf_3RGBNumbers</description>
			<test>entry1HasTypeArray != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Array in ArrayOf_4BorderColorArrays is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12188"/>
			<description>Entry 1 in ArrayOf_4BorderColorArrays shall have one of types: Array, Null</description>
			<test>size &lt;= 1 || entry1HasTypeArray == true || entry1HasTypeNull == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4BorderColorArrays is not one of types: Array, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_5" clause="17" testNumber="12189"/>
			<description>Entry 2 with type Array in ArrayOf_4BorderColorArrays shall be object ArrayOf_3RGBNumbers</description>
			<test>entry2HasTypeArray != true || entry2_size == 1</test>
			<error>
				<message>Entry 2 with type Array in ArrayOf_4BorderColorArrays is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12190"/>
			<description>Entry 2 in ArrayOf_4BorderColorArrays shall have one of types: Array, Null</description>
			<test>size &lt;= 2 || entry2HasTypeArray == true || entry2HasTypeNull == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4BorderColorArrays is not one of types: Array, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_5" clause="17" testNumber="12191"/>
			<description>Entry 3 with type Array in ArrayOf_4BorderColorArrays shall be object ArrayOf_3RGBNumbers</description>
			<test>entry3HasTypeArray != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Array in ArrayOf_4BorderColorArrays is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12192"/>
			<description>Entry 3 in ArrayOf_4BorderColorArrays shall have one of types: Array, Null</description>
			<test>size &lt;= 3 || entry3HasTypeArray == true || entry3HasTypeNull == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4BorderColorArrays is not one of types: Array, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_5" clause="2" testNumber="12220"/>
			<description>ArrayOf_4BorderStyleNames shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf_4BorderStyleNames contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12221"/>
			<description>Entry 0 in ArrayOf_4BorderStyleNames shall have one of types: Name, Null</description>
			<test>size &lt;= 0 || entry0HasTypeName == true || entry0HasTypeNull == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4BorderStyleNames is not one of types: Name, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_5" clause="6" testNumber="12222"/>
			<description>Entry 0 with type Name in ArrayOf_4BorderStyleNames shall have one of values: Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</description>
			<test>entry0HasTypeName != true || entry0NameValue == "None" || entry0NameValue == "Hidden" || entry0NameValue == "Dotted" || entry0NameValue == "Dashed" || entry0NameValue == "Solid" || entry0NameValue == "Double" || entry0NameValue == "Groove" || entry0NameValue == "Ridge" || entry0NameValue == "Inset" || entry0NameValue == "Outset"</test>
			<error>
				<message>Entry 0 with type Name in ArrayOf_4BorderStyleNames has incorrect value %2 instead of Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12223"/>
			<description>Entry 1 in ArrayOf_4BorderStyleNames shall have one of types: Name, Null</description>
			<test>size &lt;= 1 || entry1HasTypeName == true || entry1HasTypeNull == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4BorderStyleNames is not one of types: Name, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_5" clause="6" testNumber="12224"/>
			<description>Entry 1 with type Name in ArrayOf_4BorderStyleNames shall have one of values: Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</description>
			<test>entry1HasTypeName != true || entry1NameValue == "None" || entry1NameValue == "Hidden" || entry1NameValue == "Dotted" || entry1NameValue == "Dashed" || entry1NameValue == "Solid" || entry1NameValue == "Double" || entry1NameValue == "Groove" || entry1NameValue == "Ridge" || entry1NameValue == "Inset" || entry1NameValue == "Outset"</test>
			<error>
				<message>Entry 1 with type Name in ArrayOf_4BorderStyleNames has incorrect value %2 instead of Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12225"/>
			<description>Entry 2 in ArrayOf_4BorderStyleNames shall have one of types: Name, Null</description>
			<test>size &lt;= 2 || entry2HasTypeName == true || entry2HasTypeNull == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4BorderStyleNames is not one of types: Name, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_5" clause="6" testNumber="12226"/>
			<description>Entry 2 with type Name in ArrayOf_4BorderStyleNames shall have one of values: Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</description>
			<test>entry2HasTypeName != true || entry2NameValue == "None" || entry2NameValue == "Hidden" || entry2NameValue == "Dotted" || entry2NameValue == "Dashed" || entry2NameValue == "Solid" || entry2NameValue == "Double" || entry2NameValue == "Groove" || entry2NameValue == "Ridge" || entry2NameValue == "Inset" || entry2NameValue == "Outset"</test>
			<error>
				<message>Entry 2 with type Name in ArrayOf_4BorderStyleNames has incorrect value %2 instead of Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry2NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12227"/>
			<description>Entry 3 in ArrayOf_4BorderStyleNames shall have one of types: Name, Null</description>
			<test>size &lt;= 3 || entry3HasTypeName == true || entry3HasTypeNull == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4BorderStyleNames is not one of types: Name, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_5" clause="6" testNumber="12228"/>
			<description>Entry 3 with type Name in ArrayOf_4BorderStyleNames shall have one of values: Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</description>
			<test>entry3HasTypeName != true || entry3NameValue == "None" || entry3NameValue == "Hidden" || entry3NameValue == "Dotted" || entry3NameValue == "Dashed" || entry3NameValue == "Solid" || entry3NameValue == "Double" || entry3NameValue == "Groove" || entry3NameValue == "Ridge" || entry3NameValue == "Inset" || entry3NameValue == "Outset"</test>
			<error>
				<message>Entry 3 with type Name in ArrayOf_4BorderStyleNames has incorrect value %2 instead of Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry3NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_5" clause="2" testNumber="12256"/>
			<description>ArrayOf_4BorderThicknessNumbers shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf_4BorderThicknessNumbers contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12257"/>
			<description>Entry 0 in ArrayOf_4BorderThicknessNumbers shall have one of types: Number, Null</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true || entry0HasTypeNull == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4BorderThicknessNumbers is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_5" clause="14" testNumber="12258"/>
			<description>Entry 0 with type Number in ArrayOf_4BorderThicknessNumbers shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in ArrayOf_4BorderThicknessNumbers does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12259"/>
			<description>Entry 1 in ArrayOf_4BorderThicknessNumbers shall have one of types: Number, Null</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true || entry1HasTypeNull == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4BorderThicknessNumbers is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_5" clause="14" testNumber="12260"/>
			<description>Entry 1 with type Number in ArrayOf_4BorderThicknessNumbers shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4BorderThicknessNumbers does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12261"/>
			<description>Entry 2 in ArrayOf_4BorderThicknessNumbers shall have one of types: Number, Null</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true || entry2HasTypeNull == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4BorderThicknessNumbers is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_5" clause="14" testNumber="12262"/>
			<description>Entry 2 with type Number in ArrayOf_4BorderThicknessNumbers shall satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Number in ArrayOf_4BorderThicknessNumbers does not satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12263"/>
			<description>Entry 3 in ArrayOf_4BorderThicknessNumbers shall have one of types: Number, Null</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true || entry3HasTypeNull == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4BorderThicknessNumbers is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_5" clause="14" testNumber="12264"/>
			<description>Entry 3 with type Number in ArrayOf_4BorderThicknessNumbers shall satisfy possible value predicate: fn:Eval(@3 &gt;= 0)</description>
			<test>entry3HasTypeNumber != true || entry3NumberValue &gt;= 0</test>
			<error>
				<message>Entry 3 with type Number in ArrayOf_4BorderThicknessNumbers does not satisfy possible value predicate: fn:Eval(@3 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_5" clause="2" testNumber="12325"/>
			<description>ArrayOf_4Integers shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf_4Integers contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12326"/>
			<description>Entry 0 in ArrayOf_4Integers shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12327"/>
			<description>Entry 1 in ArrayOf_4Integers shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12328"/>
			<description>Entry 2 in ArrayOf_4Integers shall have type Integer</description>
			<test>size &lt;= 2 || entry2HasTypeInteger == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12329"/>
			<description>Entry 3 in ArrayOf_4Integers shall have type Integer</description>
			<test>size &lt;= 3 || entry3HasTypeInteger == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_5" clause="2" testNumber="12360"/>
			<description>ArrayOf_4Numbers shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf_4Numbers contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12361"/>
			<description>Entry 0 in ArrayOf_4Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12362"/>
			<description>Entry 1 in ArrayOf_4Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12363"/>
			<description>Entry 2 in ArrayOf_4Numbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12364"/>
			<description>Entry 3 in ArrayOf_4Numbers shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12416"/>
			<description>Entry 0 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4NumbersColorAnnotation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_5" clause="14" testNumber="12417"/>
			<description>Entry 0 with type Number in ArrayOf_4NumbersColorAnnotation shall satisfy possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</description>
			<test>entry0HasTypeNumber != true || (entry0NumberValue &gt;= 0) &amp;&amp; (entry0NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 0 with type Number in ArrayOf_4NumbersColorAnnotation does not satisfy possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12418"/>
			<description>Entry 1 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4NumbersColorAnnotation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_5" clause="14" testNumber="12419"/>
			<description>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation shall satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</description>
			<test>entry1HasTypeNumber != true || (entry1NumberValue &gt;= 0) &amp;&amp; (entry1NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation does not satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="12420"/>
			<description>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation shall satisfy special case: fn:Eval(fn:IsPresent(2))</description>
			<test>entry1HasTypeNumber != true || ((contains2 == true))</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation does not satisfy special case: fn:Eval(fn:IsPresent(2))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12421"/>
			<description>Entry 2 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4NumbersColorAnnotation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_5" clause="14" testNumber="12422"/>
			<description>Entry 2 with type Number in ArrayOf_4NumbersColorAnnotation shall satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</description>
			<test>entry2HasTypeNumber != true || (entry2NumberValue &gt;= 0) &amp;&amp; (entry2NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 2 with type Number in ArrayOf_4NumbersColorAnnotation does not satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12423"/>
			<description>Entry 3 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4NumbersColorAnnotation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_5" clause="14" testNumber="12424"/>
			<description>Entry 3 with type Number in ArrayOf_4NumbersColorAnnotation shall satisfy possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</description>
			<test>entry3HasTypeNumber != true || (entry3NumberValue &gt;= 0) &amp;&amp; (entry3NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 3 with type Number in ArrayOf_4NumbersColorAnnotation does not satisfy possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_5" clause="2" testNumber="12466"/>
			<description>ArrayOf_6Numbers shall contain exactly 6 elements</description>
			<test>size == 6</test>
			<error>
				<message>ArrayOf_6Numbers contains %1 element(s) instead of 6</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12467"/>
			<description>Entry 0 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_6Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12468"/>
			<description>Entry 1 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_6Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12469"/>
			<description>Entry 2 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_6Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12470"/>
			<description>Entry 3 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_6Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12471"/>
			<description>Entry 4 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOf_6Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12472"/>
			<description>Entry 5 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOf_6Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_5" clause="2" testNumber="12521"/>
			<description>ArrayOf_8Numbers shall contain exactly 8 elements</description>
			<test>size == 8</test>
			<error>
				<message>ArrayOf_8Numbers contains %1 element(s) instead of 8</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12522"/>
			<description>Entry 0 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12523"/>
			<description>Entry 1 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12524"/>
			<description>Entry 2 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12525"/>
			<description>Entry 3 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12526"/>
			<description>Entry 4 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12527"/>
			<description>Entry 5 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12528"/>
			<description>Entry 6 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 6 || entry6HasTypeNumber == true</test>
			<error>
				<message>Entry 6 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12529"/>
			<description>Entry 7 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 7 || entry7HasTypeNumber == true</test>
			<error>
				<message>Entry 7 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_5" clause="2" testNumber="12597"/>
			<description>ArrayOf_9Numbers shall contain exactly 9 elements</description>
			<test>size == 9</test>
			<error>
				<message>ArrayOf_9Numbers contains %1 element(s) instead of 9</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12598"/>
			<description>Entry 0 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12599"/>
			<description>Entry 1 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12600"/>
			<description>Entry 2 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12601"/>
			<description>Entry 3 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12602"/>
			<description>Entry 4 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12603"/>
			<description>Entry 5 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12604"/>
			<description>Entry 6 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 6 || entry6HasTypeNumber == true</test>
			<error>
				<message>Entry 6 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12605"/>
			<description>Entry 7 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 7 || entry7HasTypeNumber == true</test>
			<error>
				<message>Entry 7 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12606"/>
			<description>Entry 8 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 8 || entry8HasTypeNumber == true</test>
			<error>
				<message>Entry 8 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_ArrayOfNumbersEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="12641"/>
			<description>Entry with type Array in ArrayOf_ArrayOfNumbers shall be object ArrayOfNumbersGeneral</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOf_ArrayOfNumbers is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_ArrayOfNumbersEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12642"/>
			<description>Entry in ArrayOf_ArrayOfNumbers shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %1 in ArrayOf_ArrayOfNumbers is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="1" testNumber="12751"/>
			<description>Bead shall not contain entries except N, P, R, T, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>Bead contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="17" testNumber="12752"/>
			<description>Entry N with type Dictionary in Bead shall be one of objects BeadFirst, Bead</description>
			<test>NHasTypeDictionary != true || N_size == 1</test>
			<error>
				<message>Entry N with type Dictionary in Bead is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12753"/>
			<description>Entry N in Bead shall have type Dictionary</description>
			<test>containsN == false || NHasTypeDictionary == true</test>
			<error>
				<message>Entry N in Bead is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="7" testNumber="12754"/>
			<description>Entry N in Bead is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in Bead is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="10" testNumber="12755"/>
			<description>Entry N with type Dictionary in Bead shall be indirect</description>
			<test>NHasTypeDictionary != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Dictionary in Bead is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="17" testNumber="12756"/>
			<description>Entry P with type Dictionary in Bead shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in Bead is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12757"/>
			<description>Entry P in Bead shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in Bead is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="7" testNumber="12758"/>
			<description>Entry P in Bead is required</description>
			<test>containsP == true</test>
			<error>
				<message>Entry P in Bead is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="10" testNumber="12759"/>
			<description>Entry P with type Dictionary in Bead shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in Bead is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12760"/>
			<description>Entry R in Bead shall have type Rectangle</description>
			<test>containsR == false || RHasTypeRectangle == true</test>
			<error>
				<message>Entry R in Bead is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="7" testNumber="12761"/>
			<description>Entry R in Bead is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in Bead is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="17" testNumber="12762"/>
			<description>Entry T with type Dictionary in Bead shall be object Thread</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in Bead is not object Thread</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12763"/>
			<description>Entry T in Bead shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in Bead is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="10" testNumber="12764"/>
			<description>Entry T with type Dictionary in Bead shall be indirect</description>
			<test>THasTypeDictionary != true || isTIndirect == true</test>
			<error>
				<message>Entry T with type Dictionary in Bead is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12765"/>
			<description>Entry Type in Bead shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Bead is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="6" testNumber="12766"/>
			<description>Entry Type with type Name in Bead shall have value Bead</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Bead"</test>
			<error>
				<message>Entry Type with type Name in Bead has incorrect value %2 instead of Bead</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="17" testNumber="12767"/>
			<description>Entry V with type Dictionary in Bead shall be one of objects BeadFirst, Bead</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in Bead is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12768"/>
			<description>Entry V in Bead shall have type Dictionary</description>
			<test>containsV == false || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in Bead is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="7" testNumber="12769"/>
			<description>Entry V in Bead is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in Bead is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_5" clause="10" testNumber="12770"/>
			<description>Entry V with type Dictionary in Bead shall be indirect</description>
			<test>VHasTypeDictionary != true || isVIndirect == true</test>
			<error>
				<message>Entry V with type Dictionary in Bead is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="1" testNumber="12915"/>
			<description>BeadFirst shall not contain entries except N, P, R, T, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>BeadFirst contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="17" testNumber="12916"/>
			<description>Entry N with type Dictionary in BeadFirst shall be one of objects BeadFirst, Bead</description>
			<test>NHasTypeDictionary != true || N_size == 1</test>
			<error>
				<message>Entry N with type Dictionary in BeadFirst is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12917"/>
			<description>Entry N in BeadFirst shall have type Dictionary</description>
			<test>containsN == false || NHasTypeDictionary == true</test>
			<error>
				<message>Entry N in BeadFirst is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="7" testNumber="12918"/>
			<description>Entry N in BeadFirst is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="10" testNumber="12919"/>
			<description>Entry N with type Dictionary in BeadFirst shall be indirect</description>
			<test>NHasTypeDictionary != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Dictionary in BeadFirst is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="17" testNumber="12920"/>
			<description>Entry P with type Dictionary in BeadFirst shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in BeadFirst is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12921"/>
			<description>Entry P in BeadFirst shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in BeadFirst is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="7" testNumber="12922"/>
			<description>Entry P in BeadFirst is required</description>
			<test>containsP == true</test>
			<error>
				<message>Entry P in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="10" testNumber="12923"/>
			<description>Entry P with type Dictionary in BeadFirst shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in BeadFirst is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12924"/>
			<description>Entry R in BeadFirst shall have type Rectangle</description>
			<test>containsR == false || RHasTypeRectangle == true</test>
			<error>
				<message>Entry R in BeadFirst is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="7" testNumber="12925"/>
			<description>Entry R in BeadFirst is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="17" testNumber="12926"/>
			<description>Entry T with type Dictionary in BeadFirst shall be object Thread</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in BeadFirst is not object Thread</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12927"/>
			<description>Entry T in BeadFirst shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in BeadFirst is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="7" testNumber="12928"/>
			<description>Entry T in BeadFirst is required</description>
			<test>containsT == true</test>
			<error>
				<message>Entry T in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="10" testNumber="12929"/>
			<description>Entry T with type Dictionary in BeadFirst shall be indirect</description>
			<test>THasTypeDictionary != true || isTIndirect == true</test>
			<error>
				<message>Entry T with type Dictionary in BeadFirst is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12930"/>
			<description>Entry Type in BeadFirst shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in BeadFirst is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="6" testNumber="12931"/>
			<description>Entry Type with type Name in BeadFirst shall have value Bead</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Bead"</test>
			<error>
				<message>Entry Type with type Name in BeadFirst has incorrect value %2 instead of Bead</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="17" testNumber="12932"/>
			<description>Entry V with type Dictionary in BeadFirst shall be one of objects BeadFirst, Bead</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in BeadFirst is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="8" testNumber="12933"/>
			<description>Entry V in BeadFirst shall have type Dictionary</description>
			<test>containsV == false || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in BeadFirst is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="7" testNumber="12934"/>
			<description>Entry V in BeadFirst is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_5" clause="10" testNumber="12935"/>
			<description>Entry V with type Dictionary in BeadFirst shall be indirect</description>
			<test>VHasTypeDictionary != true || isVIndirect == true</test>
			<error>
				<message>Entry V with type Dictionary in BeadFirst is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_5" clause="2" testNumber="13027"/>
			<description>BlackpointArray shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>BlackpointArray contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13028"/>
			<description>Entry 0 in BlackpointArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in BlackpointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_5" clause="14" testNumber="13029"/>
			<description>Entry 0 with type Number in BlackpointArray shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in BlackpointArray does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13030"/>
			<description>Entry 1 in BlackpointArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in BlackpointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_5" clause="14" testNumber="13031"/>
			<description>Entry 1 with type Number in BlackpointArray shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Number in BlackpointArray does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13032"/>
			<description>Entry 2 in BlackpointArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in BlackpointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_5" clause="14" testNumber="13033"/>
			<description>Entry 2 with type Number in BlackpointArray shall satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Number in BlackpointArray does not satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderEffect">
			<id specification="ISO_32000_1_5" clause="1" testNumber="13055"/>
			<description>BorderEffect shall not contain entries except I, S</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'I' &amp;&amp; elem != 'S').length == 0</test>
			<error>
				<message>BorderEffect contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'I' &amp;&amp; elem != 'S').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderEffect">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13056"/>
			<description>Entry I in BorderEffect shall have type Number</description>
			<test>containsI == false || IHasTypeNumber == true</test>
			<error>
				<message>Entry I in BorderEffect is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderEffect">
			<id specification="ISO_32000_1_5" clause="14" testNumber="13057"/>
			<description>Entry I with type Number in BorderEffect shall satisfy possible value predicate: fn:Eval((@I &gt;= 0.0) &amp;&amp; (@I &lt;= 2.0))</description>
			<test>IHasTypeNumber != true || (INumberValue &gt;= 0.0) &amp;&amp; (INumberValue &lt;= 2.0)</test>
			<error>
				<message>Entry I with type Number in BorderEffect does not satisfy possible value predicate: fn:Eval((@I &gt;= 0.0) &amp;&amp; (@I &lt;= 2.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderEffect">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13058"/>
			<description>Entry S in BorderEffect shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in BorderEffect is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderEffect">
			<id specification="ISO_32000_1_5" clause="6" testNumber="13059"/>
			<description>Entry S with type Name in BorderEffect shall have one of values: C, S</description>
			<test>SHasTypeName != true || SNameValue == "C" || SNameValue == "S"</test>
			<error>
				<message>Entry S with type Name in BorderEffect has incorrect value %2 instead of C, S</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_5" clause="1" testNumber="13102"/>
			<description>BorderStyle shall not contain entries except D, S, Type, W</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W').length == 0</test>
			<error>
				<message>BorderStyle contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13103"/>
			<description>Entry D with type Array in BorderStyle shall be object ArrayOfDashPatterns</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in BorderStyle is not object ArrayOfDashPatterns</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13104"/>
			<description>Entry D in BorderStyle shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in BorderStyle is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13105"/>
			<description>Entry S in BorderStyle shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in BorderStyle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_5" clause="6" testNumber="13106"/>
			<description>Entry S with type Name in BorderStyle shall have one of values: B, S, D, U, I</description>
			<test>SHasTypeName != true || SNameValue == "S" || SNameValue == "B" || SNameValue == "D" || SNameValue == "I" || SNameValue == "U"</test>
			<error>
				<message>Entry S with type Name in BorderStyle has incorrect value %2 instead of B, S, D, U, I</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13107"/>
			<description>Entry Type in BorderStyle shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in BorderStyle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_5" clause="6" testNumber="13108"/>
			<description>Entry Type with type Name in BorderStyle shall have value Border</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Border"</test>
			<error>
				<message>Entry Type with type Name in BorderStyle has incorrect value %2 instead of Border</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13109"/>
			<description>Entry W in BorderStyle shall have type Number</description>
			<test>containsW == false || WHasTypeNumber == true</test>
			<error>
				<message>Entry W in BorderStyle is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_5" clause="14" testNumber="13110"/>
			<description>Entry W with type Number in BorderStyle shall satisfy possible value predicate: fn:Eval(@W &gt;= 0.0)</description>
			<test>WHasTypeNumber != true || WNumberValue &gt;= 0.0</test>
			<error>
				<message>Entry W with type Number in BorderStyle does not satisfy possible value predicate: fn:Eval(@W &gt;= 0.0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_5" clause="1" testNumber="13147"/>
			<description>BoxColorInfo shall not contain entries except ArtBox, BleedBox, CropBox, TrimBox</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ArtBox' &amp;&amp; elem != 'BleedBox' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'TrimBox').length == 0</test>
			<error>
				<message>BoxColorInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ArtBox' &amp;&amp; elem != 'BleedBox' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'TrimBox').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13148"/>
			<description>Entry ArtBox with type Dictionary in BoxColorInfo shall be object BoxStyle</description>
			<test>ArtBoxHasTypeDictionary != true || ArtBox_size == 1</test>
			<error>
				<message>Entry ArtBox with type Dictionary in BoxColorInfo is not object BoxStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13149"/>
			<description>Entry ArtBox in BoxColorInfo shall have type Dictionary</description>
			<test>containsArtBox == false || ArtBoxHasTypeDictionary == true</test>
			<error>
				<message>Entry ArtBox in BoxColorInfo is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13150"/>
			<description>Entry BleedBox with type Dictionary in BoxColorInfo shall be object BoxStyle</description>
			<test>BleedBoxHasTypeDictionary != true || BleedBox_size == 1</test>
			<error>
				<message>Entry BleedBox with type Dictionary in BoxColorInfo is not object BoxStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13151"/>
			<description>Entry BleedBox in BoxColorInfo shall have type Dictionary</description>
			<test>containsBleedBox == false || BleedBoxHasTypeDictionary == true</test>
			<error>
				<message>Entry BleedBox in BoxColorInfo is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13152"/>
			<description>Entry CropBox with type Dictionary in BoxColorInfo shall be object BoxStyle</description>
			<test>CropBoxHasTypeDictionary != true || CropBox_size == 1</test>
			<error>
				<message>Entry CropBox with type Dictionary in BoxColorInfo is not object BoxStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13153"/>
			<description>Entry CropBox in BoxColorInfo shall have type Dictionary</description>
			<test>containsCropBox == false || CropBoxHasTypeDictionary == true</test>
			<error>
				<message>Entry CropBox in BoxColorInfo is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13154"/>
			<description>Entry TrimBox with type Dictionary in BoxColorInfo shall be object BoxStyle</description>
			<test>TrimBoxHasTypeDictionary != true || TrimBox_size == 1</test>
			<error>
				<message>Entry TrimBox with type Dictionary in BoxColorInfo is not object BoxStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13155"/>
			<description>Entry TrimBox in BoxColorInfo shall have type Dictionary</description>
			<test>containsTrimBox == false || TrimBoxHasTypeDictionary == true</test>
			<error>
				<message>Entry TrimBox in BoxColorInfo is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_5" clause="1" testNumber="13191"/>
			<description>BoxStyle shall not contain entries except C, D, S, W</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'S' &amp;&amp; elem != 'W').length == 0</test>
			<error>
				<message>BoxStyle contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'S' &amp;&amp; elem != 'W').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13192"/>
			<description>Entry C with type Array in BoxStyle shall be object ArrayOf_3RGBNumbers</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in BoxStyle is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13193"/>
			<description>Entry C in BoxStyle shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in BoxStyle is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13194"/>
			<description>Entry D with type Array in BoxStyle shall be object ArrayOfDashPatterns</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in BoxStyle is not object ArrayOfDashPatterns</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13195"/>
			<description>Entry D in BoxStyle shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in BoxStyle is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13196"/>
			<description>Entry S in BoxStyle shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in BoxStyle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_5" clause="6" testNumber="13197"/>
			<description>Entry S with type Name in BoxStyle shall have one of values: S, D</description>
			<test>SHasTypeName != true || SNameValue == "S" || SNameValue == "D"</test>
			<error>
				<message>Entry S with type Name in BoxStyle has incorrect value %2 instead of S, D</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13198"/>
			<description>Entry W in BoxStyle shall have type Number</description>
			<test>containsW == false || WHasTypeNumber == true</test>
			<error>
				<message>Entry W in BoxStyle is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="1" testNumber="13307"/>
			<description>CIDFontDescriptorMetrics shall not contain entries except Ascent, AvgWidth, CapHeight, CharSet, Descent, Flags, FontBBox, FontName, ItalicAngle, Leading, MaxWidth, MissingWidth, StemH, StemV, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').length == 0</test>
			<error>
				<message>CIDFontDescriptorMetrics contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13308"/>
			<description>Entry Ascent in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="7" testNumber="13309"/>
			<description>Entry Ascent in CIDFontDescriptorMetrics is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13310"/>
			<description>Entry AvgWidth in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13311"/>
			<description>Entry CapHeight in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13312"/>
			<description>Entry CharSet in CIDFontDescriptorMetrics shall have type String</description>
			<test>containsCharSet == false || CharSetHasTypeString == true</test>
			<error>
				<message>Entry CharSet in CIDFontDescriptorMetrics is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13313"/>
			<description>Entry Descent in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="7" testNumber="13314"/>
			<description>Entry Descent in CIDFontDescriptorMetrics is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="14" testNumber="13315"/>
			<description>Entry Descent with type Number in CIDFontDescriptorMetrics shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in CIDFontDescriptorMetrics does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13316"/>
			<description>Entry Flags in CIDFontDescriptorMetrics shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in CIDFontDescriptorMetrics is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="7" testNumber="13317"/>
			<description>Entry Flags in CIDFontDescriptorMetrics is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="9" testNumber="13318"/>
			<description>Entry Flags with type Bitmask in CIDFontDescriptorMetrics shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in CIDFontDescriptorMetrics does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13319"/>
			<description>Entry FontBBox in CIDFontDescriptorMetrics shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in CIDFontDescriptorMetrics is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="7" testNumber="13320"/>
			<description>Entry FontBBox in CIDFontDescriptorMetrics is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13321"/>
			<description>Entry FontName in CIDFontDescriptorMetrics shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in CIDFontDescriptorMetrics is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="7" testNumber="13322"/>
			<description>Entry FontName in CIDFontDescriptorMetrics is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13323"/>
			<description>Entry ItalicAngle in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="7" testNumber="13324"/>
			<description>Entry ItalicAngle in CIDFontDescriptorMetrics is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13325"/>
			<description>Entry Leading in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13326"/>
			<description>Entry MaxWidth in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13327"/>
			<description>Entry MissingWidth in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13328"/>
			<description>Entry StemH in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13329"/>
			<description>Entry StemV in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="7" testNumber="13330"/>
			<description>Entry StemV in CIDFontDescriptorMetrics is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13331"/>
			<description>Entry Type in CIDFontDescriptorMetrics shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CIDFontDescriptorMetrics is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="7" testNumber="13332"/>
			<description>Entry Type in CIDFontDescriptorMetrics is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="6" testNumber="13333"/>
			<description>Entry Type with type Name in CIDFontDescriptorMetrics shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in CIDFontDescriptorMetrics has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13334"/>
			<description>Entry XHeight in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_5" clause="1" testNumber="13440"/>
			<description>CIDSystemInfo shall not contain entries except Ordering, Registry, Supplement</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ordering' &amp;&amp; elem != 'Registry' &amp;&amp; elem != 'Supplement').length == 0</test>
			<error>
				<message>CIDSystemInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ordering' &amp;&amp; elem != 'Registry' &amp;&amp; elem != 'Supplement').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13441"/>
			<description>Entry Ordering in CIDSystemInfo shall have type StringAscii</description>
			<test>containsOrdering == false || OrderingHasTypeStringAscii == true</test>
			<error>
				<message>Entry Ordering in CIDSystemInfo is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_5" clause="7" testNumber="13442"/>
			<description>Entry Ordering in CIDSystemInfo is required</description>
			<test>containsOrdering == true</test>
			<error>
				<message>Entry Ordering in CIDSystemInfo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13443"/>
			<description>Entry Registry in CIDSystemInfo shall have type StringAscii</description>
			<test>containsRegistry == false || RegistryHasTypeStringAscii == true</test>
			<error>
				<message>Entry Registry in CIDSystemInfo is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_5" clause="7" testNumber="13444"/>
			<description>Entry Registry in CIDSystemInfo is required</description>
			<test>containsRegistry == true</test>
			<error>
				<message>Entry Registry in CIDSystemInfo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13445"/>
			<description>Entry Supplement in CIDSystemInfo shall have type Integer</description>
			<test>containsSupplement == false || SupplementHasTypeInteger == true</test>
			<error>
				<message>Entry Supplement in CIDSystemInfo is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_5" clause="7" testNumber="13446"/>
			<description>Entry Supplement in CIDSystemInfo is required</description>
			<test>containsSupplement == true</test>
			<error>
				<message>Entry Supplement in CIDSystemInfo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="1" testNumber="13573"/>
			<description>CMapStream shall not contain entries except CIDSystemInfo, CMapName, DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Type, UseCMap, WMode</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CIDSystemInfo' &amp;&amp; elem != 'CMapName' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UseCMap' &amp;&amp; elem != 'WMode').length == 0</test>
			<error>
				<message>CMapStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CIDSystemInfo' &amp;&amp; elem != 'CMapName' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UseCMap' &amp;&amp; elem != 'WMode').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13574"/>
			<description>Entry CIDSystemInfo with type Dictionary in CMapStream shall be object CIDSystemInfo</description>
			<test>CIDSystemInfoHasTypeDictionary != true || CIDSystemInfo_size == 1</test>
			<error>
				<message>Entry CIDSystemInfo with type Dictionary in CMapStream is not object CIDSystemInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13575"/>
			<description>Entry CIDSystemInfo in CMapStream shall have type Dictionary</description>
			<test>containsCIDSystemInfo == false || CIDSystemInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry CIDSystemInfo in CMapStream is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="7" testNumber="13576"/>
			<description>Entry CIDSystemInfo in CMapStream is required</description>
			<test>containsCIDSystemInfo == true</test>
			<error>
				<message>Entry CIDSystemInfo in CMapStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13577"/>
			<description>Entry CMapName in CMapStream shall have type Name</description>
			<test>containsCMapName == false || CMapNameHasTypeName == true</test>
			<error>
				<message>Entry CMapName in CMapStream is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="7" testNumber="13578"/>
			<description>Entry CMapName in CMapStream is required</description>
			<test>containsCMapName == true</test>
			<error>
				<message>Entry CMapName in CMapStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13579"/>
			<description>Entry DL in CMapStream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in CMapStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="13580"/>
			<description>Entry DL with type Integer in CMapStream shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in CMapStream does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13581"/>
			<description>Entry DecodeParms with type Array in CMapStream shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in CMapStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13582"/>
			<description>Entry DecodeParms with type Dictionary in CMapStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in CMapStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13583"/>
			<description>Entry DecodeParms in CMapStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in CMapStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="13584"/>
			<description>Entry DecodeParms with type Array in CMapStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in CMapStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13585"/>
			<description>Entry F with type Dictionary in CMapStream shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in CMapStream is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13586"/>
			<description>Entry F in CMapStream shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in CMapStream is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13587"/>
			<description>Entry FDecodeParms with type Array in CMapStream shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in CMapStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13588"/>
			<description>Entry FDecodeParms with type Dictionary in CMapStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in CMapStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13589"/>
			<description>Entry FDecodeParms in CMapStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in CMapStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="13590"/>
			<description>Entry FDecodeParms with type Array in CMapStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in CMapStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13591"/>
			<description>Entry FFilter with type Array in CMapStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in CMapStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13592"/>
			<description>Entry FFilter in CMapStream shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in CMapStream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="13593"/>
			<description>Entry FFilter with type Array in CMapStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in CMapStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="13594"/>
			<description>Entry FFilter with type Name in CMapStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in CMapStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13595"/>
			<description>Entry Filter with type Array in CMapStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in CMapStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13596"/>
			<description>Entry Filter in CMapStream shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in CMapStream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="13597"/>
			<description>Entry Filter with type Array in CMapStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in CMapStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="13598"/>
			<description>Entry Filter with type Name in CMapStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in CMapStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13599"/>
			<description>Entry Length in CMapStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in CMapStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="7" testNumber="13600"/>
			<description>Entry Length in CMapStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in CMapStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13601"/>
			<description>Entry Type in CMapStream shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CMapStream is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="7" testNumber="13602"/>
			<description>Entry Type in CMapStream is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in CMapStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="13603"/>
			<description>Entry Type with type Name in CMapStream shall have value CMap</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CMap"</test>
			<error>
				<message>Entry Type with type Name in CMapStream has incorrect value %2 instead of CMap</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13604"/>
			<description>Entry UseCMap with type Stream in CMapStream shall be object Stream</description>
			<test>UseCMapHasTypeStream != true || UseCMap_size == 1</test>
			<error>
				<message>Entry UseCMap with type Stream in CMapStream is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13605"/>
			<description>Entry UseCMap in CMapStream shall have one of types: Stream, Name</description>
			<test>containsUseCMap == false || UseCMapHasTypeStream == true || UseCMapHasTypeName == true</test>
			<error>
				<message>Entry UseCMap in CMapStream is not one of types: Stream, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="10" testNumber="13606"/>
			<description>Entry UseCMap with type Stream in CMapStream shall be indirect</description>
			<test>UseCMapHasTypeStream != true || isUseCMapIndirect == true</test>
			<error>
				<message>Entry UseCMap with type Stream in CMapStream is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="13607"/>
			<description>Entry UseCMap with type Name in CMapStream shall have one of values: GBK2K-V, ETenms-B5-H, 83pv-RKSJ-H, UniKS-UTF16-V, KSCpc-EUC-H, KSCms-UHC-HW-V, GB-EUC-H, B5pc-V, KSC-EUC-H, HKscs-B5-V, GBK2K-H, B5pc-H, KSCms-UHC-H, HKscs-B5-H, UniJIS-UCS2-V, UniJIS-UCS2-HW-H, GB-EUC-V, 90msp-RKSJ-H, UniJIS-UTF16-H, KSC-EUC-V, ETen-B5-V, CNS-EUC-H, UniCNS-UCS2-H, UniJIS-UCS2-H, UniJIS-UCS2-HW-V, ETenms-B5-V, CNS-EUC-V, 90msp-RKSJ-V, UniKS-UCS2-H, UniKS-UTF16-H, ETen-B5-H, 90ms-RKSJ-V, GBpc-EUC-H, Ext-RKSJ-H, UniKS-UCS2-V, Identity-V, H, GBpc-EUC-V, GBKp-EUC-H, KSCms-UHC-V, Add-RKSJ-H, UniCNS-UTF16-H, UniJIS-UTF16-V, V, UniCNS-UCS2-V, GBKp-EUC-V, Add-RKSJ-V, 90pv-RKSJ-H, GBK-EUC-V, UniGB-UTF16-V, UniCNS-UTF16-V, GBK-EUC-H, UniGB-UCS2-H, EUC-V, UniGB-UTF16-H, Ext-RKSJ-V, 90ms-RKSJ-H, Identity-H, UniGB-UCS2-V, EUC-H, KSCms-UHC-HW-H</description>
			<test>UseCMapHasTypeName != true || UseCMapNameValue == "GB-EUC-H" || UseCMapNameValue == "GB-EUC-V" || UseCMapNameValue == "GBpc-EUC-H" || UseCMapNameValue == "GBpc-EUC-V" || UseCMapNameValue == "GBK-EUC-H" || UseCMapNameValue == "GBK-EUC-V" || UseCMapNameValue == "GBKp-EUC-H" || UseCMapNameValue == "GBKp-EUC-V" || UseCMapNameValue == "GBK2K-H" || UseCMapNameValue == "GBK2K-V" || UseCMapNameValue == "UniGB-UCS2-H" || UseCMapNameValue == "UniGB-UCS2-V" || UseCMapNameValue == "UniGB-UTF16-H" || UseCMapNameValue == "UniGB-UTF16-V" || UseCMapNameValue == "B5pc-H" || UseCMapNameValue == "B5pc-V" || UseCMapNameValue == "HKscs-B5-H" || UseCMapNameValue == "HKscs-B5-V" || UseCMapNameValue == "ETen-B5-H" || UseCMapNameValue == "ETen-B5-V" || UseCMapNameValue == "ETenms-B5-H" || UseCMapNameValue == "ETenms-B5-V" || UseCMapNameValue == "CNS-EUC-H" || UseCMapNameValue == "CNS-EUC-V" || UseCMapNameValue == "UniCNS-UCS2-H" || UseCMapNameValue == "UniCNS-UCS2-V" || UseCMapNameValue == "UniCNS-UTF16-H" || UseCMapNameValue == "UniCNS-UTF16-V" || UseCMapNameValue == "83pv-RKSJ-H" || UseCMapNameValue == "90ms-RKSJ-H" || UseCMapNameValue == "90ms-RKSJ-V" || UseCMapNameValue == "90msp-RKSJ-H" || UseCMapNameValue == "90msp-RKSJ-V" || UseCMapNameValue == "90pv-RKSJ-H" || UseCMapNameValue == "Add-RKSJ-H" || UseCMapNameValue == "Add-RKSJ-V" || UseCMapNameValue == "EUC-H" || UseCMapNameValue == "EUC-V" || UseCMapNameValue == "Ext-RKSJ-H" || UseCMapNameValue == "Ext-RKSJ-V" || UseCMapNameValue == "H" || UseCMapNameValue == "V" || UseCMapNameValue == "UniJIS-UCS2-H" || UseCMapNameValue == "UniJIS-UCS2-V" || UseCMapNameValue == "UniJIS-UCS2-HW-H" || UseCMapNameValue == "UniJIS-UCS2-HW-V" || UseCMapNameValue == "UniJIS-UTF16-H" || UseCMapNameValue == "UniJIS-UTF16-V" || UseCMapNameValue == "KSC-EUC-H" || UseCMapNameValue == "KSC-EUC-V" || UseCMapNameValue == "KSCms-UHC-H" || UseCMapNameValue == "KSCms-UHC-V" || UseCMapNameValue == "KSCms-UHC-HW-H" || UseCMapNameValue == "KSCms-UHC-HW-V" || UseCMapNameValue == "KSCpc-EUC-H" || UseCMapNameValue == "UniKS-UCS2-H" || UseCMapNameValue == "UniKS-UCS2-V" || UseCMapNameValue == "UniKS-UTF16-H" || UseCMapNameValue == "UniKS-UTF16-V" || UseCMapNameValue == "Identity-H" || UseCMapNameValue == "Identity-V"</test>
			<error>
				<message>Entry UseCMap with type Name in CMapStream has incorrect value %2 instead of GBK2K-V, ETenms-B5-H, 83pv-RKSJ-H, UniKS-UTF16-V, KSCpc-EUC-H, KSCms-UHC-HW-V, GB-EUC-H, B5pc-V, KSC-EUC-H, HKscs-B5-V, GBK2K-H, B5pc-H, KSCms-UHC-H, HKscs-B5-H, UniJIS-UCS2-V, UniJIS-UCS2-HW-H, GB-EUC-V, 90msp-RKSJ-H, UniJIS-UTF16-H, KSC-EUC-V, ETen-B5-V, CNS-EUC-H, UniCNS-UCS2-H, UniJIS-UCS2-H, UniJIS-UCS2-HW-V, ETenms-B5-V, CNS-EUC-V, 90msp-RKSJ-V, UniKS-UCS2-H, UniKS-UTF16-H, ETen-B5-H, 90ms-RKSJ-V, GBpc-EUC-H, Ext-RKSJ-H, UniKS-UCS2-V, Identity-V, H, GBpc-EUC-V, GBKp-EUC-H, KSCms-UHC-V, Add-RKSJ-H, UniCNS-UTF16-H, UniJIS-UTF16-V, V, UniCNS-UCS2-V, GBKp-EUC-V, Add-RKSJ-V, 90pv-RKSJ-H, GBK-EUC-V, UniGB-UTF16-V, UniCNS-UTF16-V, GBK-EUC-H, UniGB-UCS2-H, EUC-V, UniGB-UTF16-H, Ext-RKSJ-V, 90ms-RKSJ-H, Identity-H, UniGB-UCS2-V, EUC-H, KSCms-UHC-HW-H</message>
				<arguments>
					<argument>keyName</argument>
					<argument>UseCMapNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13608"/>
			<description>Entry WMode in CMapStream shall have type Integer</description>
			<test>containsWMode == false || WModeHasTypeInteger == true</test>
			<error>
				<message>Entry WMode in CMapStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="13609"/>
			<description>Entry WMode with type Integer in CMapStream shall have one of values: 0, 1</description>
			<test>WModeHasTypeInteger != true || WModeIntegerValue == 1 || WModeIntegerValue == 0</test>
			<error>
				<message>Entry WMode with type Integer in CMapStream has incorrect value %2 instead of 0, 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>WModeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_5" clause="2" testNumber="13741"/>
			<description>CalGrayColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>CalGrayColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13742"/>
			<description>Entry 0 in CalGrayColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in CalGrayColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_5" clause="6" testNumber="13743"/>
			<description>Entry 0 with type Name in CalGrayColorSpace shall have value CalGray</description>
			<test>entry0HasTypeName != true || entry0NameValue == "CalGray"</test>
			<error>
				<message>Entry 0 with type Name in CalGrayColorSpace has incorrect value %2 instead of CalGray</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13744"/>
			<description>Entry 1 with type Dictionary in CalGrayColorSpace shall be object CalGrayDict</description>
			<test>entry1HasTypeDictionary != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Dictionary in CalGrayColorSpace is not object CalGrayDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13745"/>
			<description>Entry 1 in CalGrayColorSpace shall have type Dictionary</description>
			<test>size &lt;= 1 || entry1HasTypeDictionary == true</test>
			<error>
				<message>Entry 1 in CalGrayColorSpace is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_5" clause="1" testNumber="13793"/>
			<description>CalGrayDict shall not contain entries except BlackPoint, Gamma, WhitePoint</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'Gamma' &amp;&amp; elem != 'WhitePoint').length == 0</test>
			<error>
				<message>CalGrayDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'Gamma' &amp;&amp; elem != 'WhitePoint').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13794"/>
			<description>Entry BlackPoint with type Array in CalGrayDict shall be object BlackpointArray</description>
			<test>BlackPointHasTypeArray != true || BlackPoint_size == 1</test>
			<error>
				<message>Entry BlackPoint with type Array in CalGrayDict is not object BlackpointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13795"/>
			<description>Entry BlackPoint in CalGrayDict shall have type Array</description>
			<test>containsBlackPoint == false || BlackPointHasTypeArray == true</test>
			<error>
				<message>Entry BlackPoint in CalGrayDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13796"/>
			<description>Entry Gamma in CalGrayDict shall have type Number</description>
			<test>containsGamma == false || GammaHasTypeNumber == true</test>
			<error>
				<message>Entry Gamma in CalGrayDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_5" clause="14" testNumber="13797"/>
			<description>Entry Gamma with type Number in CalGrayDict shall satisfy possible value predicate: fn:Eval(@Gamma &gt; 0)</description>
			<test>GammaHasTypeNumber != true || GammaNumberValue &gt; 0</test>
			<error>
				<message>Entry Gamma with type Number in CalGrayDict does not satisfy possible value predicate: fn:Eval(@Gamma &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13798"/>
			<description>Entry WhitePoint with type Array in CalGrayDict shall be object WhitepointArray</description>
			<test>WhitePointHasTypeArray != true || WhitePoint_size == 1</test>
			<error>
				<message>Entry WhitePoint with type Array in CalGrayDict is not object WhitepointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13799"/>
			<description>Entry WhitePoint in CalGrayDict shall have type Array</description>
			<test>containsWhitePoint == false || WhitePointHasTypeArray == true</test>
			<error>
				<message>Entry WhitePoint in CalGrayDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_5" clause="7" testNumber="13800"/>
			<description>Entry WhitePoint in CalGrayDict is required</description>
			<test>containsWhitePoint == true</test>
			<error>
				<message>Entry WhitePoint in CalGrayDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_5" clause="2" testNumber="13845"/>
			<description>CalRGBColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>CalRGBColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13846"/>
			<description>Entry 0 in CalRGBColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in CalRGBColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_5" clause="6" testNumber="13847"/>
			<description>Entry 0 with type Name in CalRGBColorSpace shall have value CalRGB</description>
			<test>entry0HasTypeName != true || entry0NameValue == "CalRGB"</test>
			<error>
				<message>Entry 0 with type Name in CalRGBColorSpace has incorrect value %2 instead of CalRGB</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13848"/>
			<description>Entry 1 with type Dictionary in CalRGBColorSpace shall be object CalRGBDict</description>
			<test>entry1HasTypeDictionary != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Dictionary in CalRGBColorSpace is not object CalRGBDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13849"/>
			<description>Entry 1 in CalRGBColorSpace shall have type Dictionary</description>
			<test>size &lt;= 1 || entry1HasTypeDictionary == true</test>
			<error>
				<message>Entry 1 in CalRGBColorSpace is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_5" clause="1" testNumber="13905"/>
			<description>CalRGBDict shall not contain entries except BlackPoint, Gamma, Matrix, WhitePoint</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'Gamma' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'WhitePoint').length == 0</test>
			<error>
				<message>CalRGBDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'Gamma' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'WhitePoint').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13906"/>
			<description>Entry BlackPoint with type Array in CalRGBDict shall be object BlackpointArray</description>
			<test>BlackPointHasTypeArray != true || BlackPoint_size == 1</test>
			<error>
				<message>Entry BlackPoint with type Array in CalRGBDict is not object BlackpointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13907"/>
			<description>Entry BlackPoint in CalRGBDict shall have type Array</description>
			<test>containsBlackPoint == false || BlackPointHasTypeArray == true</test>
			<error>
				<message>Entry BlackPoint in CalRGBDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13908"/>
			<description>Entry Gamma with type Array in CalRGBDict shall be object GammaArray</description>
			<test>GammaHasTypeArray != true || Gamma_size == 1</test>
			<error>
				<message>Entry Gamma with type Array in CalRGBDict is not object GammaArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13909"/>
			<description>Entry Gamma in CalRGBDict shall have type Array</description>
			<test>containsGamma == false || GammaHasTypeArray == true</test>
			<error>
				<message>Entry Gamma in CalRGBDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13910"/>
			<description>Entry Matrix with type Array in CalRGBDict shall be object ArrayOf_9Numbers</description>
			<test>MatrixHasTypeArray != true || Matrix_size == 1</test>
			<error>
				<message>Entry Matrix with type Array in CalRGBDict is not object ArrayOf_9Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13911"/>
			<description>Entry Matrix in CalRGBDict shall have type Array</description>
			<test>containsMatrix == false || MatrixHasTypeArray == true</test>
			<error>
				<message>Entry Matrix in CalRGBDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="13912"/>
			<description>Entry WhitePoint with type Array in CalRGBDict shall be object WhitepointArray</description>
			<test>WhitePointHasTypeArray != true || WhitePoint_size == 1</test>
			<error>
				<message>Entry WhitePoint with type Array in CalRGBDict is not object WhitepointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="13913"/>
			<description>Entry WhitePoint in CalRGBDict shall have type Array</description>
			<test>containsWhitePoint == false || WhitePointHasTypeArray == true</test>
			<error>
				<message>Entry WhitePoint in CalRGBDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_5" clause="7" testNumber="13914"/>
			<description>Entry WhitePoint in CalRGBDict is required</description>
			<test>containsWhitePoint == true</test>
			<error>
				<message>Entry WhitePoint in CalRGBDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="1" testNumber="14113"/>
			<description>Catalog shall not contain entries except AA, AcroForm, Dests, Lang, Legal, MarkInfo, Metadata, Names, NeedsRendering, OCProperties, OpenAction, Outlines, OutputIntents, PageLabels, PageLayout, PageMode, Pages, Perms, PieceInfo, SpiderInfo, StructTreeRoot, Threads, Type, URI, Version, ViewerPreferences</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'AcroForm' &amp;&amp; elem != 'Dests' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'Legal' &amp;&amp; elem != 'MarkInfo' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Names' &amp;&amp; elem != 'NeedsRendering' &amp;&amp; elem != 'OCProperties' &amp;&amp; elem != 'OpenAction' &amp;&amp; elem != 'Outlines' &amp;&amp; elem != 'OutputIntents' &amp;&amp; elem != 'PageLabels' &amp;&amp; elem != 'PageLayout' &amp;&amp; elem != 'PageMode' &amp;&amp; elem != 'Pages' &amp;&amp; elem != 'Perms' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'SpiderInfo' &amp;&amp; elem != 'StructTreeRoot' &amp;&amp; elem != 'Threads' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URI' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'ViewerPreferences').length == 0</test>
			<error>
				<message>Catalog contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'AcroForm' &amp;&amp; elem != 'Dests' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'Legal' &amp;&amp; elem != 'MarkInfo' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Names' &amp;&amp; elem != 'NeedsRendering' &amp;&amp; elem != 'OCProperties' &amp;&amp; elem != 'OpenAction' &amp;&amp; elem != 'Outlines' &amp;&amp; elem != 'OutputIntents' &amp;&amp; elem != 'PageLabels' &amp;&amp; elem != 'PageLayout' &amp;&amp; elem != 'PageMode' &amp;&amp; elem != 'Pages' &amp;&amp; elem != 'Perms' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'SpiderInfo' &amp;&amp; elem != 'StructTreeRoot' &amp;&amp; elem != 'Threads' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URI' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'ViewerPreferences').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14114"/>
			<description>Entry AA with type Dictionary in Catalog shall be object AddActionCatalog</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in Catalog is not object AddActionCatalog</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14115"/>
			<description>Entry AA in Catalog shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14116"/>
			<description>Entry AcroForm with type Dictionary in Catalog shall be object InteractiveForm</description>
			<test>AcroFormHasTypeDictionary != true || AcroForm_size == 1</test>
			<error>
				<message>Entry AcroForm with type Dictionary in Catalog is not object InteractiveForm</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14117"/>
			<description>Entry AcroForm in Catalog shall have type Dictionary</description>
			<test>containsAcroForm == false || AcroFormHasTypeDictionary == true</test>
			<error>
				<message>Entry AcroForm in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14118"/>
			<description>Entry Dests with type Dictionary in Catalog shall be object DestsMap</description>
			<test>DestsHasTypeDictionary != true || Dests_size == 1</test>
			<error>
				<message>Entry Dests with type Dictionary in Catalog is not object DestsMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14119"/>
			<description>Entry Dests in Catalog shall have type Dictionary</description>
			<test>containsDests == false || DestsHasTypeDictionary == true</test>
			<error>
				<message>Entry Dests in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="12" testNumber="14120"/>
			<description>If entry Dests with type Dictionary in Catalog satisfies condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>DestsHasTypeDictionary != true || (isDestsIndirect == true || (true) == false)</test>
			<error>
				<message>Entry Dests with type Dictionary in Catalog is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14121"/>
			<description>Entry Lang in Catalog shall have type StringText</description>
			<test>containsLang == false || LangHasTypeStringText == true</test>
			<error>
				<message>Entry Lang in Catalog is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14122"/>
			<description>Entry Legal with type Dictionary in Catalog shall be object LegalAttestation</description>
			<test>LegalHasTypeDictionary != true || Legal_size == 1</test>
			<error>
				<message>Entry Legal with type Dictionary in Catalog is not object LegalAttestation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14123"/>
			<description>Entry Legal in Catalog shall have type Dictionary</description>
			<test>containsLegal == false || LegalHasTypeDictionary == true</test>
			<error>
				<message>Entry Legal in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14124"/>
			<description>Entry MarkInfo with type Dictionary in Catalog shall be object MarkInfo</description>
			<test>MarkInfoHasTypeDictionary != true || MarkInfo_size == 1</test>
			<error>
				<message>Entry MarkInfo with type Dictionary in Catalog is not object MarkInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14125"/>
			<description>Entry MarkInfo in Catalog shall have type Dictionary</description>
			<test>containsMarkInfo == false || MarkInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry MarkInfo in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14126"/>
			<description>Entry Metadata with type Stream in Catalog shall be object Metadata</description>
			<test>MetadataHasTypeStream != true || Metadata_size == 1</test>
			<error>
				<message>Entry Metadata with type Stream in Catalog is not object Metadata</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14127"/>
			<description>Entry Metadata in Catalog shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in Catalog is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="10" testNumber="14128"/>
			<description>Entry Metadata with type Stream in Catalog shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in Catalog is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14129"/>
			<description>Entry Names with type Dictionary in Catalog shall be object Name</description>
			<test>NamesHasTypeDictionary != true || Names_size == 1</test>
			<error>
				<message>Entry Names with type Dictionary in Catalog is not object Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14130"/>
			<description>Entry Names in Catalog shall have type Dictionary</description>
			<test>containsNames == false || NamesHasTypeDictionary == true</test>
			<error>
				<message>Entry Names in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14131"/>
			<description>Entry NeedsRendering in Catalog shall have type Boolean</description>
			<test>containsNeedsRendering == false || NeedsRenderingHasTypeBoolean == true</test>
			<error>
				<message>Entry NeedsRendering in Catalog is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14132"/>
			<description>Entry OCProperties with type Dictionary in Catalog shall be object OptContentProperties</description>
			<test>OCPropertiesHasTypeDictionary != true || OCProperties_size == 1</test>
			<error>
				<message>Entry OCProperties with type Dictionary in Catalog is not object OptContentProperties</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14133"/>
			<description>Entry OCProperties in Catalog shall have type Dictionary</description>
			<test>containsOCProperties == false || OCPropertiesHasTypeDictionary == true</test>
			<error>
				<message>Entry OCProperties in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14134"/>
			<description>Entry OpenAction with type Array in Catalog shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>OpenActionHasTypeArray != true || OpenAction_size == 1</test>
			<error>
				<message>Entry OpenAction with type Array in Catalog is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14135"/>
			<description>Entry OpenAction with type Dictionary in Catalog shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>OpenActionHasTypeDictionary != true || OpenAction_size == 1</test>
			<error>
				<message>Entry OpenAction with type Dictionary in Catalog is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14136"/>
			<description>Entry OpenAction in Catalog shall have one of types: Array, Dictionary</description>
			<test>containsOpenAction == false || OpenActionHasTypeArray == true || OpenActionHasTypeDictionary == true</test>
			<error>
				<message>Entry OpenAction in Catalog is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14137"/>
			<description>Entry Outlines with type Dictionary in Catalog shall be object Outline</description>
			<test>OutlinesHasTypeDictionary != true || Outlines_size == 1</test>
			<error>
				<message>Entry Outlines with type Dictionary in Catalog is not object Outline</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14138"/>
			<description>Entry Outlines in Catalog shall have type Dictionary</description>
			<test>containsOutlines == false || OutlinesHasTypeDictionary == true</test>
			<error>
				<message>Entry Outlines in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="12" testNumber="14139"/>
			<description>If entry Outlines with type Dictionary in Catalog satisfies condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>OutlinesHasTypeDictionary != true || (isOutlinesIndirect == true || (true) == false)</test>
			<error>
				<message>Entry Outlines with type Dictionary in Catalog is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14140"/>
			<description>Entry OutputIntents with type Array in Catalog shall be object ArrayOfOutputIntents</description>
			<test>OutputIntentsHasTypeArray != true || OutputIntents_size == 1</test>
			<error>
				<message>Entry OutputIntents with type Array in Catalog is not object ArrayOfOutputIntents</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14141"/>
			<description>Entry OutputIntents in Catalog shall have type Array</description>
			<test>containsOutputIntents == false || OutputIntentsHasTypeArray == true</test>
			<error>
				<message>Entry OutputIntents in Catalog is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14142"/>
			<description>Entry PageLabels with type NumberTree in Catalog shall be object CatalogNumberTreePageLabels</description>
			<test>PageLabelsHasTypeNumberTree != true || PageLabels_size == 1</test>
			<error>
				<message>Entry PageLabels with type NumberTree in Catalog is not object CatalogNumberTreePageLabels</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14143"/>
			<description>Entry PageLabels in Catalog shall have type NumberTree</description>
			<test>containsPageLabels == false || PageLabelsHasTypeNumberTree == true</test>
			<error>
				<message>Entry PageLabels in Catalog is not of type NumberTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14144"/>
			<description>Entry PageLayout in Catalog shall have type Name</description>
			<test>containsPageLayout == false || PageLayoutHasTypeName == true</test>
			<error>
				<message>Entry PageLayout in Catalog is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="6" testNumber="14145"/>
			<description>Entry PageLayout with type Name in Catalog shall have one of values: SinglePage, TwoColumnLeft, OneColumn, TwoPageRight, TwoPageLeft, TwoColumnRight</description>
			<test>PageLayoutHasTypeName != true || PageLayoutNameValue == "SinglePage" || PageLayoutNameValue == "OneColumn" || PageLayoutNameValue == "TwoColumnLeft" || PageLayoutNameValue == "TwoColumnRight" || PageLayoutNameValue == "TwoPageLeft" || PageLayoutNameValue == "TwoPageRight"</test>
			<error>
				<message>Entry PageLayout with type Name in Catalog has incorrect value %2 instead of SinglePage, TwoColumnLeft, OneColumn, TwoPageRight, TwoPageLeft, TwoColumnRight</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PageLayoutNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14146"/>
			<description>Entry PageMode in Catalog shall have type Name</description>
			<test>containsPageMode == false || PageModeHasTypeName == true</test>
			<error>
				<message>Entry PageMode in Catalog is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="6" testNumber="14147"/>
			<description>Entry PageMode with type Name in Catalog shall have one of values: UseOutlines, UseThumbs, UseOC, UseAttachments, UseNone, FullScreen</description>
			<test>PageModeHasTypeName != true || PageModeNameValue == "UseNone" || PageModeNameValue == "UseOutlines" || PageModeNameValue == "UseThumbs" || PageModeNameValue == "FullScreen" || PageModeNameValue == "UseOC" || PageModeNameValue == "UseAttachments"</test>
			<error>
				<message>Entry PageMode with type Name in Catalog has incorrect value %2 instead of UseOutlines, UseThumbs, UseOC, UseAttachments, UseNone, FullScreen</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PageModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14148"/>
			<description>Entry Pages with type Dictionary in Catalog shall be object PageTreeNodeRoot</description>
			<test>PagesHasTypeDictionary != true || Pages_size == 1</test>
			<error>
				<message>Entry Pages with type Dictionary in Catalog is not object PageTreeNodeRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14149"/>
			<description>Entry Pages in Catalog shall have type Dictionary</description>
			<test>containsPages == false || PagesHasTypeDictionary == true</test>
			<error>
				<message>Entry Pages in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="7" testNumber="14150"/>
			<description>Entry Pages in Catalog is required</description>
			<test>containsPages == true</test>
			<error>
				<message>Entry Pages in Catalog is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="10" testNumber="14151"/>
			<description>Entry Pages with type Dictionary in Catalog shall be indirect</description>
			<test>PagesHasTypeDictionary != true || isPagesIndirect == true</test>
			<error>
				<message>Entry Pages with type Dictionary in Catalog is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14152"/>
			<description>Entry Perms with type Dictionary in Catalog shall be object Permissions</description>
			<test>PermsHasTypeDictionary != true || Perms_size == 1</test>
			<error>
				<message>Entry Perms with type Dictionary in Catalog is not object Permissions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14153"/>
			<description>Entry Perms in Catalog shall have type Dictionary</description>
			<test>containsPerms == false || PermsHasTypeDictionary == true</test>
			<error>
				<message>Entry Perms in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14154"/>
			<description>Entry PieceInfo with type Dictionary in Catalog shall be object PagePiece</description>
			<test>PieceInfoHasTypeDictionary != true || PieceInfo_size == 1</test>
			<error>
				<message>Entry PieceInfo with type Dictionary in Catalog is not object PagePiece</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14155"/>
			<description>Entry PieceInfo in Catalog shall have type Dictionary</description>
			<test>containsPieceInfo == false || PieceInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry PieceInfo in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14156"/>
			<description>Entry SpiderInfo with type Dictionary in Catalog shall be object WebCaptureInfo</description>
			<test>SpiderInfoHasTypeDictionary != true || SpiderInfo_size == 1</test>
			<error>
				<message>Entry SpiderInfo with type Dictionary in Catalog is not object WebCaptureInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14157"/>
			<description>Entry SpiderInfo in Catalog shall have type Dictionary</description>
			<test>containsSpiderInfo == false || SpiderInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry SpiderInfo in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14158"/>
			<description>Entry StructTreeRoot with type Dictionary in Catalog shall be object StructTreeRoot</description>
			<test>StructTreeRootHasTypeDictionary != true || StructTreeRoot_size == 1</test>
			<error>
				<message>Entry StructTreeRoot with type Dictionary in Catalog is not object StructTreeRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14159"/>
			<description>Entry StructTreeRoot in Catalog shall have type Dictionary</description>
			<test>containsStructTreeRoot == false || StructTreeRootHasTypeDictionary == true</test>
			<error>
				<message>Entry StructTreeRoot in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14160"/>
			<description>Entry Threads with type Array in Catalog shall be object ArrayOfThreads</description>
			<test>ThreadsHasTypeArray != true || Threads_size == 1</test>
			<error>
				<message>Entry Threads with type Array in Catalog is not object ArrayOfThreads</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14161"/>
			<description>Entry Threads in Catalog shall have type Array</description>
			<test>containsThreads == false || ThreadsHasTypeArray == true</test>
			<error>
				<message>Entry Threads in Catalog is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="12" testNumber="14162"/>
			<description>If entry Threads with type Array in Catalog satisfies condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>ThreadsHasTypeArray != true || (isThreadsIndirect == true || (true) == false)</test>
			<error>
				<message>Entry Threads with type Array in Catalog is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14163"/>
			<description>Entry Type in Catalog shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Catalog is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="7" testNumber="14164"/>
			<description>Entry Type in Catalog is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in Catalog is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="6" testNumber="14165"/>
			<description>Entry Type with type Name in Catalog shall have value Catalog</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Catalog"</test>
			<error>
				<message>Entry Type with type Name in Catalog has incorrect value %2 instead of Catalog</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14166"/>
			<description>Entry URI with type Dictionary in Catalog shall be object URI</description>
			<test>URIHasTypeDictionary != true || URI_size == 1</test>
			<error>
				<message>Entry URI with type Dictionary in Catalog is not object URI</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14167"/>
			<description>Entry URI in Catalog shall have type Dictionary</description>
			<test>containsURI == false || URIHasTypeDictionary == true</test>
			<error>
				<message>Entry URI in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14168"/>
			<description>Entry Version in Catalog shall have type Name</description>
			<test>containsVersion == false || VersionHasTypeName == true</test>
			<error>
				<message>Entry Version in Catalog is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="6" testNumber="14169"/>
			<description>Entry Version with type Name in Catalog shall have one of values: 1.0, 1.1, 2.0, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7</description>
			<test>VersionHasTypeName != true || VersionNameValue == "1.0" || VersionNameValue == "1.1" || VersionNameValue == "1.2" || VersionNameValue == "1.3" || VersionNameValue == "1.4" || VersionNameValue == "1.5" || VersionNameValue == "1.6" || VersionNameValue == "1.7" || VersionNameValue == "2.0"</test>
			<error>
				<message>Entry Version with type Name in Catalog has incorrect value %2 instead of 1.0, 1.1, 2.0, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VersionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14170"/>
			<description>Entry ViewerPreferences with type Dictionary in Catalog shall be object ViewerPreferences</description>
			<test>ViewerPreferencesHasTypeDictionary != true || ViewerPreferences_size == 1</test>
			<error>
				<message>Entry ViewerPreferences with type Dictionary in Catalog is not object ViewerPreferences</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14171"/>
			<description>Entry ViewerPreferences in Catalog shall have type Dictionary</description>
			<test>containsViewerPreferences == false || ViewerPreferencesHasTypeDictionary == true</test>
			<error>
				<message>Entry ViewerPreferences in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalogNumberTreePageLabels">
			<id specification="ISO_32000_1_5" clause="18" testNumber="14376"/>
			<description>Entry * in CatalogNumberTreePageLabels shall be object CatalogNumberTreePageLabelsEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in CatalogNumberTreePageLabels is not object CatalogNumberTreePageLabelsEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalogNumberTreePageLabelsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14384"/>
			<description>Entry with type Dictionary in CatalogNumberTreePageLabels shall be object PageLabel</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in CatalogNumberTreePageLabels is not object PageLabel</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalogNumberTreePageLabelsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14385"/>
			<description>Entry in CatalogNumberTreePageLabels shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in CatalogNumberTreePageLabels is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_5" clause="1" testNumber="14392"/>
			<description>CertSeedValue shall not contain entries except Ff, Issuer, OID, Subject, Type, URL</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ff' &amp;&amp; elem != 'Issuer' &amp;&amp; elem != 'OID' &amp;&amp; elem != 'Subject' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URL').length == 0</test>
			<error>
				<message>CertSeedValue contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ff' &amp;&amp; elem != 'Issuer' &amp;&amp; elem != 'OID' &amp;&amp; elem != 'Subject' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URL').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14393"/>
			<description>Entry Ff in CertSeedValue shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in CertSeedValue is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_5" clause="9" testNumber="14394"/>
			<description>Entry Ff with type Bitmask in CertSeedValue shall satisfy special case: fn:Eval(fn:BitsClear(8 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in CertSeedValue does not satisfy special case: fn:Eval(fn:BitsClear(8 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14395"/>
			<description>Entry Issuer with type Array in CertSeedValue shall be object ArrayOfStringsByte</description>
			<test>IssuerHasTypeArray != true || Issuer_size == 1</test>
			<error>
				<message>Entry Issuer with type Array in CertSeedValue is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14396"/>
			<description>Entry Issuer in CertSeedValue shall have type Array</description>
			<test>containsIssuer == false || IssuerHasTypeArray == true</test>
			<error>
				<message>Entry Issuer in CertSeedValue is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14397"/>
			<description>Entry OID with type Array in CertSeedValue shall be object ArrayOfStringsByte</description>
			<test>OIDHasTypeArray != true || OID_size == 1</test>
			<error>
				<message>Entry OID with type Array in CertSeedValue is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14398"/>
			<description>Entry OID in CertSeedValue shall have type Array</description>
			<test>containsOID == false || OIDHasTypeArray == true</test>
			<error>
				<message>Entry OID in CertSeedValue is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14399"/>
			<description>Entry Subject with type Array in CertSeedValue shall be object ArrayOfStringsByte</description>
			<test>SubjectHasTypeArray != true || Subject_size == 1</test>
			<error>
				<message>Entry Subject with type Array in CertSeedValue is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14400"/>
			<description>Entry Subject in CertSeedValue shall have type Array</description>
			<test>containsSubject == false || SubjectHasTypeArray == true</test>
			<error>
				<message>Entry Subject in CertSeedValue is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14401"/>
			<description>Entry Type in CertSeedValue shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CertSeedValue is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_5" clause="6" testNumber="14402"/>
			<description>Entry Type with type Name in CertSeedValue shall have value SVCert</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SVCert"</test>
			<error>
				<message>Entry Type with type Name in CertSeedValue has incorrect value %2 instead of SVCert</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14403"/>
			<description>Entry URL in CertSeedValue shall have type StringAscii</description>
			<test>containsURL == false || URLHasTypeStringAscii == true</test>
			<error>
				<message>Entry URL in CertSeedValue is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACharProcMapEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14472"/>
			<description>Entry with type Stream in CharProcMap shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in CharProcMap is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACharProcMapEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14473"/>
			<description>Entry in CharProcMap shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in CharProcMap is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACharProcMapEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="14474"/>
			<description>Entry with type Stream in CharProcMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in CharProcMap is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AClassMapEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14490"/>
			<description>Entry with type Array in ClassMap shall be object ArrayOfAttributeObjects</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ClassMap is not object ArrayOfAttributeObjects</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AClassMapEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14491"/>
			<description>Entry with type Dictionary in ClassMap shall be object StructureAttributesDict</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ClassMap is not object StructureAttributesDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AClassMapEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14492"/>
			<description>Entry in ClassMap shall have one of types: Array, Dictionary</description>
			<test>HasTypeArray == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ClassMap is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14736"/>
			<description>Entry DefaultCMYK with type Array in ColorSpaceMap shall be one of objects ICCBasedColorSpace, DeviceNColorSpace</description>
			<test>DefaultCMYKHasTypeArray != true || DefaultCMYK_size == 1</test>
			<error>
				<message>Entry DefaultCMYK with type Array in ColorSpaceMap is not one of objects ICCBasedColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14737"/>
			<description>Entry DefaultCMYK in ColorSpaceMap shall have type Array</description>
			<test>containsDefaultCMYK == false || DefaultCMYKHasTypeArray == true</test>
			<error>
				<message>Entry DefaultCMYK in ColorSpaceMap is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14738"/>
			<description>Entry DefaultGray with type Array in ColorSpaceMap shall be one of objects CalGrayColorSpace, ICCBasedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>DefaultGrayHasTypeArray != true || DefaultGray_size == 1</test>
			<error>
				<message>Entry DefaultGray with type Array in ColorSpaceMap is not one of objects CalGrayColorSpace, ICCBasedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14739"/>
			<description>Entry DefaultGray in ColorSpaceMap shall have type Array</description>
			<test>containsDefaultGray == false || DefaultGrayHasTypeArray == true</test>
			<error>
				<message>Entry DefaultGray in ColorSpaceMap is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14740"/>
			<description>Entry DefaultRGB with type Array in ColorSpaceMap shall be one of objects CalRGBColorSpace, ICCBasedColorSpace, DeviceNColorSpace</description>
			<test>DefaultRGBHasTypeArray != true || DefaultRGB_size == 1</test>
			<error>
				<message>Entry DefaultRGB with type Array in ColorSpaceMap is not one of objects CalRGBColorSpace, ICCBasedColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14741"/>
			<description>Entry DefaultRGB in ColorSpaceMap shall have type Array</description>
			<test>containsDefaultRGB == false || DefaultRGBHasTypeArray == true</test>
			<error>
				<message>Entry DefaultRGB in ColorSpaceMap is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMapEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14775"/>
			<description>Entry with type Array in ColorSpaceMap shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ColorSpaceMap is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMapEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14776"/>
			<description>Entry in ColorSpaceMap shall have one of types: Array, Name</description>
			<test>HasTypeArray == true || HasTypeName == true</test>
			<error>
				<message>Entry %1 in ColorSpaceMap is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMapEntry">
			<id specification="ISO_32000_1_5" clause="6" testNumber="14777"/>
			<description>Entry with type Name in ColorSpaceMap shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>HasTypeName != true || NameValue == "DeviceCMYK" || NameValue == "DeviceRGB" || NameValue == "DeviceGray"</test>
			<error>
				<message>Entry %1 with type Name in ColorSpaceMap has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorantsDictEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14791"/>
			<description>Entry with type Array in ColorantsDict shall be object SeparationColorSpace</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ColorantsDict is not object SeparationColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorantsDictEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14792"/>
			<description>Entry in ColorantsDict shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %1 in ColorantsDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_5" clause="1" testNumber="14799"/>
			<description>CryptFilter shall not contain entries except AuthEvent, CFM, Length, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AuthEvent' &amp;&amp; elem != 'CFM' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>CryptFilter contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AuthEvent' &amp;&amp; elem != 'CFM' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14800"/>
			<description>Entry AuthEvent in CryptFilter shall have type Name</description>
			<test>containsAuthEvent == false || AuthEventHasTypeName == true</test>
			<error>
				<message>Entry AuthEvent in CryptFilter is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_5" clause="6" testNumber="14801"/>
			<description>Entry AuthEvent with type Name in CryptFilter shall have one of values: EFOpen, DocOpen</description>
			<test>AuthEventHasTypeName != true || AuthEventNameValue == "DocOpen" || AuthEventNameValue == "EFOpen"</test>
			<error>
				<message>Entry AuthEvent with type Name in CryptFilter has incorrect value %2 instead of EFOpen, DocOpen</message>
				<arguments>
					<argument>keyName</argument>
					<argument>AuthEventNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14802"/>
			<description>Entry CFM in CryptFilter shall have type Name</description>
			<test>containsCFM == false || CFMHasTypeName == true</test>
			<error>
				<message>Entry CFM in CryptFilter is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_5" clause="6" testNumber="14803"/>
			<description>Entry CFM with type Name in CryptFilter shall have one of values: V2, None</description>
			<test>CFMHasTypeName != true || CFMNameValue == "None" || CFMNameValue == "V2"</test>
			<error>
				<message>Entry CFM with type Name in CryptFilter has incorrect value %2 instead of V2, None</message>
				<arguments>
					<argument>keyName</argument>
					<argument>CFMNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14804"/>
			<description>Entry Length in CryptFilter shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in CryptFilter is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_5" clause="7" testNumber="14805"/>
			<description>Entry Length in CryptFilter is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in CryptFilter is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_5" clause="14" testNumber="14806"/>
			<description>Entry Length with type Integer in CryptFilter shall satisfy possible value predicate: fn:Eval((@Length &gt;= 5) &amp;&amp; (@Length &lt;= 16))</description>
			<test>LengthHasTypeInteger != true || (LengthIntegerValue &gt;= 5) &amp;&amp; (LengthIntegerValue &lt;= 16)</test>
			<error>
				<message>Entry Length with type Integer in CryptFilter does not satisfy possible value predicate: fn:Eval((@Length &gt;= 5) &amp;&amp; (@Length &lt;= 16))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_5" clause="15" testNumber="14807"/>
			<description>Entry Length in CryptFilter shall have Integer value 16, if this object satisfies condition @CFM == AESV2</description>
			<test>((CFMNameValue == "AESV2") == false || LengthIntegerValue == 16)</test>
			<error>
				<message>Entry Length in CryptFilter does not have value 16</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_5" clause="15" testNumber="14808"/>
			<description>Entry Length in CryptFilter shall have Integer value 32, if this object satisfies condition @CFM == AESV3</description>
			<test>((CFMNameValue == "AESV3") == false || LengthIntegerValue == 32)</test>
			<error>
				<message>Entry Length in CryptFilter does not have value 32</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_5" clause="13" testNumber="14809"/>
			<description>Entry Length with type Integer in CryptFilter shall have one of values: 16, 32</description>
			<test>LengthHasTypeInteger != true || LengthIntegerValue == 16 || LengthIntegerValue == 32</test>
			<error>
				<message>Entry Length with type Integer in CryptFilter has incorrect value %2 instead of 16, 32</message>
				<arguments>
					<argument>keyName</argument>
					<argument>LengthIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14810"/>
			<description>Entry Type in CryptFilter shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CryptFilter is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_5" clause="6" testNumber="14811"/>
			<description>Entry Type with type Name in CryptFilter shall have value CryptFilter</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CryptFilter"</test>
			<error>
				<message>Entry Type with type Name in CryptFilter has incorrect value %2 instead of CryptFilter</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterMap">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14852"/>
			<description>Entry Identity with type Dictionary in CryptFilterMap shall be object CryptFilter</description>
			<test>IdentityHasTypeDictionary != true || Identity_size == 1</test>
			<error>
				<message>Entry Identity with type Dictionary in CryptFilterMap is not object CryptFilter</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterMap">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14853"/>
			<description>Entry Identity in CryptFilterMap shall have type Dictionary</description>
			<test>containsIdentity == false || IdentityHasTypeDictionary == true</test>
			<error>
				<message>Entry Identity in CryptFilterMap is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterMap">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14854"/>
			<description>Entry StdCF with type Dictionary in CryptFilterMap shall be object CryptFilter</description>
			<test>StdCFHasTypeDictionary != true || StdCF_size == 1</test>
			<error>
				<message>Entry StdCF with type Dictionary in CryptFilterMap is not object CryptFilter</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterMap">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14855"/>
			<description>Entry StdCF in CryptFilterMap shall have type Dictionary</description>
			<test>containsStdCF == false || StdCFHasTypeDictionary == true</test>
			<error>
				<message>Entry StdCF in CryptFilterMap is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterMap">
			<id specification="ISO_32000_1_5" clause="9" testNumber="14856"/>
			<description>Entry StdCF with type Dictionary in CryptFilterMap shall satisfy special case: fn:Eval(StdCF::@AuthEvent== DocOpen)</description>
			<test>StdCFHasTypeDictionary != true || (StdCFAuthEventNameValue == "DocOpen")</test>
			<error>
				<message>Entry StdCF with type Dictionary in CryptFilterMap does not satisfy special case: fn:Eval(StdCF::@AuthEvent== DocOpen)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterMapEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14872"/>
			<description>Entry with type Dictionary in CryptFilterMap shall be object CryptFilter</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in CryptFilterMap is not object CryptFilter</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterMapEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14873"/>
			<description>Entry in CryptFilterMap shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in CryptFilterMap is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_5" clause="1" testNumber="14880"/>
			<description>CryptFilterPublicKey shall not contain entries except AuthEvent, CFM, EncryptMetadata, Length, Recipients, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AuthEvent' &amp;&amp; elem != 'CFM' &amp;&amp; elem != 'EncryptMetadata' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Recipients' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>CryptFilterPublicKey contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AuthEvent' &amp;&amp; elem != 'CFM' &amp;&amp; elem != 'EncryptMetadata' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Recipients' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14881"/>
			<description>Entry AuthEvent in CryptFilterPublicKey shall have type Name</description>
			<test>containsAuthEvent == false || AuthEventHasTypeName == true</test>
			<error>
				<message>Entry AuthEvent in CryptFilterPublicKey is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_5" clause="6" testNumber="14882"/>
			<description>Entry AuthEvent with type Name in CryptFilterPublicKey shall have one of values: EFOpen, DocOpen</description>
			<test>AuthEventHasTypeName != true || AuthEventNameValue == "DocOpen" || AuthEventNameValue == "EFOpen"</test>
			<error>
				<message>Entry AuthEvent with type Name in CryptFilterPublicKey has incorrect value %2 instead of EFOpen, DocOpen</message>
				<arguments>
					<argument>keyName</argument>
					<argument>AuthEventNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14883"/>
			<description>Entry CFM in CryptFilterPublicKey shall have type Name</description>
			<test>containsCFM == false || CFMHasTypeName == true</test>
			<error>
				<message>Entry CFM in CryptFilterPublicKey is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_5" clause="6" testNumber="14884"/>
			<description>Entry CFM with type Name in CryptFilterPublicKey shall have one of values: V2, None</description>
			<test>CFMHasTypeName != true || CFMNameValue == "None" || CFMNameValue == "V2"</test>
			<error>
				<message>Entry CFM with type Name in CryptFilterPublicKey has incorrect value %2 instead of V2, None</message>
				<arguments>
					<argument>keyName</argument>
					<argument>CFMNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14885"/>
			<description>Entry EncryptMetadata in CryptFilterPublicKey shall have type Boolean</description>
			<test>containsEncryptMetadata == false || EncryptMetadataHasTypeBoolean == true</test>
			<error>
				<message>Entry EncryptMetadata in CryptFilterPublicKey is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14886"/>
			<description>Entry Length in CryptFilterPublicKey shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in CryptFilterPublicKey is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_5" clause="7" testNumber="14887"/>
			<description>Entry Length in CryptFilterPublicKey is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in CryptFilterPublicKey is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_5" clause="14" testNumber="14888"/>
			<description>Entry Length with type Integer in CryptFilterPublicKey shall satisfy possible value predicate: fn:Eval((@Length &gt;= 40) &amp;&amp; (@Length &lt;= 128) &amp;&amp; ((@Length mod 8) == 0))</description>
			<test>LengthHasTypeInteger != true || (LengthIntegerValue &gt;= 40) &amp;&amp; (LengthIntegerValue &lt;= 128) &amp;&amp; ((LengthIntegerValue % 8) == 0)</test>
			<error>
				<message>Entry Length with type Integer in CryptFilterPublicKey does not satisfy possible value predicate: fn:Eval((@Length &gt;= 40) &amp;&amp; (@Length &lt;= 128) &amp;&amp; ((@Length mod 8) == 0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_5" clause="15" testNumber="14889"/>
			<description>Entry Length in CryptFilterPublicKey shall have Integer value 128, if this object satisfies condition @CFM == AESV2</description>
			<test>((CFMNameValue == "AESV2") == false || LengthIntegerValue == 128)</test>
			<error>
				<message>Entry Length in CryptFilterPublicKey does not have value 128</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_5" clause="15" testNumber="14890"/>
			<description>Entry Length in CryptFilterPublicKey shall have Integer value 256, if this object satisfies condition @CFM == AESV3</description>
			<test>((CFMNameValue == "AESV3") == false || LengthIntegerValue == 256)</test>
			<error>
				<message>Entry Length in CryptFilterPublicKey does not have value 256</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_5" clause="13" testNumber="14891"/>
			<description>Entry Length with type Integer in CryptFilterPublicKey shall have one of values: 256, 128</description>
			<test>LengthHasTypeInteger != true || LengthIntegerValue == 128 || LengthIntegerValue == 256</test>
			<error>
				<message>Entry Length with type Integer in CryptFilterPublicKey has incorrect value %2 instead of 256, 128</message>
				<arguments>
					<argument>keyName</argument>
					<argument>LengthIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14892"/>
			<description>Entry Recipients with type Array in CryptFilterPublicKey shall be object ArrayOfStringsByte</description>
			<test>RecipientsHasTypeArray != true || Recipients_size == 1</test>
			<error>
				<message>Entry Recipients with type Array in CryptFilterPublicKey is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14893"/>
			<description>Entry Recipients in CryptFilterPublicKey shall have one of types: Array, StringByte</description>
			<test>containsRecipients == false || RecipientsHasTypeArray == true || RecipientsHasTypeStringByte == true</test>
			<error>
				<message>Entry Recipients in CryptFilterPublicKey is not one of types: Array, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_5" clause="7" testNumber="14894"/>
			<description>Entry Recipients in CryptFilterPublicKey is required</description>
			<test>containsRecipients == true</test>
			<error>
				<message>Entry Recipients in CryptFilterPublicKey is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14895"/>
			<description>Entry Type in CryptFilterPublicKey shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CryptFilterPublicKey is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_5" clause="6" testNumber="14896"/>
			<description>Entry Type with type Name in CryptFilterPublicKey shall have value CryptFilter</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CryptFilter"</test>
			<error>
				<message>Entry Type with type Name in CryptFilterPublicKey has incorrect value %2 instead of CryptFilter</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKeyMap">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14949"/>
			<description>Entry DefEmbeddedFile with type Dictionary in CryptFilterPublicKeyMap shall be object CryptFilterPublicKey</description>
			<test>DefEmbeddedFileHasTypeDictionary != true || DefEmbeddedFile_size == 1</test>
			<error>
				<message>Entry DefEmbeddedFile with type Dictionary in CryptFilterPublicKeyMap is not object CryptFilterPublicKey</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKeyMap">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14950"/>
			<description>Entry DefEmbeddedFile in CryptFilterPublicKeyMap shall have type Dictionary</description>
			<test>containsDefEmbeddedFile == false || DefEmbeddedFileHasTypeDictionary == true</test>
			<error>
				<message>Entry DefEmbeddedFile in CryptFilterPublicKeyMap is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKeyMap">
			<id specification="ISO_32000_1_5" clause="9" testNumber="14951"/>
			<description>Entry DefEmbeddedFile with type Dictionary in CryptFilterPublicKeyMap shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(StdCF)))</description>
			<test>DefEmbeddedFileHasTypeDictionary != true || (((containsStdCF == true)) != true)</test>
			<error>
				<message>Entry DefEmbeddedFile with type Dictionary in CryptFilterPublicKeyMap does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(StdCF)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKeyMap">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14952"/>
			<description>Entry DefaultCryptFilter with type Dictionary in CryptFilterPublicKeyMap shall be object CryptFilterPublicKey</description>
			<test>DefaultCryptFilterHasTypeDictionary != true || DefaultCryptFilter_size == 1</test>
			<error>
				<message>Entry DefaultCryptFilter with type Dictionary in CryptFilterPublicKeyMap is not object CryptFilterPublicKey</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKeyMap">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14953"/>
			<description>Entry DefaultCryptFilter in CryptFilterPublicKeyMap shall have type Dictionary</description>
			<test>containsDefaultCryptFilter == false || DefaultCryptFilterHasTypeDictionary == true</test>
			<error>
				<message>Entry DefaultCryptFilter in CryptFilterPublicKeyMap is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKeyMap">
			<id specification="ISO_32000_1_5" clause="9" testNumber="14954"/>
			<description>Entry DefaultCryptFilter with type Dictionary in CryptFilterPublicKeyMap shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(StdCF)))</description>
			<test>DefaultCryptFilterHasTypeDictionary != true || (((containsStdCF == true)) != true)</test>
			<error>
				<message>Entry DefaultCryptFilter with type Dictionary in CryptFilterPublicKeyMap does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(StdCF)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKeyMapEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="14973"/>
			<description>Entry with type Dictionary in CryptFilterPublicKeyMap shall be object CryptFilterPublicKey</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in CryptFilterPublicKeyMap is not object CryptFilterPublicKey</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKeyMapEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="14974"/>
			<description>Entry in CryptFilterPublicKeyMap shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in CryptFilterPublicKeyMap is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15128"/>
			<description>Entry LastModified in Data shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in Data is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_5" clause="7" testNumber="15129"/>
			<description>Entry LastModified in Data is required</description>
			<test>containsLastModified == true</test>
			<error>
				<message>Entry LastModified in Data is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15130"/>
			<description>Entry Private with type Array in Data shall be object _UniversalArray</description>
			<test>PrivateHasTypeArray != true || Private_size == 1</test>
			<error>
				<message>Entry Private with type Array in Data is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15131"/>
			<description>Entry Private with type Stream in Data shall be object Stream</description>
			<test>PrivateHasTypeStream != true || Private_size == 1</test>
			<error>
				<message>Entry Private with type Stream in Data is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15132"/>
			<description>Entry Private with type Dictionary in Data shall be object _UniversalDictionary</description>
			<test>PrivateHasTypeDictionary != true || Private_size == 1</test>
			<error>
				<message>Entry Private with type Dictionary in Data is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15133"/>
			<description>Entry Private in Data shall have one of types: Array, Stream, Boolean, Number, String, Integer, Name, Dictionary</description>
			<test>containsPrivate == false || PrivateHasTypeArray == true || PrivateHasTypeStream == true || PrivateHasTypeBoolean == true || PrivateHasTypeNumber == true || PrivateHasTypeString == true || PrivateHasTypeInteger == true || PrivateHasTypeName == true || PrivateHasTypeDictionary == true</test>
			<error>
				<message>Entry Private in Data is not one of types: Array, Stream, Boolean, Number, String, Integer, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_5" clause="10" testNumber="15134"/>
			<description>Entry Private with type Stream in Data shall be indirect</description>
			<test>PrivateHasTypeStream != true || isPrivateIndirect == true</test>
			<error>
				<message>Entry Private with type Stream in Data is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADataEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15166"/>
			<description>Entry with type Array in Data shall be object _UniversalArray</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in Data is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADataEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15167"/>
			<description>Entry with type Stream in Data shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in Data is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADataEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15168"/>
			<description>Entry with type Dictionary in Data shall be object _UniversalDictionary</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in Data is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADataEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15169"/>
			<description>Entry in Data shall have one of types: Array, Stream, Boolean, Number, String, Integer, Name, Dictionary</description>
			<test>HasTypeArray == true || HasTypeStream == true || HasTypeBoolean == true || HasTypeNumber == true || HasTypeString == true || HasTypeInteger == true || HasTypeName == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in Data is not one of types: Array, Stream, Boolean, Number, String, Integer, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADataEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="15170"/>
			<description>Entry with type Stream in Data shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in Data is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_5" clause="2" testNumber="15216"/>
			<description>Dest0Array shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>Dest0Array contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15217"/>
			<description>Entry 0 with type Dictionary in Dest0Array shall be object PageObject</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in Dest0Array is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15218"/>
			<description>Entry 0 in Dest0Array shall have one of types: Number, Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in Dest0Array is not one of types: Number, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_5" clause="14" testNumber="15219"/>
			<description>Entry 0 with type Number in Dest0Array shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in Dest0Array does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15220"/>
			<description>Entry 1 in Dest0Array shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in Dest0Array is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_5" clause="6" testNumber="15221"/>
			<description>Entry 1 with type Name in Dest0Array shall have one of values: Fit, FitB</description>
			<test>entry1HasTypeName != true || entry1NameValue == "Fit" || entry1NameValue == "FitB"</test>
			<error>
				<message>Entry 1 with type Name in Dest0Array has incorrect value %2 instead of Fit, FitB</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_5" clause="2" testNumber="15282"/>
			<description>Dest1Array shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>Dest1Array contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15283"/>
			<description>Entry 0 with type Dictionary in Dest1Array shall be object PageObject</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in Dest1Array is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15284"/>
			<description>Entry 0 in Dest1Array shall have one of types: Number, Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in Dest1Array is not one of types: Number, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_5" clause="14" testNumber="15285"/>
			<description>Entry 0 with type Number in Dest1Array shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in Dest1Array does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15286"/>
			<description>Entry 1 in Dest1Array shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in Dest1Array is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_5" clause="6" testNumber="15287"/>
			<description>Entry 1 with type Name in Dest1Array shall have one of values: FitV, FitH, FitBH, FitBV</description>
			<test>entry1HasTypeName != true || entry1NameValue == "FitH" || entry1NameValue == "FitV" || entry1NameValue == "FitBH" || entry1NameValue == "FitBV"</test>
			<error>
				<message>Entry 1 with type Name in Dest1Array has incorrect value %2 instead of FitV, FitH, FitBH, FitBV</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15288"/>
			<description>Entry 2 in Dest1Array shall have one of types: Number, Null</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true || entry2HasTypeNull == true</test>
			<error>
				<message>Entry 2 in Dest1Array is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_5" clause="2" testNumber="15368"/>
			<description>Dest4Array shall contain exactly 6 elements</description>
			<test>size == 6</test>
			<error>
				<message>Dest4Array contains %1 element(s) instead of 6</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15369"/>
			<description>Entry 0 with type Dictionary in Dest4Array shall be object PageObject</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in Dest4Array is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15370"/>
			<description>Entry 0 in Dest4Array shall have one of types: Number, Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in Dest4Array is not one of types: Number, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_5" clause="14" testNumber="15371"/>
			<description>Entry 0 with type Number in Dest4Array shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in Dest4Array does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15372"/>
			<description>Entry 1 in Dest4Array shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in Dest4Array is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_5" clause="6" testNumber="15373"/>
			<description>Entry 1 with type Name in Dest4Array shall have value FitR</description>
			<test>entry1HasTypeName != true || entry1NameValue == "FitR"</test>
			<error>
				<message>Entry 1 with type Name in Dest4Array has incorrect value %2 instead of FitR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15374"/>
			<description>Entry 2 in Dest4Array shall have one of types: Number, Null</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true || entry2HasTypeNull == true</test>
			<error>
				<message>Entry 2 in Dest4Array is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15375"/>
			<description>Entry 3 in Dest4Array shall have one of types: Number, Null</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true || entry3HasTypeNull == true</test>
			<error>
				<message>Entry 3 in Dest4Array is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15376"/>
			<description>Entry 4 in Dest4Array shall have one of types: Number, Null</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true || entry4HasTypeNull == true</test>
			<error>
				<message>Entry 4 in Dest4Array is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15377"/>
			<description>Entry 5 in Dest4Array shall have one of types: Number, Null</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true || entry5HasTypeNull == true</test>
			<error>
				<message>Entry 5 in Dest4Array is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_5" clause="1" testNumber="15435"/>
			<description>DestDict shall not contain entries except D</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D').length == 0</test>
			<error>
				<message>DestDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15436"/>
			<description>Entry D with type Array in DestDict shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in DestDict is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15437"/>
			<description>Entry D in DestDict shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in DestDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_5" clause="7" testNumber="15438"/>
			<description>Entry D in DestDict is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in DestDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_5" clause="2" testNumber="15508"/>
			<description>DestXYZArray shall contain exactly 5 elements</description>
			<test>size == 5</test>
			<error>
				<message>DestXYZArray contains %1 element(s) instead of 5</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15509"/>
			<description>Entry 0 with type Dictionary in DestXYZArray shall be object PageObject</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in DestXYZArray is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15510"/>
			<description>Entry 0 in DestXYZArray shall have one of types: Number, Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in DestXYZArray is not one of types: Number, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_5" clause="14" testNumber="15511"/>
			<description>Entry 0 with type Number in DestXYZArray shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in DestXYZArray does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15512"/>
			<description>Entry 1 in DestXYZArray shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in DestXYZArray is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_5" clause="6" testNumber="15513"/>
			<description>Entry 1 with type Name in DestXYZArray shall have value XYZ</description>
			<test>entry1HasTypeName != true || entry1NameValue == "XYZ"</test>
			<error>
				<message>Entry 1 with type Name in DestXYZArray has incorrect value %2 instead of XYZ</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15514"/>
			<description>Entry 2 in DestXYZArray shall have one of types: Number, Null</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true || entry2HasTypeNull == true</test>
			<error>
				<message>Entry 2 in DestXYZArray is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15515"/>
			<description>Entry 3 in DestXYZArray shall have one of types: Number, Null</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true || entry3HasTypeNull == true</test>
			<error>
				<message>Entry 3 in DestXYZArray is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15516"/>
			<description>Entry 4 in DestXYZArray shall have one of types: Number, Null</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true || entry4HasTypeNull == true</test>
			<error>
				<message>Entry 4 in DestXYZArray is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestsMapEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15566"/>
			<description>Entry with type Array in DestsMap shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in DestsMap is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestsMapEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15567"/>
			<description>Entry with type Dictionary in DestsMap shall be object DestDict</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in DestsMap is not object DestDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestsMapEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15568"/>
			<description>Entry in DestsMap shall have one of types: Array, Dictionary</description>
			<test>HasTypeArray == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in DestsMap is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_5" clause="4" testNumber="15632"/>
			<description>DeviceNColorSpace shall contain at least 4 elements</description>
			<test>size &gt;= 4</test>
			<error>
				<message>DeviceNColorSpace contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15633"/>
			<description>Entry 0 in DeviceNColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in DeviceNColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_5" clause="6" testNumber="15634"/>
			<description>Entry 0 with type Name in DeviceNColorSpace shall have value DeviceN</description>
			<test>entry0HasTypeName != true || entry0NameValue == "DeviceN"</test>
			<error>
				<message>Entry 0 with type Name in DeviceNColorSpace has incorrect value %2 instead of DeviceN</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15635"/>
			<description>Entry 1 with type Array in DeviceNColorSpace shall be object ArrayOfNamesGeneral</description>
			<test>entry1HasTypeArray != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Array in DeviceNColorSpace is not object ArrayOfNamesGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15636"/>
			<description>Entry 1 in DeviceNColorSpace shall have type Array</description>
			<test>size &lt;= 1 || entry1HasTypeArray == true</test>
			<error>
				<message>Entry 1 in DeviceNColorSpace is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15637"/>
			<description>Entry 2 with type Array in DeviceNColorSpace shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace</description>
			<test>entry2HasTypeArray != true || entry2_size == 1</test>
			<error>
				<message>Entry 2 with type Array in DeviceNColorSpace is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15638"/>
			<description>Entry 2 in DeviceNColorSpace shall have one of types: Array, Name</description>
			<test>size &lt;= 2 || entry2HasTypeArray == true || entry2HasTypeName == true</test>
			<error>
				<message>Entry 2 in DeviceNColorSpace is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_5" clause="6" testNumber="15639"/>
			<description>Entry 2 with type Name in DeviceNColorSpace shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>entry2HasTypeName != true || entry2NameValue == "DeviceCMYK" || entry2NameValue == "DeviceRGB" || entry2NameValue == "DeviceGray"</test>
			<error>
				<message>Entry 2 with type Name in DeviceNColorSpace has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry2NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15640"/>
			<description>Entry 3 with type Stream in DeviceNColorSpace shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry3HasTypeStream != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Stream in DeviceNColorSpace is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15641"/>
			<description>Entry 3 with type Dictionary in DeviceNColorSpace shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry3HasTypeDictionary != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Dictionary in DeviceNColorSpace is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15642"/>
			<description>Entry 3 in DeviceNColorSpace shall have one of types: Stream, Dictionary</description>
			<test>size &lt;= 3 || entry3HasTypeStream == true || entry3HasTypeDictionary == true</test>
			<error>
				<message>Entry 3 in DeviceNColorSpace is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_5" clause="10" testNumber="15643"/>
			<description>Entry 3 with type Stream in DeviceNColorSpace shall be indirect</description>
			<test>entry3HasTypeStream != true || isentry3Indirect == true</test>
			<error>
				<message>Entry 3 with type Stream in DeviceNColorSpace is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15644"/>
			<description>Entry 4 with type Dictionary in DeviceNColorSpace shall be object DeviceNDict</description>
			<test>entry4HasTypeDictionary != true || entry4_size == 1</test>
			<error>
				<message>Entry 4 with type Dictionary in DeviceNColorSpace is not object DeviceNDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15645"/>
			<description>Entry 4 in DeviceNColorSpace shall have type Dictionary</description>
			<test>size &lt;= 4 || entry4HasTypeDictionary == true</test>
			<error>
				<message>Entry 4 in DeviceNColorSpace is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_5" clause="1" testNumber="15696"/>
			<description>DeviceNDict shall not contain entries except Colorants</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Colorants').length == 0</test>
			<error>
				<message>DeviceNDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Colorants').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15697"/>
			<description>Entry Colorants with type Dictionary in DeviceNDict shall be object ColorantsDict</description>
			<test>ColorantsHasTypeDictionary != true || Colorants_size == 1</test>
			<error>
				<message>Entry Colorants with type Dictionary in DeviceNDict is not object ColorantsDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15698"/>
			<description>Entry Colorants in DeviceNDict shall have type Dictionary</description>
			<test>containsColorants == false || ColorantsHasTypeDictionary == true</test>
			<error>
				<message>Entry Colorants in DeviceNDict is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_5" clause="11" testNumber="15699"/>
			<description>Entry Colorants in DeviceNDict is required, when fn:IsRequired(fn:SinceVersion(1.6 , (@Subtype == NChannel)) &amp;&amp; fn:HasSpotColorants(parent::1))</description>
			<test>(containsColorants == true || (true &amp;&amp; (parent1EntriesString != null &amp;&amp; parent1EntriesString.split('&amp;').filter(elem =&gt; elem != "Cyan" &amp;&amp; elem != "Magenta" &amp;&amp; elem != "Yellow" &amp;&amp; elem != "Black").length &gt; 0)) == false)</test>
			<error>
				<message>Entry Colorants in DeviceNDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15846"/>
			<description>Entry Author in DocInfo shall have type StringText</description>
			<test>containsAuthor == false || AuthorHasTypeStringText == true</test>
			<error>
				<message>Entry Author in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15847"/>
			<description>Entry CreationDate in DocInfo shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in DocInfo is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15848"/>
			<description>Entry Creator in DocInfo shall have type StringText</description>
			<test>containsCreator == false || CreatorHasTypeStringText == true</test>
			<error>
				<message>Entry Creator in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15849"/>
			<description>Entry Keywords in DocInfo shall have type StringText</description>
			<test>containsKeywords == false || KeywordsHasTypeStringText == true</test>
			<error>
				<message>Entry Keywords in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15850"/>
			<description>Entry ModDate in DocInfo shall have type Date</description>
			<test>containsModDate == false || ModDateHasTypeDate == true</test>
			<error>
				<message>Entry ModDate in DocInfo is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15851"/>
			<description>Entry Producer in DocInfo shall have type StringText</description>
			<test>containsProducer == false || ProducerHasTypeStringText == true</test>
			<error>
				<message>Entry Producer in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15852"/>
			<description>Entry Subject in DocInfo shall have type StringText</description>
			<test>containsSubject == false || SubjectHasTypeStringText == true</test>
			<error>
				<message>Entry Subject in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15853"/>
			<description>Entry Title in DocInfo shall have type StringText</description>
			<test>containsTitle == false || TitleHasTypeStringText == true</test>
			<error>
				<message>Entry Title in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15854"/>
			<description>Entry Trapped in DocInfo shall have type Name</description>
			<test>containsTrapped == false || TrappedHasTypeName == true</test>
			<error>
				<message>Entry Trapped in DocInfo is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_5" clause="6" testNumber="15855"/>
			<description>Entry Trapped with type Name in DocInfo shall have one of values: Unknown, True, False</description>
			<test>TrappedHasTypeName != true || TrappedNameValue == "True" || TrappedNameValue == "False" || TrappedNameValue == "Unknown"</test>
			<error>
				<message>Entry Trapped with type Name in DocInfo has incorrect value %2 instead of Unknown, True, False</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TrappedNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfoEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15890"/>
			<description>Entry in DocInfo shall have type StringText</description>
			<test>HasTypeStringText == true</test>
			<error>
				<message>Entry %1 in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_5" clause="1" testNumber="15894"/>
			<description>DocMDPTransformParameters shall not contain entries except P, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'P' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>DocMDPTransformParameters contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'P' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15895"/>
			<description>Entry P in DocMDPTransformParameters shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in DocMDPTransformParameters is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_5" clause="6" testNumber="15896"/>
			<description>Entry P with type Integer in DocMDPTransformParameters shall have one of values: 1, 2, 3</description>
			<test>PHasTypeInteger != true || PIntegerValue == 1 || PIntegerValue == 2 || PIntegerValue == 3</test>
			<error>
				<message>Entry P with type Integer in DocMDPTransformParameters has incorrect value %2 instead of 1, 2, 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15897"/>
			<description>Entry Type in DocMDPTransformParameters shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in DocMDPTransformParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_5" clause="6" testNumber="15898"/>
			<description>Entry Type with type Name in DocMDPTransformParameters shall have value TransformParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "TransformParams"</test>
			<error>
				<message>Entry Type with type Name in DocMDPTransformParameters has incorrect value %2 instead of TransformParams</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15899"/>
			<description>Entry V in DocMDPTransformParameters shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in DocMDPTransformParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_5" clause="6" testNumber="15900"/>
			<description>Entry V with type Name in DocMDPTransformParameters shall have value 1.2</description>
			<test>VHasTypeName != true || VNameValue == "1.2"</test>
			<error>
				<message>Entry V with type Name in DocMDPTransformParameters has incorrect value %2 instead of 1.2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="1" testNumber="15968"/>
			<description>DocTimeStamp shall not contain entries except ADBE_Build, ByteRange, Cert, Changes, ContactInfo, Contents, Filter, Location, M, Name, Prop_AuthTime, Prop_AuthType, Prop_Build, R, Reason, Reference, SubFilter, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ADBE_Build' &amp;&amp; elem != 'ByteRange' &amp;&amp; elem != 'Cert' &amp;&amp; elem != 'Changes' &amp;&amp; elem != 'ContactInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Location' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Prop_AuthTime' &amp;&amp; elem != 'Prop_AuthType' &amp;&amp; elem != 'Prop_Build' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Reason' &amp;&amp; elem != 'Reference' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>DocTimeStamp contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ADBE_Build' &amp;&amp; elem != 'ByteRange' &amp;&amp; elem != 'Cert' &amp;&amp; elem != 'Changes' &amp;&amp; elem != 'ContactInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Location' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Prop_AuthTime' &amp;&amp; elem != 'Prop_AuthType' &amp;&amp; elem != 'Prop_Build' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Reason' &amp;&amp; elem != 'Reference' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15969"/>
			<description>Entry ADBE_Build in DocTimeStamp shall have type String</description>
			<test>containsADBE_Build == false || ADBE_BuildHasTypeString == true</test>
			<error>
				<message>Entry ADBE_Build in DocTimeStamp is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15970"/>
			<description>Entry ByteRange with type Array in DocTimeStamp shall be object ArrayOfIntegersGeneral</description>
			<test>ByteRangeHasTypeArray != true || ByteRange_size == 1</test>
			<error>
				<message>Entry ByteRange with type Array in DocTimeStamp is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15971"/>
			<description>Entry ByteRange in DocTimeStamp shall have type Array</description>
			<test>containsByteRange == false || ByteRangeHasTypeArray == true</test>
			<error>
				<message>Entry ByteRange in DocTimeStamp is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15972"/>
			<description>Entry Cert with type Array in DocTimeStamp shall be object ArrayOfStringsByte</description>
			<test>CertHasTypeArray != true || Cert_size == 1</test>
			<error>
				<message>Entry Cert with type Array in DocTimeStamp is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15973"/>
			<description>Entry Cert in DocTimeStamp shall have one of types: Array, StringByte</description>
			<test>containsCert == false || CertHasTypeArray == true || CertHasTypeStringByte == true</test>
			<error>
				<message>Entry Cert in DocTimeStamp is not one of types: Array, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15974"/>
			<description>Entry Changes with type Array in DocTimeStamp shall be object ArrayOf_3Integers</description>
			<test>ChangesHasTypeArray != true || Changes_size == 1</test>
			<error>
				<message>Entry Changes with type Array in DocTimeStamp is not object ArrayOf_3Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15975"/>
			<description>Entry Changes in DocTimeStamp shall have type Array</description>
			<test>containsChanges == false || ChangesHasTypeArray == true</test>
			<error>
				<message>Entry Changes in DocTimeStamp is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15976"/>
			<description>Entry ContactInfo in DocTimeStamp shall have type String</description>
			<test>containsContactInfo == false || ContactInfoHasTypeString == true</test>
			<error>
				<message>Entry ContactInfo in DocTimeStamp is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15977"/>
			<description>Entry Contents in DocTimeStamp shall have type StringByte</description>
			<test>containsContents == false || ContentsHasTypeStringByte == true</test>
			<error>
				<message>Entry Contents in DocTimeStamp is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="7" testNumber="15978"/>
			<description>Entry Contents in DocTimeStamp is required</description>
			<test>containsContents == true</test>
			<error>
				<message>Entry Contents in DocTimeStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15979"/>
			<description>Entry Filter in DocTimeStamp shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in DocTimeStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="7" testNumber="15980"/>
			<description>Entry Filter in DocTimeStamp is required</description>
			<test>containsFilter == true</test>
			<error>
				<message>Entry Filter in DocTimeStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15981"/>
			<description>Entry Location in DocTimeStamp shall have type String</description>
			<test>containsLocation == false || LocationHasTypeString == true</test>
			<error>
				<message>Entry Location in DocTimeStamp is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15982"/>
			<description>Entry M in DocTimeStamp shall have type Date</description>
			<test>containsM == false || MHasTypeDate == true</test>
			<error>
				<message>Entry M in DocTimeStamp is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15983"/>
			<description>Entry Name in DocTimeStamp shall have type String</description>
			<test>containsName == false || NameHasTypeString == true</test>
			<error>
				<message>Entry Name in DocTimeStamp is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15984"/>
			<description>Entry Prop_AuthTime in DocTimeStamp shall have type Integer</description>
			<test>containsProp_AuthTime == false || Prop_AuthTimeHasTypeInteger == true</test>
			<error>
				<message>Entry Prop_AuthTime in DocTimeStamp is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15985"/>
			<description>Entry Prop_AuthType in DocTimeStamp shall have type Name</description>
			<test>containsProp_AuthType == false || Prop_AuthTypeHasTypeName == true</test>
			<error>
				<message>Entry Prop_AuthType in DocTimeStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15986"/>
			<description>Entry Prop_Build with type Dictionary in DocTimeStamp shall be object SignatureBuildPropDict</description>
			<test>Prop_BuildHasTypeDictionary != true || Prop_Build_size == 1</test>
			<error>
				<message>Entry Prop_Build with type Dictionary in DocTimeStamp is not object SignatureBuildPropDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15987"/>
			<description>Entry Prop_Build in DocTimeStamp shall have type Dictionary</description>
			<test>containsProp_Build == false || Prop_BuildHasTypeDictionary == true</test>
			<error>
				<message>Entry Prop_Build in DocTimeStamp is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15988"/>
			<description>Entry R in DocTimeStamp shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in DocTimeStamp is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15989"/>
			<description>Entry Reason in DocTimeStamp shall have type String</description>
			<test>containsReason == false || ReasonHasTypeString == true</test>
			<error>
				<message>Entry Reason in DocTimeStamp is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="17" testNumber="15990"/>
			<description>Entry Reference with type Array in DocTimeStamp shall be object ArrayOfSignatureReferences</description>
			<test>ReferenceHasTypeArray != true || Reference_size == 1</test>
			<error>
				<message>Entry Reference with type Array in DocTimeStamp is not object ArrayOfSignatureReferences</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15991"/>
			<description>Entry Reference in DocTimeStamp shall have type Array</description>
			<test>containsReference == false || ReferenceHasTypeArray == true</test>
			<error>
				<message>Entry Reference in DocTimeStamp is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15992"/>
			<description>Entry SubFilter in DocTimeStamp shall have type Name</description>
			<test>containsSubFilter == false || SubFilterHasTypeName == true</test>
			<error>
				<message>Entry SubFilter in DocTimeStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="6" testNumber="15993"/>
			<description>Entry SubFilter with type Name in DocTimeStamp shall have value ETSI.RFC3161</description>
			<test>SubFilterHasTypeName != true || SubFilterNameValue == "ETSI.RFC3161"</test>
			<error>
				<message>Entry SubFilter with type Name in DocTimeStamp has incorrect value %2 instead of ETSI.RFC3161</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15994"/>
			<description>Entry Type in DocTimeStamp shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in DocTimeStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="7" testNumber="15995"/>
			<description>Entry Type in DocTimeStamp is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in DocTimeStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="6" testNumber="15996"/>
			<description>Entry Type with type Name in DocTimeStamp shall have value DocTimeStamp</description>
			<test>TypeHasTypeName != true || TypeNameValue == "DocTimeStamp"</test>
			<error>
				<message>Entry Type with type Name in DocTimeStamp has incorrect value %2 instead of DocTimeStamp</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_5" clause="8" testNumber="15997"/>
			<description>Entry V in DocTimeStamp shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in DocTimeStamp is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_5" clause="1" testNumber="16111"/>
			<description>EmbeddedFileParameter shall not contain entries except CheckSum, CreationDate, Mac, ModDate, Size</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CheckSum' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'ModDate' &amp;&amp; elem != 'Size').length == 0</test>
			<error>
				<message>EmbeddedFileParameter contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CheckSum' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'ModDate' &amp;&amp; elem != 'Size').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16112"/>
			<description>Entry CheckSum in EmbeddedFileParameter shall have type String</description>
			<test>containsCheckSum == false || CheckSumHasTypeString == true</test>
			<error>
				<message>Entry CheckSum in EmbeddedFileParameter is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_5" clause="9" testNumber="16113"/>
			<description>Entry CheckSum with type String in EmbeddedFileParameter shall satisfy special case: fn:Eval(fn:StringLength(CheckSum) == 16)</description>
			<test>CheckSumHasTypeString != true || (CheckSumStringSize == 16)</test>
			<error>
				<message>Entry CheckSum with type String in EmbeddedFileParameter does not satisfy special case: fn:Eval(fn:StringLength(CheckSum) == 16)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16114"/>
			<description>Entry CreationDate in EmbeddedFileParameter shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in EmbeddedFileParameter is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="16115"/>
			<description>Entry Mac with type Dictionary in EmbeddedFileParameter shall be object Mac</description>
			<test>MacHasTypeDictionary != true || Mac_size == 1</test>
			<error>
				<message>Entry Mac with type Dictionary in EmbeddedFileParameter is not object Mac</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16116"/>
			<description>Entry Mac in EmbeddedFileParameter shall have type Dictionary</description>
			<test>containsMac == false || MacHasTypeDictionary == true</test>
			<error>
				<message>Entry Mac in EmbeddedFileParameter is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16117"/>
			<description>Entry ModDate in EmbeddedFileParameter shall have type Date</description>
			<test>containsModDate == false || ModDateHasTypeDate == true</test>
			<error>
				<message>Entry ModDate in EmbeddedFileParameter is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_5" clause="11" testNumber="16118"/>
			<description>Entry ModDate in EmbeddedFileParameter is required, when fn:IsRequired(fn:SinceVersion(2.0 , fn:IsAssociatedFile()))</description>
			<test>(containsModDate == true || (true) == false)</test>
			<error>
				<message>Entry ModDate in EmbeddedFileParameter is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16119"/>
			<description>Entry Size in EmbeddedFileParameter shall have type Integer</description>
			<test>containsSize == false || SizeHasTypeInteger == true</test>
			<error>
				<message>Entry Size in EmbeddedFileParameter is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_5" clause="14" testNumber="16120"/>
			<description>Entry Size with type Integer in EmbeddedFileParameter shall satisfy possible value predicate: fn:Eval(@Size &gt;= 0)</description>
			<test>SizeHasTypeInteger != true || SizeIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Size with type Integer in EmbeddedFileParameter does not satisfy possible value predicate: fn:Eval(@Size &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="1" testNumber="16207"/>
			<description>EmbeddedFileStream shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Params, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Params' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>EmbeddedFileStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Params' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16208"/>
			<description>Entry DL in EmbeddedFileStream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in EmbeddedFileStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="16209"/>
			<description>Entry DL with type Integer in EmbeddedFileStream shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in EmbeddedFileStream does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="16210"/>
			<description>Entry DecodeParms with type Array in EmbeddedFileStream shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in EmbeddedFileStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="16211"/>
			<description>Entry DecodeParms with type Dictionary in EmbeddedFileStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in EmbeddedFileStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16212"/>
			<description>Entry DecodeParms in EmbeddedFileStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in EmbeddedFileStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="16213"/>
			<description>Entry DecodeParms with type Array in EmbeddedFileStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in EmbeddedFileStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="16214"/>
			<description>Entry F with type Dictionary in EmbeddedFileStream shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in EmbeddedFileStream is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16215"/>
			<description>Entry F in EmbeddedFileStream shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in EmbeddedFileStream is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="16216"/>
			<description>Entry FDecodeParms with type Array in EmbeddedFileStream shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in EmbeddedFileStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="16217"/>
			<description>Entry FDecodeParms with type Dictionary in EmbeddedFileStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in EmbeddedFileStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16218"/>
			<description>Entry FDecodeParms in EmbeddedFileStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in EmbeddedFileStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="16219"/>
			<description>Entry FDecodeParms with type Array in EmbeddedFileStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in EmbeddedFileStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="16220"/>
			<description>Entry FFilter with type Array in EmbeddedFileStream shall be object ArrayOfFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in EmbeddedFileStream is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16221"/>
			<description>Entry FFilter in EmbeddedFileStream shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in EmbeddedFileStream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="16222"/>
			<description>Entry FFilter with type Array in EmbeddedFileStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in EmbeddedFileStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="16223"/>
			<description>Entry FFilter with type Name in EmbeddedFileStream shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "JBIG2Decode" || FFilterNameValue == "DCTDecode" || FFilterNameValue == "JPXDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in EmbeddedFileStream has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="16224"/>
			<description>Entry Filter with type Array in EmbeddedFileStream shall be object ArrayOfFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in EmbeddedFileStream is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16225"/>
			<description>Entry Filter in EmbeddedFileStream shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in EmbeddedFileStream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="16226"/>
			<description>Entry Filter with type Array in EmbeddedFileStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in EmbeddedFileStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="16227"/>
			<description>Entry Filter with type Name in EmbeddedFileStream shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "JBIG2Decode" || FilterNameValue == "DCTDecode" || FilterNameValue == "JPXDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in EmbeddedFileStream has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16228"/>
			<description>Entry Length in EmbeddedFileStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in EmbeddedFileStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="7" testNumber="16229"/>
			<description>Entry Length in EmbeddedFileStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in EmbeddedFileStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="16230"/>
			<description>Entry Params with type Dictionary in EmbeddedFileStream shall be object EmbeddedFileParameter</description>
			<test>ParamsHasTypeDictionary != true || Params_size == 1</test>
			<error>
				<message>Entry Params with type Dictionary in EmbeddedFileStream is not object EmbeddedFileParameter</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16231"/>
			<description>Entry Params in EmbeddedFileStream shall have type Dictionary</description>
			<test>containsParams == false || ParamsHasTypeDictionary == true</test>
			<error>
				<message>Entry Params in EmbeddedFileStream is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="11" testNumber="16232"/>
			<description>Entry Params in EmbeddedFileStream is required, when fn:IsRequired(fn:SinceVersion(2.0 , fn:IsAssociatedFile()))</description>
			<test>(containsParams == true || (true) == false)</test>
			<error>
				<message>Entry Params in EmbeddedFileStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16233"/>
			<description>Entry Subtype in EmbeddedFileStream shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in EmbeddedFileStream is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="11" testNumber="16234"/>
			<description>Entry Subtype in EmbeddedFileStream is required, when fn:IsRequired(fn:SinceVersion(2.0 , fn:IsAssociatedFile()))</description>
			<test>(containsSubtype == true || (true) == false)</test>
			<error>
				<message>Entry Subtype in EmbeddedFileStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16235"/>
			<description>Entry Type in EmbeddedFileStream shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in EmbeddedFileStream is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="16236"/>
			<description>Entry Type with type Name in EmbeddedFileStream shall have value EmbeddedFile</description>
			<test>TypeHasTypeName != true || TypeNameValue == "EmbeddedFile"</test>
			<error>
				<message>Entry Type with type Name in EmbeddedFileStream has incorrect value %2 instead of EmbeddedFile</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_5" clause="1" testNumber="16362"/>
			<description>Encoding shall not contain entries except BaseEncoding, Differences, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseEncoding' &amp;&amp; elem != 'Differences' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>Encoding contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseEncoding' &amp;&amp; elem != 'Differences' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16363"/>
			<description>Entry BaseEncoding in Encoding shall have type Name</description>
			<test>containsBaseEncoding == false || BaseEncodingHasTypeName == true</test>
			<error>
				<message>Entry BaseEncoding in Encoding is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_5" clause="6" testNumber="16364"/>
			<description>Entry BaseEncoding with type Name in Encoding shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>BaseEncodingHasTypeName != true || BaseEncodingNameValue == "MacRomanEncoding" || BaseEncodingNameValue == "MacExpertEncoding" || BaseEncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry BaseEncoding with type Name in Encoding has incorrect value %2 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BaseEncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_5" clause="17" testNumber="16365"/>
			<description>Entry Differences with type Array in Encoding shall be object ArrayOfDifferences</description>
			<test>DifferencesHasTypeArray != true || Differences_size == 1</test>
			<error>
				<message>Entry Differences with type Array in Encoding is not object ArrayOfDifferences</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16366"/>
			<description>Entry Differences in Encoding shall have type Array</description>
			<test>containsDifferences == false || DifferencesHasTypeArray == true</test>
			<error>
				<message>Entry Differences in Encoding is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16367"/>
			<description>Entry Type in Encoding shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Encoding is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_5" clause="6" testNumber="16368"/>
			<description>Entry Type with type Name in Encoding shall have value Encoding</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Encoding"</test>
			<error>
				<message>Entry Type with type Name in Encoding has incorrect value %2 instead of Encoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="1" testNumber="16444"/>
			<description>EncryptionPublicKey shall not contain entries except CF, EncryptMetadata, Filter, Length, P, Recipients, StmF, StrF, SubFilter, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CF' &amp;&amp; elem != 'EncryptMetadata' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Recipients' &amp;&amp; elem != 'StmF' &amp;&amp; elem != 'StrF' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>EncryptionPublicKey contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CF' &amp;&amp; elem != 'EncryptMetadata' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Recipients' &amp;&amp; elem != 'StmF' &amp;&amp; elem != 'StrF' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="17" testNumber="16445"/>
			<description>Entry CF with type Dictionary in EncryptionPublicKey shall be one of objects CryptFilterMap, CryptFilterPublicKeyMap</description>
			<test>CFHasTypeDictionary != true || CF_size == 1</test>
			<error>
				<message>Entry CF with type Dictionary in EncryptionPublicKey is not one of objects CryptFilterMap, CryptFilterPublicKeyMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16446"/>
			<description>Entry CF in EncryptionPublicKey shall have type Dictionary</description>
			<test>containsCF == false || CFHasTypeDictionary == true</test>
			<error>
				<message>Entry CF in EncryptionPublicKey is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16447"/>
			<description>Entry EncryptMetadata in EncryptionPublicKey shall have type Boolean</description>
			<test>containsEncryptMetadata == false || EncryptMetadataHasTypeBoolean == true</test>
			<error>
				<message>Entry EncryptMetadata in EncryptionPublicKey is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16448"/>
			<description>Entry Filter in EncryptionPublicKey shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in EncryptionPublicKey is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="7" testNumber="16449"/>
			<description>Entry Filter in EncryptionPublicKey is required</description>
			<test>containsFilter == true</test>
			<error>
				<message>Entry Filter in EncryptionPublicKey is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="6" testNumber="16450"/>
			<description>Entry Filter with type Name in EncryptionPublicKey shall have one of values: Adobe.PubSec, AdobePPKLite</description>
			<test>FilterHasTypeName != true || FilterNameValue == "Adobe.PubSec" || FilterNameValue == "AdobePPKLite"</test>
			<error>
				<message>Entry Filter with type Name in EncryptionPublicKey has incorrect value %2 instead of Adobe.PubSec, AdobePPKLite</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16451"/>
			<description>Entry Length in EncryptionPublicKey shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in EncryptionPublicKey is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="14" testNumber="16452"/>
			<description>Entry Length with type Integer in EncryptionPublicKey shall satisfy possible value predicate: fn:Eval((@Length &gt;= 40) &amp;&amp; (@Length &lt;= 128) &amp;&amp; ((@Length mod 8) == 0))</description>
			<test>LengthHasTypeInteger != true || (LengthIntegerValue &gt;= 40) &amp;&amp; (LengthIntegerValue &lt;= 128) &amp;&amp; ((LengthIntegerValue % 8) == 0)</test>
			<error>
				<message>Entry Length with type Integer in EncryptionPublicKey does not satisfy possible value predicate: fn:Eval((@Length &gt;= 40) &amp;&amp; (@Length &lt;= 128) &amp;&amp; ((@Length mod 8) == 0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16453"/>
			<description>Entry P in EncryptionPublicKey shall have type Bitmask</description>
			<test>containsP == false || PHasTypeBitmask == true</test>
			<error>
				<message>Entry P in EncryptionPublicKey is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="9" testNumber="16454"/>
			<description>Entry P with type Bitmask in EncryptionPublicKey shall satisfy special case: fn:Eval(fn:BitsClear(13 , 32))</description>
			<test>PHasTypeBitmask != true || (((PBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry P with type Bitmask in EncryptionPublicKey does not satisfy special case: fn:Eval(fn:BitsClear(13 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="17" testNumber="16455"/>
			<description>Entry Recipients with type Array in EncryptionPublicKey shall be object ArrayOfStringsByte</description>
			<test>RecipientsHasTypeArray != true || Recipients_size == 1</test>
			<error>
				<message>Entry Recipients with type Array in EncryptionPublicKey is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16456"/>
			<description>Entry Recipients in EncryptionPublicKey shall have type Array</description>
			<test>containsRecipients == false || RecipientsHasTypeArray == true</test>
			<error>
				<message>Entry Recipients in EncryptionPublicKey is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="11" testNumber="16457"/>
			<description>Entry Recipients in EncryptionPublicKey is required, when fn:IsRequired((@SubFilter == adbe.pkcs7.s3) || (@SubFilter == adbe.pkcs7.s4))</description>
			<test>(containsRecipients == true || ((SubFilterNameValue == "adbe.pkcs7.s3") || (SubFilterNameValue == "adbe.pkcs7.s4")) == false)</test>
			<error>
				<message>Entry Recipients in EncryptionPublicKey is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16458"/>
			<description>Entry StmF in EncryptionPublicKey shall have type Name</description>
			<test>containsStmF == false || StmFHasTypeName == true</test>
			<error>
				<message>Entry StmF in EncryptionPublicKey is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="6" testNumber="16459"/>
			<description>Entry StmF with type Name in EncryptionPublicKey shall have one of values: DefaultCryptFilter, DefEmbeddedFile, Identity</description>
			<test>StmFHasTypeName != true || StmFNameValue == "Identity" || StmFNameValue == "DefaultCryptFilter" || StmFNameValue == "DefEmbeddedFile"</test>
			<error>
				<message>Entry StmF with type Name in EncryptionPublicKey has incorrect value %2 instead of DefaultCryptFilter, DefEmbeddedFile, Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>StmFNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16460"/>
			<description>Entry StrF in EncryptionPublicKey shall have type Name</description>
			<test>containsStrF == false || StrFHasTypeName == true</test>
			<error>
				<message>Entry StrF in EncryptionPublicKey is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="6" testNumber="16461"/>
			<description>Entry StrF with type Name in EncryptionPublicKey shall have one of values: DefaultCryptFilter, Identity</description>
			<test>StrFHasTypeName != true || StrFNameValue == "Identity" || StrFNameValue == "DefaultCryptFilter"</test>
			<error>
				<message>Entry StrF with type Name in EncryptionPublicKey has incorrect value %2 instead of DefaultCryptFilter, Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>StrFNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16462"/>
			<description>Entry SubFilter in EncryptionPublicKey shall have type Name</description>
			<test>containsSubFilter == false || SubFilterHasTypeName == true</test>
			<error>
				<message>Entry SubFilter in EncryptionPublicKey is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="6" testNumber="16463"/>
			<description>Entry SubFilter with type Name in EncryptionPublicKey shall have one of values: adbe.pkcs7.s3, adbe.pkcs7.s4, adbe.pkcs7.s5</description>
			<test>SubFilterHasTypeName != true || SubFilterNameValue == "adbe.pkcs7.s3" || SubFilterNameValue == "adbe.pkcs7.s4" || SubFilterNameValue == "adbe.pkcs7.s5"</test>
			<error>
				<message>Entry SubFilter with type Name in EncryptionPublicKey has incorrect value %2 instead of adbe.pkcs7.s3, adbe.pkcs7.s4, adbe.pkcs7.s5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16464"/>
			<description>Entry V in EncryptionPublicKey shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in EncryptionPublicKey is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="7" testNumber="16465"/>
			<description>Entry V in EncryptionPublicKey is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in EncryptionPublicKey is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="19" testNumber="16466"/>
			<description>Entry V with type Integer in EncryptionPublicKey shouldn't have deprecated value 0</description>
			<test>VIntegerValue != 0</test>
			<error>
				<message>Entry V with type Integer in EncryptionPublicKey has deprecated value 0</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_5" clause="13" testNumber="16467"/>
			<description>Entry V with type Integer in EncryptionPublicKey shall have one of values: 0, 1, 2, 3, 4</description>
			<test>VHasTypeInteger != true || VIntegerValue == 0 || VIntegerValue == 1 || VIntegerValue == 2 || VIntegerValue == 3 || VIntegerValue == 4</test>
			<error>
				<message>Entry V with type Integer in EncryptionPublicKey has incorrect value %2 instead of 0, 1, 2, 3, 4</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="1" testNumber="16665"/>
			<description>EncryptionStandard shall not contain entries except CF, EFF, EncryptMetadata, Filter, Length, O, OE, P, Perms, R, StmF, StrF, SubFilter, U, UE, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CF' &amp;&amp; elem != 'EFF' &amp;&amp; elem != 'EncryptMetadata' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'O' &amp;&amp; elem != 'OE' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Perms' &amp;&amp; elem != 'R' &amp;&amp; elem != 'StmF' &amp;&amp; elem != 'StrF' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'U' &amp;&amp; elem != 'UE' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>EncryptionStandard contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CF' &amp;&amp; elem != 'EFF' &amp;&amp; elem != 'EncryptMetadata' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'O' &amp;&amp; elem != 'OE' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Perms' &amp;&amp; elem != 'R' &amp;&amp; elem != 'StmF' &amp;&amp; elem != 'StrF' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'U' &amp;&amp; elem != 'UE' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="17" testNumber="16666"/>
			<description>Entry CF with type Dictionary in EncryptionStandard shall be object CryptFilterMap</description>
			<test>CFHasTypeDictionary != true || CF_size == 1</test>
			<error>
				<message>Entry CF with type Dictionary in EncryptionStandard is not object CryptFilterMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16667"/>
			<description>Entry CF in EncryptionStandard shall have type Dictionary</description>
			<test>containsCF == false || CFHasTypeDictionary == true</test>
			<error>
				<message>Entry CF in EncryptionStandard is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16668"/>
			<description>Entry EFF in EncryptionStandard shall have type Name</description>
			<test>containsEFF == false || EFFHasTypeName == true</test>
			<error>
				<message>Entry EFF in EncryptionStandard is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16669"/>
			<description>Entry EncryptMetadata in EncryptionStandard shall have type Boolean</description>
			<test>containsEncryptMetadata == false || EncryptMetadataHasTypeBoolean == true</test>
			<error>
				<message>Entry EncryptMetadata in EncryptionStandard is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16670"/>
			<description>Entry Filter in EncryptionStandard shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in EncryptionStandard is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="7" testNumber="16671"/>
			<description>Entry Filter in EncryptionStandard is required</description>
			<test>containsFilter == true</test>
			<error>
				<message>Entry Filter in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="6" testNumber="16672"/>
			<description>Entry Filter with type Name in EncryptionStandard shall have value Standard</description>
			<test>FilterHasTypeName != true || FilterNameValue == "Standard"</test>
			<error>
				<message>Entry Filter with type Name in EncryptionStandard has incorrect value %2 instead of Standard</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16673"/>
			<description>Entry Length in EncryptionStandard shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in EncryptionStandard is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="14" testNumber="16674"/>
			<description>Entry Length with type Integer in EncryptionStandard shall satisfy possible value predicate: fn:Eval((@Length &gt;= 40) &amp;&amp; ((@Length &lt;= 128) || fn:Extension(ADBE_Extn3 , (@Length &lt;= 256))) &amp;&amp; ((@Length mod 8) == 0))</description>
			<test>LengthHasTypeInteger != true || (LengthIntegerValue &gt;= 40) &amp;&amp; ((LengthIntegerValue &lt;= 128) || ((hasExtensionADBE_Extn3 == true) &amp;&amp; (LengthIntegerValue &lt;= 256))) &amp;&amp; ((LengthIntegerValue % 8) == 0)</test>
			<error>
				<message>Entry Length with type Integer in EncryptionStandard does not satisfy possible value predicate: fn:Eval((@Length &gt;= 40) &amp;&amp; ((@Length &lt;= 128) || fn:Extension(ADBE_Extn3 , (@Length &lt;= 256))) &amp;&amp; ((@Length mod 8) == 0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16675"/>
			<description>Entry O in EncryptionStandard shall have type StringByte</description>
			<test>containsO == false || OHasTypeStringByte == true</test>
			<error>
				<message>Entry O in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="7" testNumber="16676"/>
			<description>Entry O in EncryptionStandard is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16677"/>
			<description>Entry OE in EncryptionStandard shall have type StringByte</description>
			<test>containsOE == false || OEHasTypeStringByte == true</test>
			<error>
				<message>Entry OE in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="11" testNumber="16678"/>
			<description>Entry OE in EncryptionStandard is required, when fn:IsRequired((@R == 5) || (@R == 6))</description>
			<test>(containsOE == true || ((RIntegerValue == 5) || (RIntegerValue == 6)) == false)</test>
			<error>
				<message>Entry OE in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16679"/>
			<description>Entry P in EncryptionStandard shall have type Bitmask</description>
			<test>containsP == false || PHasTypeBitmask == true</test>
			<error>
				<message>Entry P in EncryptionStandard is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="7" testNumber="16680"/>
			<description>Entry P in EncryptionStandard is required</description>
			<test>containsP == true</test>
			<error>
				<message>Entry P in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="9" testNumber="16681"/>
			<description>Entry P with type Bitmask in EncryptionStandard shall satisfy special case: fn:Eval(fn:BitsClear(1 , 2) &amp;&amp; fn:BitsSet(7 , 8) &amp;&amp; fn:SinceVersion(2.0 , fn:BitSet(10)) &amp;&amp; (fn:SinceVersion(2.0 , fn:Extension(ISO_TS_32004 , fn:BitsSet(14 , 32))) || fn:BitsSet(13 , 32)))</description>
			<test>PHasTypeBitmask != true || (((PBitmaskValue &gt;&gt; 0 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 1 &amp; 1) == 0) &amp;&amp; ((PBitmaskValue &gt;&gt; 6 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 7 &amp; 1) == 1) &amp;&amp; true &amp;&amp; (true || ((PBitmaskValue &gt;&gt; 12 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 13 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 14 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 15 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 16 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 17 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 18 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 19 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 20 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 21 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 22 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 23 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 24 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 25 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 26 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 27 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 28 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 29 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 30 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 31 &amp; 1) == 1)))</test>
			<error>
				<message>Entry P with type Bitmask in EncryptionStandard does not satisfy special case: fn:Eval(fn:BitsClear(1 , 2) &amp;&amp; fn:BitsSet(7 , 8) &amp;&amp; fn:SinceVersion(2.0 , fn:BitSet(10)) &amp;&amp; (fn:SinceVersion(2.0 , fn:Extension(ISO_TS_32004 , fn:BitsSet(14 , 32))) || fn:BitsSet(13 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16682"/>
			<description>Entry Perms in EncryptionStandard shall have type StringByte</description>
			<test>containsPerms == false || PermsHasTypeStringByte == true</test>
			<error>
				<message>Entry Perms in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="11" testNumber="16683"/>
			<description>Entry Perms in EncryptionStandard is required, when fn:IsRequired((@R == 5) || (@R == 6))</description>
			<test>(containsPerms == true || ((RIntegerValue == 5) || (RIntegerValue == 6)) == false)</test>
			<error>
				<message>Entry Perms in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16684"/>
			<description>Entry R in EncryptionStandard shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in EncryptionStandard is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="7" testNumber="16685"/>
			<description>Entry R in EncryptionStandard is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="15" testNumber="16686"/>
			<description>Entry R in EncryptionStandard shall have Integer value 2, if this object satisfies condition @V &lt; 2</description>
			<test>((VIntegerValue &lt; 2) == false || RIntegerValue == 2)</test>
			<error>
				<message>Entry R in EncryptionStandard does not have value 2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="15" testNumber="16687"/>
			<description>Entry R in EncryptionStandard shall have Integer value 3, if this object satisfies condition (@V == 2) || (@V == 3)</description>
			<test>(((VIntegerValue == 2) || (VIntegerValue == 3)) == false || RIntegerValue == 3)</test>
			<error>
				<message>Entry R in EncryptionStandard does not have value 3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="15" testNumber="16688"/>
			<description>Entry R in EncryptionStandard shall have Integer value 4, if this object satisfies condition @V == 4</description>
			<test>((VIntegerValue == 4) == false || RIntegerValue == 4)</test>
			<error>
				<message>Entry R in EncryptionStandard does not have value 4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="13" testNumber="16689"/>
			<description>Entry R with type Integer in EncryptionStandard shall have one of values: 2, 3, 4</description>
			<test>RHasTypeInteger != true || RIntegerValue == 2 || RIntegerValue == 3 || RIntegerValue == 4</test>
			<error>
				<message>Entry R with type Integer in EncryptionStandard has incorrect value %2 instead of 2, 3, 4</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16690"/>
			<description>Entry StmF in EncryptionStandard shall have type Name</description>
			<test>containsStmF == false || StmFHasTypeName == true</test>
			<error>
				<message>Entry StmF in EncryptionStandard is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16691"/>
			<description>Entry StrF in EncryptionStandard shall have type Name</description>
			<test>containsStrF == false || StrFHasTypeName == true</test>
			<error>
				<message>Entry StrF in EncryptionStandard is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16692"/>
			<description>Entry SubFilter in EncryptionStandard shall have type Name</description>
			<test>containsSubFilter == false || SubFilterHasTypeName == true</test>
			<error>
				<message>Entry SubFilter in EncryptionStandard is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16693"/>
			<description>Entry U in EncryptionStandard shall have type StringByte</description>
			<test>containsU == false || UHasTypeStringByte == true</test>
			<error>
				<message>Entry U in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="7" testNumber="16694"/>
			<description>Entry U in EncryptionStandard is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16695"/>
			<description>Entry UE in EncryptionStandard shall have type StringByte</description>
			<test>containsUE == false || UEHasTypeStringByte == true</test>
			<error>
				<message>Entry UE in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="11" testNumber="16696"/>
			<description>Entry UE in EncryptionStandard is required, when fn:IsRequired((@R == 5) || (@R == 6))</description>
			<test>(containsUE == true || ((RIntegerValue == 5) || (RIntegerValue == 6)) == false)</test>
			<error>
				<message>Entry UE in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16697"/>
			<description>Entry V in EncryptionStandard shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in EncryptionStandard is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="7" testNumber="16698"/>
			<description>Entry V in EncryptionStandard is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="19" testNumber="16699"/>
			<description>Entry V with type Integer in EncryptionStandard shouldn't have deprecated value 0</description>
			<test>VIntegerValue != 0</test>
			<error>
				<message>Entry V with type Integer in EncryptionStandard has deprecated value 0</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_5" clause="13" testNumber="16700"/>
			<description>Entry V with type Integer in EncryptionStandard shall have one of values: 0, 1, 2, 3, 4</description>
			<test>VHasTypeInteger != true || VIntegerValue == 0 || VIntegerValue == 1 || VIntegerValue == 2 || VIntegerValue == 3 || VIntegerValue == 4</test>
			<error>
				<message>Entry V with type Integer in EncryptionStandard has incorrect value %2 instead of 0, 1, 2, 3, 4</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFDDictEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="16894"/>
			<description>Entry with type Dictionary in FDDict shall be object CIDFontDescriptorMetrics</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in FDDict is not object CIDFontDescriptorMetrics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFDDictEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16895"/>
			<description>Entry in FDDict shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in FDDict is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_5" clause="1" testNumber="16934"/>
			<description>Field shall not contain entries except AA, Ff, Kids, Parent, T, TM, TU</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU').length == 0</test>
			<error>
				<message>Field contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_5" clause="17" testNumber="16935"/>
			<description>Entry AA with type Dictionary in Field shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in Field is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16936"/>
			<description>Entry AA in Field shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in Field is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16937"/>
			<description>Entry Ff in Field shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in Field is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_5" clause="9" testNumber="16938"/>
			<description>Entry Ff with type Bitmask in Field shall satisfy special case: fn:Eval(fn:BitsClear(4 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in Field does not satisfy special case: fn:Eval(fn:BitsClear(4 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_5" clause="17" testNumber="16939"/>
			<description>Entry Kids with type Array in Field shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in Field is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16940"/>
			<description>Entry Kids in Field shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in Field is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_5" clause="17" testNumber="16941"/>
			<description>Entry Parent with type Dictionary in Field shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in Field is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16942"/>
			<description>Entry Parent in Field shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in Field is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16943"/>
			<description>Entry T in Field shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in Field is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16944"/>
			<description>Entry TM in Field shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in Field is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_5" clause="8" testNumber="16945"/>
			<description>Entry TU in Field shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in Field is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="1" testNumber="17043"/>
			<description>FieldBtnCheckbox shall not contain entries except AA, DA, DS, DV, FT, Ff, Kids, Opt, Parent, Q, RV, T, TM, TU, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>FieldBtnCheckbox contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17044"/>
			<description>Entry AA with type Dictionary in FieldBtnCheckbox shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in FieldBtnCheckbox is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17045"/>
			<description>Entry AA in FieldBtnCheckbox shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldBtnCheckbox is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17046"/>
			<description>Entry DA in FieldBtnCheckbox shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in FieldBtnCheckbox is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="7" testNumber="17047"/>
			<description>Entry DA in FieldBtnCheckbox is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldBtnCheckbox is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17048"/>
			<description>Entry DS in FieldBtnCheckbox shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in FieldBtnCheckbox is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17049"/>
			<description>Entry DV in FieldBtnCheckbox shall have type Name</description>
			<test>containsDV == false || DVHasTypeName == true</test>
			<error>
				<message>Entry DV in FieldBtnCheckbox is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17050"/>
			<description>Entry FT in FieldBtnCheckbox shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldBtnCheckbox is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="7" testNumber="17051"/>
			<description>Entry FT in FieldBtnCheckbox is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldBtnCheckbox is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="6" testNumber="17052"/>
			<description>Entry FT with type Name in FieldBtnCheckbox shall have value Btn</description>
			<test>FTHasTypeName != true || FTNameValue == "Btn"</test>
			<error>
				<message>Entry FT with type Name in FieldBtnCheckbox has incorrect value %2 instead of Btn</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17053"/>
			<description>Entry Ff in FieldBtnCheckbox shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldBtnCheckbox is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="9" testNumber="17054"/>
			<description>Entry Ff with type Bitmask in FieldBtnCheckbox shall satisfy special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitsClear(16 , 25) &amp;&amp; fn:BitsClear(27 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldBtnCheckbox does not satisfy special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitsClear(16 , 25) &amp;&amp; fn:BitsClear(27 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17055"/>
			<description>Entry Kids with type Array in FieldBtnCheckbox shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in FieldBtnCheckbox is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17056"/>
			<description>Entry Kids in FieldBtnCheckbox shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldBtnCheckbox is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17057"/>
			<description>Entry Opt with type Array in FieldBtnCheckbox shall be object ArrayOfStringsText</description>
			<test>OptHasTypeArray != true || Opt_size == 1</test>
			<error>
				<message>Entry Opt with type Array in FieldBtnCheckbox is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17058"/>
			<description>Entry Opt in FieldBtnCheckbox shall have type Array</description>
			<test>containsOpt == false || OptHasTypeArray == true</test>
			<error>
				<message>Entry Opt in FieldBtnCheckbox is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17059"/>
			<description>Entry Parent with type Dictionary in FieldBtnCheckbox shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldBtnCheckbox is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17060"/>
			<description>Entry Parent in FieldBtnCheckbox shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldBtnCheckbox is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17061"/>
			<description>Entry Q in FieldBtnCheckbox shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldBtnCheckbox is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="6" testNumber="17062"/>
			<description>Entry Q with type Integer in FieldBtnCheckbox shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldBtnCheckbox has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17063"/>
			<description>Entry RV with type Stream in FieldBtnCheckbox shall be object Stream</description>
			<test>RVHasTypeStream != true || RV_size == 1</test>
			<error>
				<message>Entry RV with type Stream in FieldBtnCheckbox is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17064"/>
			<description>Entry RV in FieldBtnCheckbox shall have one of types: Stream, StringText</description>
			<test>containsRV == false || RVHasTypeStream == true || RVHasTypeStringText == true</test>
			<error>
				<message>Entry RV in FieldBtnCheckbox is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="10" testNumber="17065"/>
			<description>Entry RV with type Stream in FieldBtnCheckbox shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in FieldBtnCheckbox is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17066"/>
			<description>Entry T in FieldBtnCheckbox shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldBtnCheckbox is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17067"/>
			<description>Entry TM in FieldBtnCheckbox shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldBtnCheckbox is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17068"/>
			<description>Entry TU in FieldBtnCheckbox shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldBtnCheckbox is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17069"/>
			<description>Entry V in FieldBtnCheckbox shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in FieldBtnCheckbox is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="1" testNumber="17210"/>
			<description>FieldBtnPush shall not contain entries except AA, DA, DS, DV, FT, Ff, Kids, Parent, Q, RV, T, TM, TU, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>FieldBtnPush contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17211"/>
			<description>Entry AA with type Dictionary in FieldBtnPush shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in FieldBtnPush is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17212"/>
			<description>Entry AA in FieldBtnPush shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldBtnPush is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17213"/>
			<description>Entry DA in FieldBtnPush shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in FieldBtnPush is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="7" testNumber="17214"/>
			<description>Entry DA in FieldBtnPush is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldBtnPush is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17215"/>
			<description>Entry DS in FieldBtnPush shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in FieldBtnPush is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17216"/>
			<description>Entry DV in FieldBtnPush shall have type Name</description>
			<test>containsDV == false || DVHasTypeName == true</test>
			<error>
				<message>Entry DV in FieldBtnPush is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17217"/>
			<description>Entry FT in FieldBtnPush shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldBtnPush is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="7" testNumber="17218"/>
			<description>Entry FT in FieldBtnPush is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldBtnPush is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="6" testNumber="17219"/>
			<description>Entry FT with type Name in FieldBtnPush shall have value Btn</description>
			<test>FTHasTypeName != true || FTNameValue == "Btn"</test>
			<error>
				<message>Entry FT with type Name in FieldBtnPush has incorrect value %2 instead of Btn</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17220"/>
			<description>Entry Ff in FieldBtnPush shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldBtnPush is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="9" testNumber="17221"/>
			<description>Entry Ff with type Bitmask in FieldBtnPush shall satisfy special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitClear(16) &amp;&amp; fn:BitSet(17) &amp;&amp; fn:BitsClear(18 , 25) &amp;&amp; fn:BitsClear(27 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 1 &amp;&amp; ((FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldBtnPush does not satisfy special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitClear(16) &amp;&amp; fn:BitSet(17) &amp;&amp; fn:BitsClear(18 , 25) &amp;&amp; fn:BitsClear(27 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17222"/>
			<description>Entry Kids with type Array in FieldBtnPush shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in FieldBtnPush is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17223"/>
			<description>Entry Kids in FieldBtnPush shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldBtnPush is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17224"/>
			<description>Entry Parent with type Dictionary in FieldBtnPush shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldBtnPush is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17225"/>
			<description>Entry Parent in FieldBtnPush shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldBtnPush is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17226"/>
			<description>Entry Q in FieldBtnPush shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldBtnPush is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="6" testNumber="17227"/>
			<description>Entry Q with type Integer in FieldBtnPush shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldBtnPush has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17228"/>
			<description>Entry RV with type Stream in FieldBtnPush shall be object Stream</description>
			<test>RVHasTypeStream != true || RV_size == 1</test>
			<error>
				<message>Entry RV with type Stream in FieldBtnPush is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17229"/>
			<description>Entry RV in FieldBtnPush shall have one of types: Stream, StringText</description>
			<test>containsRV == false || RVHasTypeStream == true || RVHasTypeStringText == true</test>
			<error>
				<message>Entry RV in FieldBtnPush is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="10" testNumber="17230"/>
			<description>Entry RV with type Stream in FieldBtnPush shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in FieldBtnPush is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17231"/>
			<description>Entry T in FieldBtnPush shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldBtnPush is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17232"/>
			<description>Entry TM in FieldBtnPush shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldBtnPush is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17233"/>
			<description>Entry TU in FieldBtnPush shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldBtnPush is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17234"/>
			<description>Entry V in FieldBtnPush shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in FieldBtnPush is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="1" testNumber="17371"/>
			<description>FieldBtnRadio shall not contain entries except AA, DA, DS, DV, FT, Ff, Kids, Opt, Parent, Q, RV, T, TM, TU, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>FieldBtnRadio contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17372"/>
			<description>Entry AA with type Dictionary in FieldBtnRadio shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in FieldBtnRadio is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17373"/>
			<description>Entry AA in FieldBtnRadio shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldBtnRadio is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17374"/>
			<description>Entry DA in FieldBtnRadio shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in FieldBtnRadio is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="7" testNumber="17375"/>
			<description>Entry DA in FieldBtnRadio is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldBtnRadio is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17376"/>
			<description>Entry DS in FieldBtnRadio shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in FieldBtnRadio is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17377"/>
			<description>Entry DV in FieldBtnRadio shall have type Name</description>
			<test>containsDV == false || DVHasTypeName == true</test>
			<error>
				<message>Entry DV in FieldBtnRadio is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17378"/>
			<description>Entry FT in FieldBtnRadio shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldBtnRadio is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="7" testNumber="17379"/>
			<description>Entry FT in FieldBtnRadio is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldBtnRadio is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="6" testNumber="17380"/>
			<description>Entry FT with type Name in FieldBtnRadio shall have value Btn</description>
			<test>FTHasTypeName != true || FTNameValue == "Btn"</test>
			<error>
				<message>Entry FT with type Name in FieldBtnRadio has incorrect value %2 instead of Btn</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17381"/>
			<description>Entry Ff in FieldBtnRadio shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldBtnRadio is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="9" testNumber="17382"/>
			<description>Entry Ff with type Bitmask in FieldBtnRadio shall satisfy special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitSet(16) &amp;&amp; fn:BitsClear(17 , 25) &amp;&amp; fn:BitsClear(27 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 1 &amp;&amp; ((FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldBtnRadio does not satisfy special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitSet(16) &amp;&amp; fn:BitsClear(17 , 25) &amp;&amp; fn:BitsClear(27 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17383"/>
			<description>Entry Kids with type Array in FieldBtnRadio shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in FieldBtnRadio is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17384"/>
			<description>Entry Kids in FieldBtnRadio shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldBtnRadio is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17385"/>
			<description>Entry Opt with type Array in FieldBtnRadio shall be object ArrayOfStringsText</description>
			<test>OptHasTypeArray != true || Opt_size == 1</test>
			<error>
				<message>Entry Opt with type Array in FieldBtnRadio is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17386"/>
			<description>Entry Opt in FieldBtnRadio shall have type Array</description>
			<test>containsOpt == false || OptHasTypeArray == true</test>
			<error>
				<message>Entry Opt in FieldBtnRadio is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17387"/>
			<description>Entry Parent with type Dictionary in FieldBtnRadio shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldBtnRadio is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17388"/>
			<description>Entry Parent in FieldBtnRadio shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldBtnRadio is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17389"/>
			<description>Entry Q in FieldBtnRadio shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldBtnRadio is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="6" testNumber="17390"/>
			<description>Entry Q with type Integer in FieldBtnRadio shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldBtnRadio has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17391"/>
			<description>Entry RV with type Stream in FieldBtnRadio shall be object Stream</description>
			<test>RVHasTypeStream != true || RV_size == 1</test>
			<error>
				<message>Entry RV with type Stream in FieldBtnRadio is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17392"/>
			<description>Entry RV in FieldBtnRadio shall have one of types: Stream, StringText</description>
			<test>containsRV == false || RVHasTypeStream == true || RVHasTypeStringText == true</test>
			<error>
				<message>Entry RV in FieldBtnRadio is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="10" testNumber="17393"/>
			<description>Entry RV with type Stream in FieldBtnRadio shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in FieldBtnRadio is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17394"/>
			<description>Entry T in FieldBtnRadio shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldBtnRadio is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17395"/>
			<description>Entry TM in FieldBtnRadio shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldBtnRadio is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17396"/>
			<description>Entry TU in FieldBtnRadio shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldBtnRadio is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17397"/>
			<description>Entry V in FieldBtnRadio shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in FieldBtnRadio is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="1" testNumber="17553"/>
			<description>FieldChoice shall not contain entries except AA, DA, DS, DV, FT, Ff, I, Kids, Opt, Parent, Q, RV, T, TI, TM, TU, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'I' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TI' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>FieldChoice contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'I' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TI' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17554"/>
			<description>Entry AA with type Dictionary in FieldChoice shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in FieldChoice is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17555"/>
			<description>Entry AA in FieldChoice shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldChoice is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17556"/>
			<description>Entry DA in FieldChoice shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in FieldChoice is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="7" testNumber="17557"/>
			<description>Entry DA in FieldChoice is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldChoice is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17558"/>
			<description>Entry DS in FieldChoice shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in FieldChoice is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17559"/>
			<description>Entry DV with type Array in FieldChoice shall be object ArrayOfStringsText</description>
			<test>DVHasTypeArray != true || DV_size == 1</test>
			<error>
				<message>Entry DV with type Array in FieldChoice is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17560"/>
			<description>Entry DV in FieldChoice shall have one of types: Array, StringText</description>
			<test>containsDV == false || DVHasTypeArray == true || DVHasTypeStringText == true</test>
			<error>
				<message>Entry DV in FieldChoice is not one of types: Array, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17561"/>
			<description>Entry FT in FieldChoice shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldChoice is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="7" testNumber="17562"/>
			<description>Entry FT in FieldChoice is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldChoice is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="6" testNumber="17563"/>
			<description>Entry FT with type Name in FieldChoice shall have value Ch</description>
			<test>FTHasTypeName != true || FTNameValue == "Ch"</test>
			<error>
				<message>Entry FT with type Name in FieldChoice has incorrect value %2 instead of Ch</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17564"/>
			<description>Entry Ff in FieldChoice shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldChoice is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="9" testNumber="17565"/>
			<description>Entry Ff with type Bitmask in FieldChoice shall satisfy special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitClear(21) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(22 , 23)) &amp;&amp; fn:BitsClear(24 , 26) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitClear(27)) &amp;&amp; fn:BitsClear(28 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; true &amp;&amp; ((FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0) &amp;&amp; true &amp;&amp; ((FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldChoice does not satisfy special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitClear(21) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(22 , 23)) &amp;&amp; fn:BitsClear(24 , 26) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitClear(27)) &amp;&amp; fn:BitsClear(28 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17566"/>
			<description>Entry I with type Array in FieldChoice shall be object ArrayOfNonNegativeIntegersGeneral</description>
			<test>IHasTypeArray != true || I_size == 1</test>
			<error>
				<message>Entry I with type Array in FieldChoice is not object ArrayOfNonNegativeIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17567"/>
			<description>Entry I in FieldChoice shall have type Array</description>
			<test>containsI == false || IHasTypeArray == true</test>
			<error>
				<message>Entry I in FieldChoice is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="9" testNumber="17568"/>
			<description>Entry I with type Array in FieldChoice shall satisfy special case: fn:Eval(fn:ArraySortAscending(I , 1))</description>
			<test>IHasTypeArray != true || (isIArraySortAscending1 == true)</test>
			<error>
				<message>Entry I with type Array in FieldChoice does not satisfy special case: fn:Eval(fn:ArraySortAscending(I , 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17569"/>
			<description>Entry Kids with type Array in FieldChoice shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in FieldChoice is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17570"/>
			<description>Entry Kids in FieldChoice shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldChoice is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17571"/>
			<description>Entry Opt with type Array in FieldChoice shall be object ArrayOfFieldChoiceOpt</description>
			<test>OptHasTypeArray != true || Opt_size == 1</test>
			<error>
				<message>Entry Opt with type Array in FieldChoice is not object ArrayOfFieldChoiceOpt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17572"/>
			<description>Entry Opt in FieldChoice shall have type Array</description>
			<test>containsOpt == false || OptHasTypeArray == true</test>
			<error>
				<message>Entry Opt in FieldChoice is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17573"/>
			<description>Entry Parent with type Dictionary in FieldChoice shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldChoice is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17574"/>
			<description>Entry Parent in FieldChoice shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldChoice is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17575"/>
			<description>Entry Q in FieldChoice shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldChoice is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="6" testNumber="17576"/>
			<description>Entry Q with type Integer in FieldChoice shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldChoice has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17577"/>
			<description>Entry RV with type Stream in FieldChoice shall be object Stream</description>
			<test>RVHasTypeStream != true || RV_size == 1</test>
			<error>
				<message>Entry RV with type Stream in FieldChoice is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17578"/>
			<description>Entry RV in FieldChoice shall have one of types: Stream, StringText</description>
			<test>containsRV == false || RVHasTypeStream == true || RVHasTypeStringText == true</test>
			<error>
				<message>Entry RV in FieldChoice is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="10" testNumber="17579"/>
			<description>Entry RV with type Stream in FieldChoice shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in FieldChoice is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17580"/>
			<description>Entry T in FieldChoice shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldChoice is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17581"/>
			<description>Entry TI in FieldChoice shall have type Integer</description>
			<test>containsTI == false || TIHasTypeInteger == true</test>
			<error>
				<message>Entry TI in FieldChoice is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="14" testNumber="17582"/>
			<description>Entry TI with type Integer in FieldChoice shall satisfy possible value predicate: fn:Eval((@TI &gt;= 0) &amp;&amp; (@TI &lt; fn:ArrayLength(Opt)))</description>
			<test>TIHasTypeInteger != true || (TIIntegerValue &gt;= 0) &amp;&amp; (TIIntegerValue &lt; OptArraySize)</test>
			<error>
				<message>Entry TI with type Integer in FieldChoice does not satisfy possible value predicate: fn:Eval((@TI &gt;= 0) &amp;&amp; (@TI &lt; fn:ArrayLength(Opt)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17583"/>
			<description>Entry TM in FieldChoice shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldChoice is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17584"/>
			<description>Entry TU in FieldChoice shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldChoice is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17585"/>
			<description>Entry V with type Array in FieldChoice shall be object ArrayOfStringsText</description>
			<test>VHasTypeArray != true || V_size == 1</test>
			<error>
				<message>Entry V with type Array in FieldChoice is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17586"/>
			<description>Entry V in FieldChoice shall have one of types: Array, StringText</description>
			<test>containsV == false || VHasTypeArray == true || VHasTypeStringText == true</test>
			<error>
				<message>Entry V in FieldChoice is not one of types: Array, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_5" clause="1" testNumber="17689"/>
			<description>FieldMDPTransformParameters shall not contain entries except Action, Fields, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Action' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>FieldMDPTransformParameters contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Action' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17690"/>
			<description>Entry Action in FieldMDPTransformParameters shall have type Name</description>
			<test>containsAction == false || ActionHasTypeName == true</test>
			<error>
				<message>Entry Action in FieldMDPTransformParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_5" clause="6" testNumber="17691"/>
			<description>Entry Action with type Name in FieldMDPTransformParameters shall have one of values: All, Exclude, Include</description>
			<test>ActionHasTypeName != true || ActionNameValue == "All" || ActionNameValue == "Include" || ActionNameValue == "Exclude"</test>
			<error>
				<message>Entry Action with type Name in FieldMDPTransformParameters has incorrect value %2 instead of All, Exclude, Include</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ActionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17692"/>
			<description>Entry Fields with type Array in FieldMDPTransformParameters shall be object ArrayOfStringsText</description>
			<test>FieldsHasTypeArray != true || Fields_size == 1</test>
			<error>
				<message>Entry Fields with type Array in FieldMDPTransformParameters is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17693"/>
			<description>Entry Fields in FieldMDPTransformParameters shall have type Array</description>
			<test>containsFields == false || FieldsHasTypeArray == true</test>
			<error>
				<message>Entry Fields in FieldMDPTransformParameters is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_5" clause="11" testNumber="17694"/>
			<description>Entry Fields in FieldMDPTransformParameters is required, when fn:IsRequired((@Action == Include) || (@Action == Exclude))</description>
			<test>(containsFields == true || ((ActionNameValue == "Include") || (ActionNameValue == "Exclude")) == false)</test>
			<error>
				<message>Entry Fields in FieldMDPTransformParameters is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17695"/>
			<description>Entry Type in FieldMDPTransformParameters shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FieldMDPTransformParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_5" clause="6" testNumber="17696"/>
			<description>Entry Type with type Name in FieldMDPTransformParameters shall have value TransformParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "TransformParams"</test>
			<error>
				<message>Entry Type with type Name in FieldMDPTransformParameters has incorrect value %2 instead of TransformParams</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17697"/>
			<description>Entry V in FieldMDPTransformParameters shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in FieldMDPTransformParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_5" clause="7" testNumber="17698"/>
			<description>Entry V in FieldMDPTransformParameters is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in FieldMDPTransformParameters is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_5" clause="6" testNumber="17699"/>
			<description>Entry V with type Name in FieldMDPTransformParameters shall have value 1.2</description>
			<test>VHasTypeName != true || VNameValue == "1.2"</test>
			<error>
				<message>Entry V with type Name in FieldMDPTransformParameters has incorrect value %2 instead of 1.2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="1" testNumber="17777"/>
			<description>FieldSig shall not contain entries except AA, DA, DS, DV, FT, Ff, Kids, Lock, Parent, Q, RV, SV, T, TM, TU, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Lock' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'SV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>FieldSig contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Lock' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'SV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17778"/>
			<description>Entry AA with type Dictionary in FieldSig shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in FieldSig is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17779"/>
			<description>Entry AA in FieldSig shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldSig is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17780"/>
			<description>Entry DA in FieldSig shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in FieldSig is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17781"/>
			<description>Entry DS in FieldSig shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in FieldSig is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17782"/>
			<description>Entry DV with type Dictionary in FieldSig shall be one of objects Signature, DocTimeStamp</description>
			<test>DVHasTypeDictionary != true || DV_size == 1</test>
			<error>
				<message>Entry DV with type Dictionary in FieldSig is not one of objects Signature, DocTimeStamp</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17783"/>
			<description>Entry DV in FieldSig shall have type Dictionary</description>
			<test>containsDV == false || DVHasTypeDictionary == true</test>
			<error>
				<message>Entry DV in FieldSig is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17784"/>
			<description>Entry FT in FieldSig shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldSig is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="7" testNumber="17785"/>
			<description>Entry FT in FieldSig is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldSig is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="6" testNumber="17786"/>
			<description>Entry FT with type Name in FieldSig shall have value Sig</description>
			<test>FTHasTypeName != true || FTNameValue == "Sig"</test>
			<error>
				<message>Entry FT with type Name in FieldSig has incorrect value %2 instead of Sig</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17787"/>
			<description>Entry Ff in FieldSig shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldSig is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="9" testNumber="17788"/>
			<description>Entry Ff with type Bitmask in FieldSig shall satisfy special case: fn:Eval(fn:BitsClear(4 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldSig does not satisfy special case: fn:Eval(fn:BitsClear(4 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17789"/>
			<description>Entry Kids with type Array in FieldSig shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in FieldSig is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17790"/>
			<description>Entry Kids in FieldSig shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldSig is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17791"/>
			<description>Entry Lock with type Dictionary in FieldSig shall be object SigFieldLock</description>
			<test>LockHasTypeDictionary != true || Lock_size == 1</test>
			<error>
				<message>Entry Lock with type Dictionary in FieldSig is not object SigFieldLock</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17792"/>
			<description>Entry Lock in FieldSig shall have type Dictionary</description>
			<test>containsLock == false || LockHasTypeDictionary == true</test>
			<error>
				<message>Entry Lock in FieldSig is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="10" testNumber="17793"/>
			<description>Entry Lock with type Dictionary in FieldSig shall be indirect</description>
			<test>LockHasTypeDictionary != true || isLockIndirect == true</test>
			<error>
				<message>Entry Lock with type Dictionary in FieldSig is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17794"/>
			<description>Entry Parent with type Dictionary in FieldSig shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldSig is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17795"/>
			<description>Entry Parent in FieldSig shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldSig is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17796"/>
			<description>Entry Q in FieldSig shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldSig is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="6" testNumber="17797"/>
			<description>Entry Q with type Integer in FieldSig shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldSig has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17798"/>
			<description>Entry RV with type Stream in FieldSig shall be object Stream</description>
			<test>RVHasTypeStream != true || RV_size == 1</test>
			<error>
				<message>Entry RV with type Stream in FieldSig is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17799"/>
			<description>Entry RV in FieldSig shall have one of types: Stream, StringText</description>
			<test>containsRV == false || RVHasTypeStream == true || RVHasTypeStringText == true</test>
			<error>
				<message>Entry RV in FieldSig is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="10" testNumber="17800"/>
			<description>Entry RV with type Stream in FieldSig shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in FieldSig is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17801"/>
			<description>Entry SV with type Dictionary in FieldSig shall be object SigFieldSeedValue</description>
			<test>SVHasTypeDictionary != true || SV_size == 1</test>
			<error>
				<message>Entry SV with type Dictionary in FieldSig is not object SigFieldSeedValue</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17802"/>
			<description>Entry SV in FieldSig shall have type Dictionary</description>
			<test>containsSV == false || SVHasTypeDictionary == true</test>
			<error>
				<message>Entry SV in FieldSig is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="10" testNumber="17803"/>
			<description>Entry SV with type Dictionary in FieldSig shall be indirect</description>
			<test>SVHasTypeDictionary != true || isSVIndirect == true</test>
			<error>
				<message>Entry SV with type Dictionary in FieldSig is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17804"/>
			<description>Entry T in FieldSig shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldSig is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17805"/>
			<description>Entry TM in FieldSig shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldSig is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17806"/>
			<description>Entry TU in FieldSig shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldSig is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17807"/>
			<description>Entry V with type Dictionary in FieldSig shall be one of objects Signature, DocTimeStamp</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in FieldSig is not one of objects Signature, DocTimeStamp</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17808"/>
			<description>Entry V in FieldSig shall have type Dictionary</description>
			<test>containsV == false || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in FieldSig is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="1" testNumber="17982"/>
			<description>FieldTx shall not contain entries except AA, DA, DS, DV, FT, Ff, Kids, MaxLen, Parent, Q, RV, T, TM, TU, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MaxLen' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>FieldTx contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MaxLen' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17983"/>
			<description>Entry AA with type Dictionary in FieldTx shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in FieldTx is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17984"/>
			<description>Entry AA in FieldTx shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldTx is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17985"/>
			<description>Entry DA in FieldTx shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in FieldTx is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="7" testNumber="17986"/>
			<description>Entry DA in FieldTx is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldTx is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17987"/>
			<description>Entry DS in FieldTx shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in FieldTx is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17988"/>
			<description>Entry DV with type Stream in FieldTx shall be object Stream</description>
			<test>DVHasTypeStream != true || DV_size == 1</test>
			<error>
				<message>Entry DV with type Stream in FieldTx is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17989"/>
			<description>Entry DV in FieldTx shall have one of types: Stream, StringText</description>
			<test>containsDV == false || DVHasTypeStream == true || DVHasTypeStringText == true</test>
			<error>
				<message>Entry DV in FieldTx is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="10" testNumber="17990"/>
			<description>Entry DV with type Stream in FieldTx shall be indirect</description>
			<test>DVHasTypeStream != true || isDVIndirect == true</test>
			<error>
				<message>Entry DV with type Stream in FieldTx is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17991"/>
			<description>Entry FT in FieldTx shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldTx is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="7" testNumber="17992"/>
			<description>Entry FT in FieldTx is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldTx is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="6" testNumber="17993"/>
			<description>Entry FT with type Name in FieldTx shall have value Tx</description>
			<test>FTHasTypeName != true || FTNameValue == "Tx"</test>
			<error>
				<message>Entry FT with type Name in FieldTx has incorrect value %2 instead of Tx</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17994"/>
			<description>Entry Ff in FieldTx shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldTx is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="9" testNumber="17995"/>
			<description>Entry Ff with type Bitmask in FieldTx shall satisfy special case: fn:Eval(fn:BitsClear(15 , 20) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitClear(21)) &amp;&amp; fn:BitClear(22) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(23 , 24)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(25 , 26)) &amp;&amp; fn:BitsClear(27 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0) &amp;&amp; true &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; true &amp;&amp; true &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldTx does not satisfy special case: fn:Eval(fn:BitsClear(15 , 20) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitClear(21)) &amp;&amp; fn:BitClear(22) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(23 , 24)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(25 , 26)) &amp;&amp; fn:BitsClear(27 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="17" testNumber="17996"/>
			<description>Entry Kids with type Array in FieldTx shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in FieldTx is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17997"/>
			<description>Entry Kids in FieldTx shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldTx is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="8" testNumber="17998"/>
			<description>Entry MaxLen in FieldTx shall have type Integer</description>
			<test>containsMaxLen == false || MaxLenHasTypeInteger == true</test>
			<error>
				<message>Entry MaxLen in FieldTx is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="9" testNumber="17999"/>
			<description>Entry MaxLen with type Integer in FieldTx shall satisfy special case: fn:Eval(@MaxLen &gt;= 0)</description>
			<test>MaxLenHasTypeInteger != true || (MaxLenIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry MaxLen with type Integer in FieldTx does not satisfy special case: fn:Eval(@MaxLen &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="17" testNumber="18000"/>
			<description>Entry Parent with type Dictionary in FieldTx shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldTx is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18001"/>
			<description>Entry Parent in FieldTx shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldTx is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18002"/>
			<description>Entry Q in FieldTx shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldTx is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="6" testNumber="18003"/>
			<description>Entry Q with type Integer in FieldTx shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldTx has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="17" testNumber="18004"/>
			<description>Entry RV with type Stream in FieldTx shall be object Stream</description>
			<test>RVHasTypeStream != true || RV_size == 1</test>
			<error>
				<message>Entry RV with type Stream in FieldTx is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18005"/>
			<description>Entry RV in FieldTx shall have one of types: Stream, StringText</description>
			<test>containsRV == false || RVHasTypeStream == true || RVHasTypeStringText == true</test>
			<error>
				<message>Entry RV in FieldTx is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="10" testNumber="18006"/>
			<description>Entry RV with type Stream in FieldTx shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in FieldTx is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18007"/>
			<description>Entry T in FieldTx shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldTx is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18008"/>
			<description>Entry TM in FieldTx shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldTx is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18009"/>
			<description>Entry TU in FieldTx shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldTx is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="17" testNumber="18010"/>
			<description>Entry V with type Stream in FieldTx shall be object Stream</description>
			<test>VHasTypeStream != true || V_size == 1</test>
			<error>
				<message>Entry V with type Stream in FieldTx is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18011"/>
			<description>Entry V in FieldTx shall have one of types: Stream, StringText</description>
			<test>containsV == false || VHasTypeStream == true || VHasTypeStringText == true</test>
			<error>
				<message>Entry V in FieldTx is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_5" clause="10" testNumber="18012"/>
			<description>Entry V with type Stream in FieldTx shall be indirect</description>
			<test>VHasTypeStream != true || isVIndirect == true</test>
			<error>
				<message>Entry V with type Stream in FieldTx is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_5" clause="1" testNumber="18114"/>
			<description>FileSpecEF shall not contain entries except F</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F').length == 0</test>
			<error>
				<message>FileSpecEF contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_5" clause="17" testNumber="18115"/>
			<description>Entry F with type Stream in FileSpecEF shall be object EmbeddedFileStream</description>
			<test>FHasTypeStream != true || F_size == 1</test>
			<error>
				<message>Entry F with type Stream in FileSpecEF is not object EmbeddedFileStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18116"/>
			<description>Entry F in FileSpecEF shall have type Stream</description>
			<test>containsF == false || FHasTypeStream == true</test>
			<error>
				<message>Entry F in FileSpecEF is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_5" clause="10" testNumber="18117"/>
			<description>Entry F with type Stream in FileSpecEF shall be indirect</description>
			<test>FHasTypeStream != true || isFIndirect == true</test>
			<error>
				<message>Entry F with type Stream in FileSpecEF is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_5" clause="1" testNumber="18146"/>
			<description>FileSpecRF shall not contain entries except F</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F').length == 0</test>
			<error>
				<message>FileSpecRF contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_5" clause="17" testNumber="18147"/>
			<description>Entry F with type Array in FileSpecRF shall be object RelatedFilesArray</description>
			<test>FHasTypeArray != true || F_size == 1</test>
			<error>
				<message>Entry F with type Array in FileSpecRF is not object RelatedFilesArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18148"/>
			<description>Entry F in FileSpecRF shall have type Array</description>
			<test>containsF == false || FHasTypeArray == true</test>
			<error>
				<message>Entry F in FileSpecRF is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_5" clause="10" testNumber="18149"/>
			<description>Entry F with type Array in FileSpecRF shall be indirect</description>
			<test>FHasTypeArray != true || isFIndirect == true</test>
			<error>
				<message>Entry F with type Array in FileSpecRF is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_5" clause="9" testNumber="18150"/>
			<description>Entry F with type Array in FileSpecRF shall satisfy special case: fn:Eval((fn:ArrayLength(F) mod 2) == 0)</description>
			<test>FHasTypeArray != true || ((FArraySize % 2) == 0)</test>
			<error>
				<message>Entry F with type Array in FileSpecRF does not satisfy special case: fn:Eval((fn:ArrayLength(F) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_5" clause="1" testNumber="18235"/>
			<description>FileSpecification shall not contain entries except DOS, EF, F, FS, ID, Mac, RF, Type, Unix, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DOS' &amp;&amp; elem != 'EF' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FS' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'RF' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Unix' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>FileSpecification contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DOS' &amp;&amp; elem != 'EF' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FS' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'RF' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Unix' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18236"/>
			<description>Entry DOS in FileSpecification shall have type StringByte</description>
			<test>containsDOS == false || DOSHasTypeStringByte == true</test>
			<error>
				<message>Entry DOS in FileSpecification is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_5" clause="17" testNumber="18237"/>
			<description>Entry EF with type Dictionary in FileSpecification shall be object FileSpecEF</description>
			<test>EFHasTypeDictionary != true || EF_size == 1</test>
			<error>
				<message>Entry EF with type Dictionary in FileSpecification is not object FileSpecEF</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18238"/>
			<description>Entry EF in FileSpecification shall have type Dictionary</description>
			<test>containsEF == false || EFHasTypeDictionary == true</test>
			<error>
				<message>Entry EF in FileSpecification is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_5" clause="11" testNumber="18239"/>
			<description>Entry EF in FileSpecification is required, when fn:IsRequired(fn:IsPresent(RF))</description>
			<test>(containsEF == true || ((containsRF == true)) == false)</test>
			<error>
				<message>Entry EF in FileSpecification is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18240"/>
			<description>Entry F in FileSpecification shall have type String</description>
			<test>containsF == false || FHasTypeString == true</test>
			<error>
				<message>Entry F in FileSpecification is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_5" clause="11" testNumber="18241"/>
			<description>Entry F in FileSpecification is required, when fn:IsRequired(fn:Not(fn:IsPresent(DOS)) &amp;&amp; fn:Not(fn:IsPresent(Mac)) &amp;&amp; fn:Not(fn:IsPresent(Unix)))</description>
			<test>(containsF == true || (((containsDOS == true)) != true &amp;&amp; ((containsMac == true)) != true &amp;&amp; ((containsUnix == true)) != true) == false)</test>
			<error>
				<message>Entry F in FileSpecification is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18242"/>
			<description>Entry FS in FileSpecification shall have type Name</description>
			<test>containsFS == false || FSHasTypeName == true</test>
			<error>
				<message>Entry FS in FileSpecification is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_5" clause="17" testNumber="18243"/>
			<description>Entry ID with type Array in FileSpecification shall be object ArrayOf_2StringsByte</description>
			<test>entryIDHasTypeArray != true || entryID_size == 1</test>
			<error>
				<message>Entry ID with type Array in FileSpecification is not object ArrayOf_2StringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18244"/>
			<description>Entry ID in FileSpecification shall have type Array</description>
			<test>containsID == false || entryIDHasTypeArray == true</test>
			<error>
				<message>Entry ID in FileSpecification is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18245"/>
			<description>Entry Mac in FileSpecification shall have type StringByte</description>
			<test>containsMac == false || MacHasTypeStringByte == true</test>
			<error>
				<message>Entry Mac in FileSpecification is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_5" clause="17" testNumber="18246"/>
			<description>Entry RF with type Dictionary in FileSpecification shall be object FileSpecRF</description>
			<test>RFHasTypeDictionary != true || RF_size == 1</test>
			<error>
				<message>Entry RF with type Dictionary in FileSpecification is not object FileSpecRF</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18247"/>
			<description>Entry RF in FileSpecification shall have type Dictionary</description>
			<test>containsRF == false || RFHasTypeDictionary == true</test>
			<error>
				<message>Entry RF in FileSpecification is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18248"/>
			<description>Entry Type in FileSpecification shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FileSpecification is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_5" clause="11" testNumber="18249"/>
			<description>Entry Type in FileSpecification is required, when fn:IsRequired(fn:IsPresent(EF) || fn:IsPresent(EP) || fn:IsPresent(RF))</description>
			<test>(containsType == true || ((containsEF == true) || (containsEP == true) || (containsRF == true)) == false)</test>
			<error>
				<message>Entry Type in FileSpecification is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_5" clause="6" testNumber="18250"/>
			<description>Entry Type with type Name in FileSpecification shall have value Filespec</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Filespec"</test>
			<error>
				<message>Entry Type with type Name in FileSpecification has incorrect value %2 instead of Filespec</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18251"/>
			<description>Entry Unix in FileSpecification shall have type StringByte</description>
			<test>containsUnix == false || UnixHasTypeStringByte == true</test>
			<error>
				<message>Entry Unix in FileSpecification is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18252"/>
			<description>Entry V in FileSpecification shall have type Boolean</description>
			<test>containsV == false || VHasTypeBoolean == true</test>
			<error>
				<message>Entry V in FileSpecification is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="1" testNumber="18425"/>
			<description>FileTrailer shall not contain entries except Encrypt, ID, Info, Prev, Root, Size, XRefStm</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Encrypt' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Root' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'XRefStm').length == 0</test>
			<error>
				<message>FileTrailer contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Encrypt' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Root' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'XRefStm').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="17" testNumber="18426"/>
			<description>Entry Encrypt with type Dictionary in FileTrailer shall be one of objects EncryptionStandard, EncryptionPublicKey</description>
			<test>EncryptHasTypeDictionary != true || Encrypt_size == 1</test>
			<error>
				<message>Entry Encrypt with type Dictionary in FileTrailer is not one of objects EncryptionStandard, EncryptionPublicKey</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18427"/>
			<description>Entry Encrypt in FileTrailer shall have type Dictionary</description>
			<test>containsEncrypt == false || EncryptHasTypeDictionary == true</test>
			<error>
				<message>Entry Encrypt in FileTrailer is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="17" testNumber="18428"/>
			<description>Entry ID with type Array in FileTrailer shall be object TrailerIDArray</description>
			<test>entryIDHasTypeArray != true || entryID_size == 1</test>
			<error>
				<message>Entry ID with type Array in FileTrailer is not object TrailerIDArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18429"/>
			<description>Entry ID in FileTrailer shall have type Array</description>
			<test>containsID == false || entryIDHasTypeArray == true</test>
			<error>
				<message>Entry ID in FileTrailer is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="11" testNumber="18430"/>
			<description>Entry ID in FileTrailer is required, when fn:IsRequired(fn:IsPresent(Encrypt))</description>
			<test>(containsID == true || ((containsEncrypt == true)) == false)</test>
			<error>
				<message>Entry ID in FileTrailer is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="16" testNumber="18431"/>
			<description>If entry ID with type Array in FileTrailer satisfies condition fn:MustBeDirect(fn:IsPresent(Encrypt)), it shall be direct</description>
			<test>entryIDHasTypeArray != true || (isentryIDIndirect == false || ((containsEncrypt == true)) == false)</test>
			<error>
				<message>Entry ID with type Array in FileTrailer is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="17" testNumber="18432"/>
			<description>Entry Info with type Dictionary in FileTrailer shall be object DocInfo</description>
			<test>InfoHasTypeDictionary != true || Info_size == 1</test>
			<error>
				<message>Entry Info with type Dictionary in FileTrailer is not object DocInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18433"/>
			<description>Entry Info in FileTrailer shall have type Dictionary</description>
			<test>containsInfo == false || InfoHasTypeDictionary == true</test>
			<error>
				<message>Entry Info in FileTrailer is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="12" testNumber="18434"/>
			<description>If entry Info with type Dictionary in FileTrailer satisfies condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>InfoHasTypeDictionary != true || (isInfoIndirect == true || (true) == false)</test>
			<error>
				<message>Entry Info with type Dictionary in FileTrailer is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18435"/>
			<description>Entry Prev in FileTrailer shall have type Integer</description>
			<test>containsPrev == false || PrevHasTypeInteger == true</test>
			<error>
				<message>Entry Prev in FileTrailer is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="16" testNumber="18436"/>
			<description>If entry Prev with type Integer in FileTrailer satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>PrevHasTypeInteger != true || (isPrevIndirect == false)</test>
			<error>
				<message>Entry Prev with type Integer in FileTrailer is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="14" testNumber="18437"/>
			<description>Entry Prev with type Integer in FileTrailer shall satisfy possible value predicate: fn:Eval((@Prev &gt;= 0) &amp;&amp; (@Prev &lt;= fn:FileSize()))</description>
			<test>PrevHasTypeInteger != true || (PrevIntegerValue &gt;= 0) &amp;&amp; (PrevIntegerValue &lt;= fileSize)</test>
			<error>
				<message>Entry Prev with type Integer in FileTrailer does not satisfy possible value predicate: fn:Eval((@Prev &gt;= 0) &amp;&amp; (@Prev &lt;= fn:FileSize()))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="17" testNumber="18438"/>
			<description>Entry Root with type Dictionary in FileTrailer shall be object Catalog</description>
			<test>RootHasTypeDictionary != true || Root_size == 1</test>
			<error>
				<message>Entry Root with type Dictionary in FileTrailer is not object Catalog</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18439"/>
			<description>Entry Root in FileTrailer shall have type Dictionary</description>
			<test>containsRoot == false || RootHasTypeDictionary == true</test>
			<error>
				<message>Entry Root in FileTrailer is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="7" testNumber="18440"/>
			<description>Entry Root in FileTrailer is required</description>
			<test>containsRoot == true</test>
			<error>
				<message>Entry Root in FileTrailer is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="10" testNumber="18441"/>
			<description>Entry Root with type Dictionary in FileTrailer shall be indirect</description>
			<test>RootHasTypeDictionary != true || isRootIndirect == true</test>
			<error>
				<message>Entry Root with type Dictionary in FileTrailer is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18442"/>
			<description>Entry Size in FileTrailer shall have type Integer</description>
			<test>containsSize == false || SizeHasTypeInteger == true</test>
			<error>
				<message>Entry Size in FileTrailer is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="7" testNumber="18443"/>
			<description>Entry Size in FileTrailer is required</description>
			<test>containsSize == true</test>
			<error>
				<message>Entry Size in FileTrailer is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="16" testNumber="18444"/>
			<description>If entry Size with type Integer in FileTrailer satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>SizeHasTypeInteger != true || (isSizeIndirect == false)</test>
			<error>
				<message>Entry Size with type Integer in FileTrailer is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="14" testNumber="18445"/>
			<description>Entry Size with type Integer in FileTrailer shall satisfy possible value predicate: fn:Eval(@Size &gt; 0)</description>
			<test>SizeHasTypeInteger != true || SizeIntegerValue &gt; 0</test>
			<error>
				<message>Entry Size with type Integer in FileTrailer does not satisfy possible value predicate: fn:Eval(@Size &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18446"/>
			<description>Entry XRefStm in FileTrailer shall have type Integer</description>
			<test>containsXRefStm == false || XRefStmHasTypeInteger == true</test>
			<error>
				<message>Entry XRefStm in FileTrailer is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_5" clause="14" testNumber="18447"/>
			<description>Entry XRefStm with type Integer in FileTrailer shall satisfy possible value predicate: fn:Eval((@XRefStm &gt;= 0) &amp;&amp; (@XRefStm &lt;= fn:FileSize()))</description>
			<test>XRefStmHasTypeInteger != true || (XRefStmIntegerValue &gt;= 0) &amp;&amp; (XRefStmIntegerValue &lt;= fileSize)</test>
			<error>
				<message>Entry XRefStm with type Integer in FileTrailer does not satisfy possible value predicate: fn:Eval((@XRefStm &gt;= 0) &amp;&amp; (@XRefStm &lt;= fn:FileSize()))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_5" clause="1" testNumber="18586"/>
			<description>FilterCCITTFaxDecode shall not contain entries except BlackIs1, Blackls1, Columns, DamagedRowsBeforeError, EncodedByteAlign, EndOfBlock, EndOfLine, K, Rows</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BlackIs1' &amp;&amp; elem != 'Blackls1' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'DamagedRowsBeforeError' &amp;&amp; elem != 'EncodedByteAlign' &amp;&amp; elem != 'EndOfBlock' &amp;&amp; elem != 'EndOfLine' &amp;&amp; elem != 'K' &amp;&amp; elem != 'Rows').length == 0</test>
			<error>
				<message>FilterCCITTFaxDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BlackIs1' &amp;&amp; elem != 'Blackls1' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'DamagedRowsBeforeError' &amp;&amp; elem != 'EncodedByteAlign' &amp;&amp; elem != 'EndOfBlock' &amp;&amp; elem != 'EndOfLine' &amp;&amp; elem != 'K' &amp;&amp; elem != 'Rows').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18587"/>
			<description>Entry BlackIs1 in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsBlackIs1 == false || BlackIs1HasTypeBoolean == true</test>
			<error>
				<message>Entry BlackIs1 in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18588"/>
			<description>Entry Blackls1 in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsBlackls1 == false || Blackls1HasTypeBoolean == true</test>
			<error>
				<message>Entry Blackls1 in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18589"/>
			<description>Entry Columns in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsColumns == false || ColumnsHasTypeInteger == true</test>
			<error>
				<message>Entry Columns in FilterCCITTFaxDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_5" clause="14" testNumber="18590"/>
			<description>Entry Columns with type Integer in FilterCCITTFaxDecode shall satisfy possible value predicate: fn:Eval(@Columns &gt;= 0)</description>
			<test>ColumnsHasTypeInteger != true || ColumnsIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Columns with type Integer in FilterCCITTFaxDecode does not satisfy possible value predicate: fn:Eval(@Columns &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18591"/>
			<description>Entry DamagedRowsBeforeError in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsDamagedRowsBeforeError == false || DamagedRowsBeforeErrorHasTypeInteger == true</test>
			<error>
				<message>Entry DamagedRowsBeforeError in FilterCCITTFaxDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_5" clause="14" testNumber="18592"/>
			<description>Entry DamagedRowsBeforeError with type Integer in FilterCCITTFaxDecode shall satisfy possible value predicate: fn:Eval(@DamagedRowsBeforeError &gt;= 0)</description>
			<test>DamagedRowsBeforeErrorHasTypeInteger != true || DamagedRowsBeforeErrorIntegerValue &gt;= 0</test>
			<error>
				<message>Entry DamagedRowsBeforeError with type Integer in FilterCCITTFaxDecode does not satisfy possible value predicate: fn:Eval(@DamagedRowsBeforeError &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18593"/>
			<description>Entry EncodedByteAlign in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsEncodedByteAlign == false || EncodedByteAlignHasTypeBoolean == true</test>
			<error>
				<message>Entry EncodedByteAlign in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18594"/>
			<description>Entry EndOfBlock in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsEndOfBlock == false || EndOfBlockHasTypeBoolean == true</test>
			<error>
				<message>Entry EndOfBlock in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18595"/>
			<description>Entry EndOfLine in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsEndOfLine == false || EndOfLineHasTypeBoolean == true</test>
			<error>
				<message>Entry EndOfLine in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18596"/>
			<description>Entry K in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsK == false || KHasTypeInteger == true</test>
			<error>
				<message>Entry K in FilterCCITTFaxDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18597"/>
			<description>Entry Rows in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsRows == false || RowsHasTypeInteger == true</test>
			<error>
				<message>Entry Rows in FilterCCITTFaxDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_5" clause="14" testNumber="18598"/>
			<description>Entry Rows with type Integer in FilterCCITTFaxDecode shall satisfy possible value predicate: fn:Eval(@Rows &gt;= 0)</description>
			<test>RowsHasTypeInteger != true || RowsIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Rows with type Integer in FilterCCITTFaxDecode does not satisfy possible value predicate: fn:Eval(@Rows &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCrypt">
			<id specification="ISO_32000_1_5" clause="1" testNumber="18638"/>
			<description>FilterCrypt shall not contain entries except Name, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>FilterCrypt contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCrypt">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18639"/>
			<description>Entry Name in FilterCrypt shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FilterCrypt is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCrypt">
			<id specification="ISO_32000_1_5" clause="9" testNumber="18640"/>
			<description>Entry Name with type Name in FilterCrypt shall satisfy special case: fn:InKeyMap(trailer::Encrypt::CF)</description>
			<test>NameHasTypeName != true || ((keysStringtrailerEncryptCF.split('&amp;').filter(elem =&gt; elem == NameNameValue).length &gt; 0))</test>
			<error>
				<message>Entry Name with type Name in FilterCrypt does not satisfy special case: fn:InKeyMap(trailer::Encrypt::CF)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCrypt">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18641"/>
			<description>Entry Type in FilterCrypt shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FilterCrypt is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCrypt">
			<id specification="ISO_32000_1_5" clause="6" testNumber="18642"/>
			<description>Entry Type with type Name in FilterCrypt shall have value CryptFilterDecodeParms</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CryptFilterDecodeParms"</test>
			<error>
				<message>Entry Type with type Name in FilterCrypt has incorrect value %2 instead of CryptFilterDecodeParms</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterDCTDecode">
			<id specification="ISO_32000_1_5" clause="1" testNumber="18673"/>
			<description>FilterDCTDecode shall not contain entries except ColorTransform</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ColorTransform').length == 0</test>
			<error>
				<message>FilterDCTDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ColorTransform').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterDCTDecode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18674"/>
			<description>Entry ColorTransform in FilterDCTDecode shall have type Integer</description>
			<test>containsColorTransform == false || ColorTransformHasTypeInteger == true</test>
			<error>
				<message>Entry ColorTransform in FilterDCTDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterDCTDecode">
			<id specification="ISO_32000_1_5" clause="6" testNumber="18675"/>
			<description>Entry ColorTransform with type Integer in FilterDCTDecode shall have one of values: 0, 1</description>
			<test>ColorTransformHasTypeInteger != true || ColorTransformIntegerValue == 0 || ColorTransformIntegerValue == 1</test>
			<error>
				<message>Entry ColorTransform with type Integer in FilterDCTDecode has incorrect value %2 instead of 0, 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorTransformIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_5" clause="1" testNumber="18709"/>
			<description>FilterFlateDecode shall not contain entries except BitsPerComponent, Colors, Columns, Predictor</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'Colors' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'Predictor').length == 0</test>
			<error>
				<message>FilterFlateDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'Colors' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'Predictor').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18710"/>
			<description>Entry BitsPerComponent in FilterFlateDecode shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in FilterFlateDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_5" clause="6" testNumber="18711"/>
			<description>Entry BitsPerComponent with type Integer in FilterFlateDecode shall have one of values: 1, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in FilterFlateDecode has incorrect value %2 instead of 1, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18712"/>
			<description>Entry Colors in FilterFlateDecode shall have type Integer</description>
			<test>containsColors == false || ColorsHasTypeInteger == true</test>
			<error>
				<message>Entry Colors in FilterFlateDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_5" clause="14" testNumber="18713"/>
			<description>Entry Colors with type Integer in FilterFlateDecode shall satisfy possible value predicate: fn:Eval((@Colors &gt;= 1) &amp;&amp; fn:BeforeVersion(1.3 , fn:Eval(@Colors &lt;= 4)))</description>
			<test>ColorsHasTypeInteger != true || (ColorsIntegerValue &gt;= 1) &amp;&amp; true</test>
			<error>
				<message>Entry Colors with type Integer in FilterFlateDecode does not satisfy possible value predicate: fn:Eval((@Colors &gt;= 1) &amp;&amp; fn:BeforeVersion(1.3 , fn:Eval(@Colors &lt;= 4)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18714"/>
			<description>Entry Columns in FilterFlateDecode shall have type Integer</description>
			<test>containsColumns == false || ColumnsHasTypeInteger == true</test>
			<error>
				<message>Entry Columns in FilterFlateDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18715"/>
			<description>Entry Predictor in FilterFlateDecode shall have type Integer</description>
			<test>containsPredictor == false || PredictorHasTypeInteger == true</test>
			<error>
				<message>Entry Predictor in FilterFlateDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_5" clause="6" testNumber="18716"/>
			<description>Entry Predictor with type Integer in FilterFlateDecode shall have one of values: 11, 1, 12, 2, 13, 14, 15, 10</description>
			<test>PredictorHasTypeInteger != true || PredictorIntegerValue == 1 || PredictorIntegerValue == 2 || PredictorIntegerValue == 10 || PredictorIntegerValue == 11 || PredictorIntegerValue == 12 || PredictorIntegerValue == 13 || PredictorIntegerValue == 14 || PredictorIntegerValue == 15</test>
			<error>
				<message>Entry Predictor with type Integer in FilterFlateDecode has incorrect value %2 instead of 11, 1, 12, 2, 13, 14, 15, 10</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PredictorIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterJBIG2Decode">
			<id specification="ISO_32000_1_5" clause="1" testNumber="18745"/>
			<description>FilterJBIG2Decode shall not contain entries except JBIG2Globals</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'JBIG2Globals').length == 0</test>
			<error>
				<message>FilterJBIG2Decode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'JBIG2Globals').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterJBIG2Decode">
			<id specification="ISO_32000_1_5" clause="17" testNumber="18746"/>
			<description>Entry JBIG2Globals with type Stream in FilterJBIG2Decode shall be object Stream</description>
			<test>JBIG2GlobalsHasTypeStream != true || JBIG2Globals_size == 1</test>
			<error>
				<message>Entry JBIG2Globals with type Stream in FilterJBIG2Decode is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterJBIG2Decode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18747"/>
			<description>Entry JBIG2Globals in FilterJBIG2Decode shall have type Stream</description>
			<test>containsJBIG2Globals == false || JBIG2GlobalsHasTypeStream == true</test>
			<error>
				<message>Entry JBIG2Globals in FilterJBIG2Decode is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterJBIG2Decode">
			<id specification="ISO_32000_1_5" clause="10" testNumber="18748"/>
			<description>Entry JBIG2Globals with type Stream in FilterJBIG2Decode shall be indirect</description>
			<test>JBIG2GlobalsHasTypeStream != true || isJBIG2GlobalsIndirect == true</test>
			<error>
				<message>Entry JBIG2Globals with type Stream in FilterJBIG2Decode is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_5" clause="1" testNumber="18811"/>
			<description>FilterLZWDecode shall not contain entries except BitsPerComponent, Colors, Columns, EarlyChange, Predictor</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'Colors' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'EarlyChange' &amp;&amp; elem != 'Predictor').length == 0</test>
			<error>
				<message>FilterLZWDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'Colors' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'EarlyChange' &amp;&amp; elem != 'Predictor').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18812"/>
			<description>Entry BitsPerComponent in FilterLZWDecode shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_5" clause="6" testNumber="18813"/>
			<description>Entry BitsPerComponent with type Integer in FilterLZWDecode shall have one of values: 1, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in FilterLZWDecode has incorrect value %2 instead of 1, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18814"/>
			<description>Entry Colors in FilterLZWDecode shall have type Integer</description>
			<test>containsColors == false || ColorsHasTypeInteger == true</test>
			<error>
				<message>Entry Colors in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_5" clause="14" testNumber="18815"/>
			<description>Entry Colors with type Integer in FilterLZWDecode shall satisfy possible value predicate: fn:Eval((@Colors &gt;= 1) &amp;&amp; fn:BeforeVersion(1.3 , fn:Eval(@Colors &lt;= 4)))</description>
			<test>ColorsHasTypeInteger != true || (ColorsIntegerValue &gt;= 1) &amp;&amp; true</test>
			<error>
				<message>Entry Colors with type Integer in FilterLZWDecode does not satisfy possible value predicate: fn:Eval((@Colors &gt;= 1) &amp;&amp; fn:BeforeVersion(1.3 , fn:Eval(@Colors &lt;= 4)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18816"/>
			<description>Entry Columns in FilterLZWDecode shall have type Integer</description>
			<test>containsColumns == false || ColumnsHasTypeInteger == true</test>
			<error>
				<message>Entry Columns in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18817"/>
			<description>Entry EarlyChange in FilterLZWDecode shall have type Integer</description>
			<test>containsEarlyChange == false || EarlyChangeHasTypeInteger == true</test>
			<error>
				<message>Entry EarlyChange in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_5" clause="6" testNumber="18818"/>
			<description>Entry EarlyChange with type Integer in FilterLZWDecode shall have one of values: 0, 1</description>
			<test>EarlyChangeHasTypeInteger != true || EarlyChangeIntegerValue == 0 || EarlyChangeIntegerValue == 1</test>
			<error>
				<message>Entry EarlyChange with type Integer in FilterLZWDecode has incorrect value %2 instead of 0, 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EarlyChangeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18819"/>
			<description>Entry Predictor in FilterLZWDecode shall have type Integer</description>
			<test>containsPredictor == false || PredictorHasTypeInteger == true</test>
			<error>
				<message>Entry Predictor in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_5" clause="6" testNumber="18820"/>
			<description>Entry Predictor with type Integer in FilterLZWDecode shall have one of values: 11, 1, 12, 2, 13, 14, 15, 10</description>
			<test>PredictorHasTypeInteger != true || PredictorIntegerValue == 1 || PredictorIntegerValue == 2 || PredictorIntegerValue == 10 || PredictorIntegerValue == 11 || PredictorIntegerValue == 12 || PredictorIntegerValue == 13 || PredictorIntegerValue == 14 || PredictorIntegerValue == 15</test>
			<error>
				<message>Entry Predictor with type Integer in FilterLZWDecode has incorrect value %2 instead of 11, 1, 12, 2, 13, 14, 15, 10</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PredictorIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_5" clause="1" testNumber="18872"/>
			<description>FloatingWindowParameters shall not contain entries except D, O, P, R, RT, T, TT, Type, UC</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TT' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UC').length == 0</test>
			<error>
				<message>FloatingWindowParameters contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TT' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UC').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_5" clause="17" testNumber="18873"/>
			<description>Entry D with type Array in FloatingWindowParameters shall be object ArrayOf_2Integers</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in FloatingWindowParameters is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18874"/>
			<description>Entry D in FloatingWindowParameters shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in FloatingWindowParameters is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_5" clause="7" testNumber="18875"/>
			<description>Entry D in FloatingWindowParameters is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in FloatingWindowParameters is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_5" clause="9" testNumber="18876"/>
			<description>Entry D with type Array in FloatingWindowParameters shall satisfy special case: fn:Eval((D::@0&gt;= 0) &amp;&amp; (D::@1&gt;= 0))</description>
			<test>DHasTypeArray != true || ((D0IntegerValue &gt;= 0) &amp;&amp; (D1IntegerValue &gt;= 0))</test>
			<error>
				<message>Entry D with type Array in FloatingWindowParameters does not satisfy special case: fn:Eval((D::@0&gt;= 0) &amp;&amp; (D::@1&gt;= 0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18877"/>
			<description>Entry O in FloatingWindowParameters shall have type Integer</description>
			<test>containsO == false || OHasTypeInteger == true</test>
			<error>
				<message>Entry O in FloatingWindowParameters is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_5" clause="6" testNumber="18878"/>
			<description>Entry O with type Integer in FloatingWindowParameters shall have one of values: 0, 1, 2</description>
			<test>OHasTypeInteger != true || OIntegerValue == 0 || OIntegerValue == 1 || OIntegerValue == 2</test>
			<error>
				<message>Entry O with type Integer in FloatingWindowParameters has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>OIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18879"/>
			<description>Entry P in FloatingWindowParameters shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in FloatingWindowParameters is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_5" clause="6" testNumber="18880"/>
			<description>Entry P with type Integer in FloatingWindowParameters shall have one of values: 0, 1, 2, 3, 4, 5, 6, 7, 8</description>
			<test>PHasTypeInteger != true || PIntegerValue == 0 || PIntegerValue == 1 || PIntegerValue == 2 || PIntegerValue == 3 || PIntegerValue == 4 || PIntegerValue == 5 || PIntegerValue == 6 || PIntegerValue == 7 || PIntegerValue == 8</test>
			<error>
				<message>Entry P with type Integer in FloatingWindowParameters has incorrect value %2 instead of 0, 1, 2, 3, 4, 5, 6, 7, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18881"/>
			<description>Entry R in FloatingWindowParameters shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in FloatingWindowParameters is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_5" clause="6" testNumber="18882"/>
			<description>Entry R with type Integer in FloatingWindowParameters shall have one of values: 0, 1, 2</description>
			<test>RHasTypeInteger != true || RIntegerValue == 0 || RIntegerValue == 1 || RIntegerValue == 2</test>
			<error>
				<message>Entry R with type Integer in FloatingWindowParameters has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18883"/>
			<description>Entry RT in FloatingWindowParameters shall have type Integer</description>
			<test>containsRT == false || RTHasTypeInteger == true</test>
			<error>
				<message>Entry RT in FloatingWindowParameters is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_5" clause="6" testNumber="18884"/>
			<description>Entry RT with type Integer in FloatingWindowParameters shall have one of values: 0, 1, 2, 3</description>
			<test>RTHasTypeInteger != true || RTIntegerValue == 0 || RTIntegerValue == 1 || RTIntegerValue == 2 || RTIntegerValue == 3</test>
			<error>
				<message>Entry RT with type Integer in FloatingWindowParameters has incorrect value %2 instead of 0, 1, 2, 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18885"/>
			<description>Entry T in FloatingWindowParameters shall have type Boolean</description>
			<test>containsT == false || THasTypeBoolean == true</test>
			<error>
				<message>Entry T in FloatingWindowParameters is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_5" clause="17" testNumber="18886"/>
			<description>Entry TT with type Array in FloatingWindowParameters shall be object ArrayOfStringsText</description>
			<test>TTHasTypeArray != true || TT_size == 1</test>
			<error>
				<message>Entry TT with type Array in FloatingWindowParameters is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18887"/>
			<description>Entry TT in FloatingWindowParameters shall have type Array</description>
			<test>containsTT == false || TTHasTypeArray == true</test>
			<error>
				<message>Entry TT in FloatingWindowParameters is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18888"/>
			<description>Entry Type in FloatingWindowParameters shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FloatingWindowParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_5" clause="6" testNumber="18889"/>
			<description>Entry Type with type Name in FloatingWindowParameters shall have value FWParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FWParams"</test>
			<error>
				<message>Entry Type with type Name in FloatingWindowParameters has incorrect value %2 instead of FWParams</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="18890"/>
			<description>Entry UC in FloatingWindowParameters shall have type Boolean</description>
			<test>containsUC == false || UCHasTypeBoolean == true</test>
			<error>
				<message>Entry UC in FloatingWindowParameters is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="1" testNumber="19038"/>
			<description>FontCIDType0 shall not contain entries except BaseFont, CIDSystemInfo, CIDToGIDMap, DW, DW2, FontDescriptor, Subtype, ToUnicode, Type, W, W2</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'CIDSystemInfo' &amp;&amp; elem != 'CIDToGIDMap' &amp;&amp; elem != 'DW' &amp;&amp; elem != 'DW2' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W' &amp;&amp; elem != 'W2').length == 0</test>
			<error>
				<message>FontCIDType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'CIDSystemInfo' &amp;&amp; elem != 'CIDToGIDMap' &amp;&amp; elem != 'DW' &amp;&amp; elem != 'DW2' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W' &amp;&amp; elem != 'W2').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19039"/>
			<description>Entry BaseFont in FontCIDType0 shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontCIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19040"/>
			<description>Entry BaseFont in FontCIDType0 is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19041"/>
			<description>Entry CIDSystemInfo with type Dictionary in FontCIDType0 shall be object CIDSystemInfo</description>
			<test>CIDSystemInfoHasTypeDictionary != true || CIDSystemInfo_size == 1</test>
			<error>
				<message>Entry CIDSystemInfo with type Dictionary in FontCIDType0 is not object CIDSystemInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19042"/>
			<description>Entry CIDSystemInfo in FontCIDType0 shall have type Dictionary</description>
			<test>containsCIDSystemInfo == false || CIDSystemInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry CIDSystemInfo in FontCIDType0 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19043"/>
			<description>Entry CIDSystemInfo in FontCIDType0 is required</description>
			<test>containsCIDSystemInfo == true</test>
			<error>
				<message>Entry CIDSystemInfo in FontCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19044"/>
			<description>Entry CIDToGIDMap with type Stream in FontCIDType0 shall be object Stream</description>
			<test>CIDToGIDMapHasTypeStream != true || CIDToGIDMap_size == 1</test>
			<error>
				<message>Entry CIDToGIDMap with type Stream in FontCIDType0 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19045"/>
			<description>Entry CIDToGIDMap in FontCIDType0 shall have one of types: Stream, Name</description>
			<test>containsCIDToGIDMap == false || CIDToGIDMapHasTypeStream == true || CIDToGIDMapHasTypeName == true</test>
			<error>
				<message>Entry CIDToGIDMap in FontCIDType0 is not one of types: Stream, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="10" testNumber="19046"/>
			<description>Entry CIDToGIDMap with type Stream in FontCIDType0 shall be indirect</description>
			<test>CIDToGIDMapHasTypeStream != true || isCIDToGIDMapIndirect == true</test>
			<error>
				<message>Entry CIDToGIDMap with type Stream in FontCIDType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="6" testNumber="19047"/>
			<description>Entry CIDToGIDMap with type Name in FontCIDType0 shall have value Identity</description>
			<test>CIDToGIDMapHasTypeName != true || CIDToGIDMapNameValue == "Identity"</test>
			<error>
				<message>Entry CIDToGIDMap with type Name in FontCIDType0 has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>CIDToGIDMapNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19048"/>
			<description>Entry DW in FontCIDType0 shall have type Number</description>
			<test>containsDW == false || DWHasTypeNumber == true</test>
			<error>
				<message>Entry DW in FontCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19049"/>
			<description>Entry DW2 with type Array in FontCIDType0 shall be object ArrayOf_2Numbers</description>
			<test>DW2HasTypeArray != true || DW2_size == 1</test>
			<error>
				<message>Entry DW2 with type Array in FontCIDType0 is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19050"/>
			<description>Entry DW2 in FontCIDType0 shall have type Array</description>
			<test>containsDW2 == false || DW2HasTypeArray == true</test>
			<error>
				<message>Entry DW2 in FontCIDType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19051"/>
			<description>Entry FontDescriptor with type Dictionary in FontCIDType0 shall be object FontDescriptorCIDType0</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontCIDType0 is not object FontDescriptorCIDType0</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19052"/>
			<description>Entry FontDescriptor in FontCIDType0 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontCIDType0 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19053"/>
			<description>Entry FontDescriptor in FontCIDType0 is required</description>
			<test>containsFontDescriptor == true</test>
			<error>
				<message>Entry FontDescriptor in FontCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="12" testNumber="19054"/>
			<description>If entry FontDescriptor with type Dictionary in FontCIDType0 satisfies condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || (isFontDescriptorIndirect == true || (true) == false)</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontCIDType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19055"/>
			<description>Entry Subtype in FontCIDType0 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontCIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19056"/>
			<description>Entry Subtype in FontCIDType0 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="6" testNumber="19057"/>
			<description>Entry Subtype with type Name in FontCIDType0 shall have value CIDFontType0</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "CIDFontType0"</test>
			<error>
				<message>Entry Subtype with type Name in FontCIDType0 has incorrect value %2 instead of CIDFontType0</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19058"/>
			<description>Entry ToUnicode with type Stream in FontCIDType0 shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontCIDType0 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19059"/>
			<description>Entry ToUnicode in FontCIDType0 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontCIDType0 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="10" testNumber="19060"/>
			<description>Entry ToUnicode with type Stream in FontCIDType0 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontCIDType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19061"/>
			<description>Entry Type in FontCIDType0 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontCIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19062"/>
			<description>Entry Type in FontCIDType0 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="6" testNumber="19063"/>
			<description>Entry Type with type Name in FontCIDType0 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontCIDType0 has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19064"/>
			<description>Entry W with type Array in FontCIDType0 shall be object ArrayOfCIDGlyphMetricsW</description>
			<test>WHasTypeArray != true || W_size == 1</test>
			<error>
				<message>Entry W with type Array in FontCIDType0 is not object ArrayOfCIDGlyphMetricsW</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19065"/>
			<description>Entry W in FontCIDType0 shall have type Array</description>
			<test>containsW == false || WHasTypeArray == true</test>
			<error>
				<message>Entry W in FontCIDType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19066"/>
			<description>Entry W2 with type Array in FontCIDType0 shall be object ArrayOfCIDGlyphMetricsW2</description>
			<test>W2HasTypeArray != true || W2_size == 1</test>
			<error>
				<message>Entry W2 with type Array in FontCIDType0 is not object ArrayOfCIDGlyphMetricsW2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19067"/>
			<description>Entry W2 in FontCIDType0 shall have type Array</description>
			<test>containsW2 == false || W2HasTypeArray == true</test>
			<error>
				<message>Entry W2 in FontCIDType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="1" testNumber="19251"/>
			<description>FontCIDType2 shall not contain entries except BaseFont, CIDSystemInfo, CIDToGIDMap, DW, DW2, FontDescriptor, Subtype, ToUnicode, Type, W, W2</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'CIDSystemInfo' &amp;&amp; elem != 'CIDToGIDMap' &amp;&amp; elem != 'DW' &amp;&amp; elem != 'DW2' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W' &amp;&amp; elem != 'W2').length == 0</test>
			<error>
				<message>FontCIDType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'CIDSystemInfo' &amp;&amp; elem != 'CIDToGIDMap' &amp;&amp; elem != 'DW' &amp;&amp; elem != 'DW2' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W' &amp;&amp; elem != 'W2').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19252"/>
			<description>Entry BaseFont in FontCIDType2 shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontCIDType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19253"/>
			<description>Entry BaseFont in FontCIDType2 is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19254"/>
			<description>Entry CIDSystemInfo with type Dictionary in FontCIDType2 shall be object CIDSystemInfo</description>
			<test>CIDSystemInfoHasTypeDictionary != true || CIDSystemInfo_size == 1</test>
			<error>
				<message>Entry CIDSystemInfo with type Dictionary in FontCIDType2 is not object CIDSystemInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19255"/>
			<description>Entry CIDSystemInfo in FontCIDType2 shall have type Dictionary</description>
			<test>containsCIDSystemInfo == false || CIDSystemInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry CIDSystemInfo in FontCIDType2 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19256"/>
			<description>Entry CIDSystemInfo in FontCIDType2 is required</description>
			<test>containsCIDSystemInfo == true</test>
			<error>
				<message>Entry CIDSystemInfo in FontCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19257"/>
			<description>Entry CIDToGIDMap with type Stream in FontCIDType2 shall be object Stream</description>
			<test>CIDToGIDMapHasTypeStream != true || CIDToGIDMap_size == 1</test>
			<error>
				<message>Entry CIDToGIDMap with type Stream in FontCIDType2 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19258"/>
			<description>Entry CIDToGIDMap in FontCIDType2 shall have one of types: Stream, Name</description>
			<test>containsCIDToGIDMap == false || CIDToGIDMapHasTypeStream == true || CIDToGIDMapHasTypeName == true</test>
			<error>
				<message>Entry CIDToGIDMap in FontCIDType2 is not one of types: Stream, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="11" testNumber="19259"/>
			<description>Entry CIDToGIDMap in FontCIDType2 is required, when fn:IsRequired(fn:SinceVersion(2.0) &amp;&amp; fn:IsPresent(FontDescriptor::FontFile2))</description>
			<test>(containsCIDToGIDMap == true || (false &amp;&amp; (containsFontDescriptorFontFile2 == true)) == false)</test>
			<error>
				<message>Entry CIDToGIDMap in FontCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="10" testNumber="19260"/>
			<description>Entry CIDToGIDMap with type Stream in FontCIDType2 shall be indirect</description>
			<test>CIDToGIDMapHasTypeStream != true || isCIDToGIDMapIndirect == true</test>
			<error>
				<message>Entry CIDToGIDMap with type Stream in FontCIDType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="6" testNumber="19261"/>
			<description>Entry CIDToGIDMap with type Name in FontCIDType2 shall have value Identity</description>
			<test>CIDToGIDMapHasTypeName != true || CIDToGIDMapNameValue == "Identity"</test>
			<error>
				<message>Entry CIDToGIDMap with type Name in FontCIDType2 has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>CIDToGIDMapNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19262"/>
			<description>Entry DW in FontCIDType2 shall have type Number</description>
			<test>containsDW == false || DWHasTypeNumber == true</test>
			<error>
				<message>Entry DW in FontCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19263"/>
			<description>Entry DW2 with type Array in FontCIDType2 shall be object ArrayOf_2Numbers</description>
			<test>DW2HasTypeArray != true || DW2_size == 1</test>
			<error>
				<message>Entry DW2 with type Array in FontCIDType2 is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19264"/>
			<description>Entry DW2 in FontCIDType2 shall have type Array</description>
			<test>containsDW2 == false || DW2HasTypeArray == true</test>
			<error>
				<message>Entry DW2 in FontCIDType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19265"/>
			<description>Entry FontDescriptor with type Dictionary in FontCIDType2 shall be object FontDescriptorCIDType2</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontCIDType2 is not object FontDescriptorCIDType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19266"/>
			<description>Entry FontDescriptor in FontCIDType2 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontCIDType2 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19267"/>
			<description>Entry FontDescriptor in FontCIDType2 is required</description>
			<test>containsFontDescriptor == true</test>
			<error>
				<message>Entry FontDescriptor in FontCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="12" testNumber="19268"/>
			<description>If entry FontDescriptor with type Dictionary in FontCIDType2 satisfies condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || (isFontDescriptorIndirect == true || (true) == false)</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontCIDType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19269"/>
			<description>Entry Subtype in FontCIDType2 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontCIDType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19270"/>
			<description>Entry Subtype in FontCIDType2 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="6" testNumber="19271"/>
			<description>Entry Subtype with type Name in FontCIDType2 shall have value CIDFontType2</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "CIDFontType2"</test>
			<error>
				<message>Entry Subtype with type Name in FontCIDType2 has incorrect value %2 instead of CIDFontType2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19272"/>
			<description>Entry ToUnicode with type Stream in FontCIDType2 shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontCIDType2 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19273"/>
			<description>Entry ToUnicode in FontCIDType2 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontCIDType2 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="10" testNumber="19274"/>
			<description>Entry ToUnicode with type Stream in FontCIDType2 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontCIDType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19275"/>
			<description>Entry Type in FontCIDType2 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontCIDType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19276"/>
			<description>Entry Type in FontCIDType2 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="6" testNumber="19277"/>
			<description>Entry Type with type Name in FontCIDType2 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontCIDType2 has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19278"/>
			<description>Entry W with type Array in FontCIDType2 shall be object ArrayOfCIDGlyphMetricsW</description>
			<test>WHasTypeArray != true || W_size == 1</test>
			<error>
				<message>Entry W with type Array in FontCIDType2 is not object ArrayOfCIDGlyphMetricsW</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19279"/>
			<description>Entry W in FontCIDType2 shall have type Array</description>
			<test>containsW == false || WHasTypeArray == true</test>
			<error>
				<message>Entry W in FontCIDType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19280"/>
			<description>Entry W2 with type Array in FontCIDType2 shall be object ArrayOfCIDGlyphMetricsW2</description>
			<test>W2HasTypeArray != true || W2_size == 1</test>
			<error>
				<message>Entry W2 with type Array in FontCIDType2 is not object ArrayOfCIDGlyphMetricsW2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19281"/>
			<description>Entry W2 in FontCIDType2 shall have type Array</description>
			<test>containsW2 == false || W2HasTypeArray == true</test>
			<error>
				<message>Entry W2 in FontCIDType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="1" testNumber="19504"/>
			<description>FontDescriptorCIDType0 shall not contain entries except Ascent, AvgWidth, CIDSet, CapHeight, Descent, FD, Flags, FontBBox, FontFamily, FontFile, FontFile3, FontName, FontStretch, FontWeight, ItalicAngle, Lang, Leading, MaxWidth, MissingWidth, StemH, StemV, Style, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CIDSet' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').length == 0</test>
			<error>
				<message>FontDescriptorCIDType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CIDSet' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19505"/>
			<description>Entry Ascent in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19506"/>
			<description>Entry Ascent in FontDescriptorCIDType0 is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19507"/>
			<description>Entry AvgWidth in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19508"/>
			<description>Entry CIDSet with type Stream in FontDescriptorCIDType0 shall be object Stream</description>
			<test>CIDSetHasTypeStream != true || CIDSet_size == 1</test>
			<error>
				<message>Entry CIDSet with type Stream in FontDescriptorCIDType0 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19509"/>
			<description>Entry CIDSet in FontDescriptorCIDType0 shall have type Stream</description>
			<test>containsCIDSet == false || CIDSetHasTypeStream == true</test>
			<error>
				<message>Entry CIDSet in FontDescriptorCIDType0 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="10" testNumber="19510"/>
			<description>Entry CIDSet with type Stream in FontDescriptorCIDType0 shall be indirect</description>
			<test>CIDSetHasTypeStream != true || isCIDSetIndirect == true</test>
			<error>
				<message>Entry CIDSet with type Stream in FontDescriptorCIDType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19511"/>
			<description>Entry CapHeight in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19512"/>
			<description>Entry Descent in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19513"/>
			<description>Entry Descent in FontDescriptorCIDType0 is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="14" testNumber="19514"/>
			<description>Entry Descent with type Number in FontDescriptorCIDType0 shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorCIDType0 does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19515"/>
			<description>Entry FD with type Dictionary in FontDescriptorCIDType0 shall be object FDDict</description>
			<test>FDHasTypeDictionary != true || FD_size == 1</test>
			<error>
				<message>Entry FD with type Dictionary in FontDescriptorCIDType0 is not object FDDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19516"/>
			<description>Entry FD in FontDescriptorCIDType0 shall have type Dictionary</description>
			<test>containsFD == false || FDHasTypeDictionary == true</test>
			<error>
				<message>Entry FD in FontDescriptorCIDType0 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19517"/>
			<description>Entry Flags in FontDescriptorCIDType0 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorCIDType0 is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19518"/>
			<description>Entry Flags in FontDescriptorCIDType0 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="19519"/>
			<description>Entry Flags with type Bitmask in FontDescriptorCIDType0 shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorCIDType0 does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19520"/>
			<description>Entry FontBBox in FontDescriptorCIDType0 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorCIDType0 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19521"/>
			<description>Entry FontBBox in FontDescriptorCIDType0 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19522"/>
			<description>Entry FontFamily in FontDescriptorCIDType0 shall have type String</description>
			<test>containsFontFamily == false || FontFamilyHasTypeString == true</test>
			<error>
				<message>Entry FontFamily in FontDescriptorCIDType0 is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19523"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType0 shall be object FontFile</description>
			<test>FontFileHasTypeStream != true || FontFile_size == 1</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType0 is not object FontFile</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19524"/>
			<description>Entry FontFile in FontDescriptorCIDType0 shall have type Stream</description>
			<test>containsFontFile == false || FontFileHasTypeStream == true</test>
			<error>
				<message>Entry FontFile in FontDescriptorCIDType0 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="10" testNumber="19525"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType0 shall be indirect</description>
			<test>FontFileHasTypeStream != true || isFontFileIndirect == true</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="19526"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType0 shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile3)))</description>
			<test>FontFileHasTypeStream != true || (((containsFontFile3 == true)) != true)</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType0 does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile3)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19527"/>
			<description>Entry FontFile3 with type Stream in FontDescriptorCIDType0 shall be object FontFile3CIDType0</description>
			<test>FontFile3HasTypeStream != true || FontFile3_size == 1</test>
			<error>
				<message>Entry FontFile3 with type Stream in FontDescriptorCIDType0 is not object FontFile3CIDType0</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19528"/>
			<description>Entry FontFile3 in FontDescriptorCIDType0 shall have type Stream</description>
			<test>containsFontFile3 == false || FontFile3HasTypeStream == true</test>
			<error>
				<message>Entry FontFile3 in FontDescriptorCIDType0 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="10" testNumber="19529"/>
			<description>Entry FontFile3 with type Stream in FontDescriptorCIDType0 shall be indirect</description>
			<test>FontFile3HasTypeStream != true || isFontFile3Indirect == true</test>
			<error>
				<message>Entry FontFile3 with type Stream in FontDescriptorCIDType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="19530"/>
			<description>Entry FontFile3 with type Stream in FontDescriptorCIDType0 shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)))</description>
			<test>FontFile3HasTypeStream != true || (((containsFontFile == true)) != true)</test>
			<error>
				<message>Entry FontFile3 with type Stream in FontDescriptorCIDType0 does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19531"/>
			<description>Entry FontName in FontDescriptorCIDType0 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorCIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19532"/>
			<description>Entry FontName in FontDescriptorCIDType0 is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="19533"/>
			<description>Entry FontName with type Name in FontDescriptorCIDType0 shall satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorCIDType0 does not satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19534"/>
			<description>Entry FontStretch in FontDescriptorCIDType0 shall have type Name</description>
			<test>containsFontStretch == false || FontStretchHasTypeName == true</test>
			<error>
				<message>Entry FontStretch in FontDescriptorCIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="6" testNumber="19535"/>
			<description>Entry FontStretch with type Name in FontDescriptorCIDType0 shall have one of values: ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</description>
			<test>FontStretchHasTypeName != true || FontStretchNameValue == "UltraCondensed" || FontStretchNameValue == "ExtraCondensed" || FontStretchNameValue == "Condensed" || FontStretchNameValue == "SemiCondensed" || FontStretchNameValue == "Normal" || FontStretchNameValue == "SemiExpanded" || FontStretchNameValue == "Expanded" || FontStretchNameValue == "ExtraExpanded" || FontStretchNameValue == "UltraExpanded"</test>
			<error>
				<message>Entry FontStretch with type Name in FontDescriptorCIDType0 has incorrect value %2 instead of ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontStretchNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19536"/>
			<description>Entry FontWeight in FontDescriptorCIDType0 shall have type Integer</description>
			<test>containsFontWeight == false || FontWeightHasTypeInteger == true</test>
			<error>
				<message>Entry FontWeight in FontDescriptorCIDType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="6" testNumber="19537"/>
			<description>Entry FontWeight with type Integer in FontDescriptorCIDType0 shall have one of values: 100, 200, 300, 400, 500, 600, 700, 800, 900</description>
			<test>FontWeightHasTypeInteger != true || FontWeightIntegerValue == 100 || FontWeightIntegerValue == 200 || FontWeightIntegerValue == 300 || FontWeightIntegerValue == 400 || FontWeightIntegerValue == 500 || FontWeightIntegerValue == 600 || FontWeightIntegerValue == 700 || FontWeightIntegerValue == 800 || FontWeightIntegerValue == 900</test>
			<error>
				<message>Entry FontWeight with type Integer in FontDescriptorCIDType0 has incorrect value %2 instead of 100, 200, 300, 400, 500, 600, 700, 800, 900</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontWeightIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19538"/>
			<description>Entry ItalicAngle in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19539"/>
			<description>Entry ItalicAngle in FontDescriptorCIDType0 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19540"/>
			<description>Entry Lang in FontDescriptorCIDType0 shall have type Name</description>
			<test>containsLang == false || LangHasTypeName == true</test>
			<error>
				<message>Entry Lang in FontDescriptorCIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19541"/>
			<description>Entry Leading in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19542"/>
			<description>Entry MaxWidth in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19543"/>
			<description>Entry MissingWidth in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19544"/>
			<description>Entry StemH in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19545"/>
			<description>Entry StemV in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19546"/>
			<description>Entry StemV in FontDescriptorCIDType0 is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19547"/>
			<description>Entry Style with type Dictionary in FontDescriptorCIDType0 shall be object StyleDict</description>
			<test>StyleHasTypeDictionary != true || Style_size == 1</test>
			<error>
				<message>Entry Style with type Dictionary in FontDescriptorCIDType0 is not object StyleDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19548"/>
			<description>Entry Style in FontDescriptorCIDType0 shall have type Dictionary</description>
			<test>containsStyle == false || StyleHasTypeDictionary == true</test>
			<error>
				<message>Entry Style in FontDescriptorCIDType0 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19549"/>
			<description>Entry Type in FontDescriptorCIDType0 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorCIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19550"/>
			<description>Entry Type in FontDescriptorCIDType0 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="6" testNumber="19551"/>
			<description>Entry Type with type Name in FontDescriptorCIDType0 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorCIDType0 has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19552"/>
			<description>Entry XHeight in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="1" testNumber="19829"/>
			<description>FontDescriptorCIDType2 shall not contain entries except Ascent, AvgWidth, CIDSet, CapHeight, Descent, FD, Flags, FontBBox, FontFamily, FontFile, FontFile2, FontName, FontStretch, FontWeight, ItalicAngle, Lang, Leading, MaxWidth, MissingWidth, StemH, StemV, Style, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CIDSet' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile2' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').length == 0</test>
			<error>
				<message>FontDescriptorCIDType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CIDSet' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile2' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19830"/>
			<description>Entry Ascent in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19831"/>
			<description>Entry Ascent in FontDescriptorCIDType2 is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19832"/>
			<description>Entry AvgWidth in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19833"/>
			<description>Entry CIDSet with type Stream in FontDescriptorCIDType2 shall be object Stream</description>
			<test>CIDSetHasTypeStream != true || CIDSet_size == 1</test>
			<error>
				<message>Entry CIDSet with type Stream in FontDescriptorCIDType2 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19834"/>
			<description>Entry CIDSet in FontDescriptorCIDType2 shall have type Stream</description>
			<test>containsCIDSet == false || CIDSetHasTypeStream == true</test>
			<error>
				<message>Entry CIDSet in FontDescriptorCIDType2 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="10" testNumber="19835"/>
			<description>Entry CIDSet with type Stream in FontDescriptorCIDType2 shall be indirect</description>
			<test>CIDSetHasTypeStream != true || isCIDSetIndirect == true</test>
			<error>
				<message>Entry CIDSet with type Stream in FontDescriptorCIDType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19836"/>
			<description>Entry CapHeight in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19837"/>
			<description>Entry Descent in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19838"/>
			<description>Entry Descent in FontDescriptorCIDType2 is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="14" testNumber="19839"/>
			<description>Entry Descent with type Number in FontDescriptorCIDType2 shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorCIDType2 does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19840"/>
			<description>Entry FD with type Dictionary in FontDescriptorCIDType2 shall be object FDDict</description>
			<test>FDHasTypeDictionary != true || FD_size == 1</test>
			<error>
				<message>Entry FD with type Dictionary in FontDescriptorCIDType2 is not object FDDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19841"/>
			<description>Entry FD in FontDescriptorCIDType2 shall have type Dictionary</description>
			<test>containsFD == false || FDHasTypeDictionary == true</test>
			<error>
				<message>Entry FD in FontDescriptorCIDType2 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19842"/>
			<description>Entry Flags in FontDescriptorCIDType2 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorCIDType2 is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19843"/>
			<description>Entry Flags in FontDescriptorCIDType2 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="9" testNumber="19844"/>
			<description>Entry Flags with type Bitmask in FontDescriptorCIDType2 shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorCIDType2 does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19845"/>
			<description>Entry FontBBox in FontDescriptorCIDType2 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorCIDType2 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19846"/>
			<description>Entry FontBBox in FontDescriptorCIDType2 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19847"/>
			<description>Entry FontFamily in FontDescriptorCIDType2 shall have type String</description>
			<test>containsFontFamily == false || FontFamilyHasTypeString == true</test>
			<error>
				<message>Entry FontFamily in FontDescriptorCIDType2 is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19848"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType2 shall be object FontFile</description>
			<test>FontFileHasTypeStream != true || FontFile_size == 1</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType2 is not object FontFile</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19849"/>
			<description>Entry FontFile in FontDescriptorCIDType2 shall have type Stream</description>
			<test>containsFontFile == false || FontFileHasTypeStream == true</test>
			<error>
				<message>Entry FontFile in FontDescriptorCIDType2 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="10" testNumber="19850"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType2 shall be indirect</description>
			<test>FontFileHasTypeStream != true || isFontFileIndirect == true</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="9" testNumber="19851"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType2 shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)))</description>
			<test>FontFileHasTypeStream != true || (((containsFontFile2 == true)) != true)</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType2 does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19852"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorCIDType2 shall be object FontFile2</description>
			<test>FontFile2HasTypeStream != true || FontFile2_size == 1</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorCIDType2 is not object FontFile2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19853"/>
			<description>Entry FontFile2 in FontDescriptorCIDType2 shall have type Stream</description>
			<test>containsFontFile2 == false || FontFile2HasTypeStream == true</test>
			<error>
				<message>Entry FontFile2 in FontDescriptorCIDType2 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="10" testNumber="19854"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorCIDType2 shall be indirect</description>
			<test>FontFile2HasTypeStream != true || isFontFile2Indirect == true</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorCIDType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="9" testNumber="19855"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorCIDType2 shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)))</description>
			<test>FontFile2HasTypeStream != true || (((containsFontFile == true)) != true)</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorCIDType2 does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19856"/>
			<description>Entry FontName in FontDescriptorCIDType2 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorCIDType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19857"/>
			<description>Entry FontName in FontDescriptorCIDType2 is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="9" testNumber="19858"/>
			<description>Entry FontName with type Name in FontDescriptorCIDType2 shall satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorCIDType2 does not satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19859"/>
			<description>Entry FontStretch in FontDescriptorCIDType2 shall have type Name</description>
			<test>containsFontStretch == false || FontStretchHasTypeName == true</test>
			<error>
				<message>Entry FontStretch in FontDescriptorCIDType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="6" testNumber="19860"/>
			<description>Entry FontStretch with type Name in FontDescriptorCIDType2 shall have one of values: ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</description>
			<test>FontStretchHasTypeName != true || FontStretchNameValue == "UltraCondensed" || FontStretchNameValue == "ExtraCondensed" || FontStretchNameValue == "Condensed" || FontStretchNameValue == "SemiCondensed" || FontStretchNameValue == "Normal" || FontStretchNameValue == "SemiExpanded" || FontStretchNameValue == "Expanded" || FontStretchNameValue == "ExtraExpanded" || FontStretchNameValue == "UltraExpanded"</test>
			<error>
				<message>Entry FontStretch with type Name in FontDescriptorCIDType2 has incorrect value %2 instead of ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontStretchNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19861"/>
			<description>Entry FontWeight in FontDescriptorCIDType2 shall have type Integer</description>
			<test>containsFontWeight == false || FontWeightHasTypeInteger == true</test>
			<error>
				<message>Entry FontWeight in FontDescriptorCIDType2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="6" testNumber="19862"/>
			<description>Entry FontWeight with type Integer in FontDescriptorCIDType2 shall have one of values: 100, 200, 300, 400, 500, 600, 700, 800, 900</description>
			<test>FontWeightHasTypeInteger != true || FontWeightIntegerValue == 100 || FontWeightIntegerValue == 200 || FontWeightIntegerValue == 300 || FontWeightIntegerValue == 400 || FontWeightIntegerValue == 500 || FontWeightIntegerValue == 600 || FontWeightIntegerValue == 700 || FontWeightIntegerValue == 800 || FontWeightIntegerValue == 900</test>
			<error>
				<message>Entry FontWeight with type Integer in FontDescriptorCIDType2 has incorrect value %2 instead of 100, 200, 300, 400, 500, 600, 700, 800, 900</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontWeightIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19863"/>
			<description>Entry ItalicAngle in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19864"/>
			<description>Entry ItalicAngle in FontDescriptorCIDType2 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19865"/>
			<description>Entry Lang in FontDescriptorCIDType2 shall have type Name</description>
			<test>containsLang == false || LangHasTypeName == true</test>
			<error>
				<message>Entry Lang in FontDescriptorCIDType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19866"/>
			<description>Entry Leading in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19867"/>
			<description>Entry MaxWidth in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19868"/>
			<description>Entry MissingWidth in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19869"/>
			<description>Entry StemH in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19870"/>
			<description>Entry StemV in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19871"/>
			<description>Entry StemV in FontDescriptorCIDType2 is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="19872"/>
			<description>Entry Style with type Dictionary in FontDescriptorCIDType2 shall be object StyleDict</description>
			<test>StyleHasTypeDictionary != true || Style_size == 1</test>
			<error>
				<message>Entry Style with type Dictionary in FontDescriptorCIDType2 is not object StyleDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19873"/>
			<description>Entry Style in FontDescriptorCIDType2 shall have type Dictionary</description>
			<test>containsStyle == false || StyleHasTypeDictionary == true</test>
			<error>
				<message>Entry Style in FontDescriptorCIDType2 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19874"/>
			<description>Entry Type in FontDescriptorCIDType2 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorCIDType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="19875"/>
			<description>Entry Type in FontDescriptorCIDType2 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="6" testNumber="19876"/>
			<description>Entry Type with type Name in FontDescriptorCIDType2 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorCIDType2 has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="19877"/>
			<description>Entry XHeight in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="1" testNumber="20193"/>
			<description>FontDescriptorTrueType shall not contain entries except Ascent, AvgWidth, CapHeight, Descent, Flags, FontBBox, FontFamily, FontFile, FontFile2, FontName, FontStretch, FontWeight, ItalicAngle, Leading, MaxWidth, MissingWidth, StemH, StemV, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile2' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').length == 0</test>
			<error>
				<message>FontDescriptorTrueType contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile2' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20194"/>
			<description>Entry Ascent in FontDescriptorTrueType shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="7" testNumber="20195"/>
			<description>Entry Ascent in FontDescriptorTrueType is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20196"/>
			<description>Entry AvgWidth in FontDescriptorTrueType shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20197"/>
			<description>Entry CapHeight in FontDescriptorTrueType shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20198"/>
			<description>Entry Descent in FontDescriptorTrueType shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="7" testNumber="20199"/>
			<description>Entry Descent in FontDescriptorTrueType is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="14" testNumber="20200"/>
			<description>Entry Descent with type Number in FontDescriptorTrueType shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorTrueType does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20201"/>
			<description>Entry Flags in FontDescriptorTrueType shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorTrueType is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="7" testNumber="20202"/>
			<description>Entry Flags in FontDescriptorTrueType is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="9" testNumber="20203"/>
			<description>Entry Flags with type Bitmask in FontDescriptorTrueType shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorTrueType does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20204"/>
			<description>Entry FontBBox in FontDescriptorTrueType shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorTrueType is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="7" testNumber="20205"/>
			<description>Entry FontBBox in FontDescriptorTrueType is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20206"/>
			<description>Entry FontFamily in FontDescriptorTrueType shall have type StringByte</description>
			<test>containsFontFamily == false || FontFamilyHasTypeStringByte == true</test>
			<error>
				<message>Entry FontFamily in FontDescriptorTrueType is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="17" testNumber="20207"/>
			<description>Entry FontFile with type Stream in FontDescriptorTrueType shall be object FontFileType1</description>
			<test>FontFileHasTypeStream != true || FontFile_size == 1</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorTrueType is not object FontFileType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20208"/>
			<description>Entry FontFile in FontDescriptorTrueType shall have type Stream</description>
			<test>containsFontFile == false || FontFileHasTypeStream == true</test>
			<error>
				<message>Entry FontFile in FontDescriptorTrueType is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="10" testNumber="20209"/>
			<description>Entry FontFile with type Stream in FontDescriptorTrueType shall be indirect</description>
			<test>FontFileHasTypeStream != true || isFontFileIndirect == true</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorTrueType is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="9" testNumber="20210"/>
			<description>Entry FontFile with type Stream in FontDescriptorTrueType shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)))</description>
			<test>FontFileHasTypeStream != true || (((containsFontFile2 == true)) != true)</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorTrueType does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="17" testNumber="20211"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorTrueType shall be object FontFile2</description>
			<test>FontFile2HasTypeStream != true || FontFile2_size == 1</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorTrueType is not object FontFile2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20212"/>
			<description>Entry FontFile2 in FontDescriptorTrueType shall have type Stream</description>
			<test>containsFontFile2 == false || FontFile2HasTypeStream == true</test>
			<error>
				<message>Entry FontFile2 in FontDescriptorTrueType is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="10" testNumber="20213"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorTrueType shall be indirect</description>
			<test>FontFile2HasTypeStream != true || isFontFile2Indirect == true</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorTrueType is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="9" testNumber="20214"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorTrueType shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)))</description>
			<test>FontFile2HasTypeStream != true || (((containsFontFile == true)) != true)</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorTrueType does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20215"/>
			<description>Entry FontName in FontDescriptorTrueType shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="7" testNumber="20216"/>
			<description>Entry FontName in FontDescriptorTrueType is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="9" testNumber="20217"/>
			<description>Entry FontName with type Name in FontDescriptorTrueType shall satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorTrueType does not satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20218"/>
			<description>Entry FontStretch in FontDescriptorTrueType shall have type Name</description>
			<test>containsFontStretch == false || FontStretchHasTypeName == true</test>
			<error>
				<message>Entry FontStretch in FontDescriptorTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="6" testNumber="20219"/>
			<description>Entry FontStretch with type Name in FontDescriptorTrueType shall have one of values: ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</description>
			<test>FontStretchHasTypeName != true || FontStretchNameValue == "UltraCondensed" || FontStretchNameValue == "ExtraCondensed" || FontStretchNameValue == "Condensed" || FontStretchNameValue == "SemiCondensed" || FontStretchNameValue == "Normal" || FontStretchNameValue == "SemiExpanded" || FontStretchNameValue == "Expanded" || FontStretchNameValue == "ExtraExpanded" || FontStretchNameValue == "UltraExpanded"</test>
			<error>
				<message>Entry FontStretch with type Name in FontDescriptorTrueType has incorrect value %2 instead of ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontStretchNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20220"/>
			<description>Entry FontWeight in FontDescriptorTrueType shall have type Integer</description>
			<test>containsFontWeight == false || FontWeightHasTypeInteger == true</test>
			<error>
				<message>Entry FontWeight in FontDescriptorTrueType is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="6" testNumber="20221"/>
			<description>Entry FontWeight with type Integer in FontDescriptorTrueType shall have one of values: 100, 200, 300, 400, 500, 600, 700, 800, 900</description>
			<test>FontWeightHasTypeInteger != true || FontWeightIntegerValue == 100 || FontWeightIntegerValue == 200 || FontWeightIntegerValue == 300 || FontWeightIntegerValue == 400 || FontWeightIntegerValue == 500 || FontWeightIntegerValue == 600 || FontWeightIntegerValue == 700 || FontWeightIntegerValue == 800 || FontWeightIntegerValue == 900</test>
			<error>
				<message>Entry FontWeight with type Integer in FontDescriptorTrueType has incorrect value %2 instead of 100, 200, 300, 400, 500, 600, 700, 800, 900</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontWeightIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20222"/>
			<description>Entry ItalicAngle in FontDescriptorTrueType shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="7" testNumber="20223"/>
			<description>Entry ItalicAngle in FontDescriptorTrueType is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20224"/>
			<description>Entry Leading in FontDescriptorTrueType shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20225"/>
			<description>Entry MaxWidth in FontDescriptorTrueType shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20226"/>
			<description>Entry MissingWidth in FontDescriptorTrueType shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20227"/>
			<description>Entry StemH in FontDescriptorTrueType shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20228"/>
			<description>Entry StemV in FontDescriptorTrueType shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="7" testNumber="20229"/>
			<description>Entry StemV in FontDescriptorTrueType is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20230"/>
			<description>Entry Type in FontDescriptorTrueType shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="7" testNumber="20231"/>
			<description>Entry Type in FontDescriptorTrueType is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="6" testNumber="20232"/>
			<description>Entry Type with type Name in FontDescriptorTrueType shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorTrueType has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20233"/>
			<description>Entry XHeight in FontDescriptorTrueType shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="1" testNumber="20525"/>
			<description>FontDescriptorType1 shall not contain entries except Ascent, AvgWidth, CapHeight, CharSet, Descent, Flags, FontBBox, FontFamily, FontFile, FontFile3, FontName, FontStretch, FontWeight, ItalicAngle, Leading, MaxWidth, MissingWidth, StemH, StemV, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').length == 0</test>
			<error>
				<message>FontDescriptorType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20526"/>
			<description>Entry Ascent in FontDescriptorType1 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="20527"/>
			<description>Entry Ascent in FontDescriptorType1 is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20528"/>
			<description>Entry AvgWidth in FontDescriptorType1 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20529"/>
			<description>Entry CapHeight in FontDescriptorType1 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20530"/>
			<description>Entry CharSet in FontDescriptorType1 shall have one of types: StringAscii, StringByte</description>
			<test>containsCharSet == false || CharSetHasTypeStringAscii == true || CharSetHasTypeStringByte == true</test>
			<error>
				<message>Entry CharSet in FontDescriptorType1 is not one of types: StringAscii, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20531"/>
			<description>Entry Descent in FontDescriptorType1 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="20532"/>
			<description>Entry Descent in FontDescriptorType1 is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="14" testNumber="20533"/>
			<description>Entry Descent with type Number in FontDescriptorType1 shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorType1 does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20534"/>
			<description>Entry Flags in FontDescriptorType1 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType1 is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="20535"/>
			<description>Entry Flags in FontDescriptorType1 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="20536"/>
			<description>Entry Flags with type Bitmask in FontDescriptorType1 shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorType1 does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20537"/>
			<description>Entry FontBBox in FontDescriptorType1 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorType1 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="20538"/>
			<description>Entry FontBBox in FontDescriptorType1 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20539"/>
			<description>Entry FontFamily in FontDescriptorType1 shall have type StringByte</description>
			<test>containsFontFamily == false || FontFamilyHasTypeStringByte == true</test>
			<error>
				<message>Entry FontFamily in FontDescriptorType1 is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="20540"/>
			<description>Entry FontFile with type Stream in FontDescriptorType1 shall be object FontFileType1</description>
			<test>FontFileHasTypeStream != true || FontFile_size == 1</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorType1 is not object FontFileType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20541"/>
			<description>Entry FontFile in FontDescriptorType1 shall have type Stream</description>
			<test>containsFontFile == false || FontFileHasTypeStream == true</test>
			<error>
				<message>Entry FontFile in FontDescriptorType1 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="10" testNumber="20542"/>
			<description>Entry FontFile with type Stream in FontDescriptorType1 shall be indirect</description>
			<test>FontFileHasTypeStream != true || isFontFileIndirect == true</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="20543"/>
			<description>Entry FontFile3 with type Stream in FontDescriptorType1 shall be object FontFile3Type1</description>
			<test>FontFile3HasTypeStream != true || FontFile3_size == 1</test>
			<error>
				<message>Entry FontFile3 with type Stream in FontDescriptorType1 is not object FontFile3Type1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20544"/>
			<description>Entry FontFile3 in FontDescriptorType1 shall have type Stream</description>
			<test>containsFontFile3 == false || FontFile3HasTypeStream == true</test>
			<error>
				<message>Entry FontFile3 in FontDescriptorType1 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="10" testNumber="20545"/>
			<description>Entry FontFile3 with type Stream in FontDescriptorType1 shall be indirect</description>
			<test>FontFile3HasTypeStream != true || isFontFile3Indirect == true</test>
			<error>
				<message>Entry FontFile3 with type Stream in FontDescriptorType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20546"/>
			<description>Entry FontName in FontDescriptorType1 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="20547"/>
			<description>Entry FontName in FontDescriptorType1 is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="20548"/>
			<description>Entry FontName with type Name in FontDescriptorType1 shall satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorType1 does not satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20549"/>
			<description>Entry FontStretch in FontDescriptorType1 shall have type Name</description>
			<test>containsFontStretch == false || FontStretchHasTypeName == true</test>
			<error>
				<message>Entry FontStretch in FontDescriptorType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="20550"/>
			<description>Entry FontStretch with type Name in FontDescriptorType1 shall have one of values: ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</description>
			<test>FontStretchHasTypeName != true || FontStretchNameValue == "UltraCondensed" || FontStretchNameValue == "ExtraCondensed" || FontStretchNameValue == "Condensed" || FontStretchNameValue == "SemiCondensed" || FontStretchNameValue == "Normal" || FontStretchNameValue == "SemiExpanded" || FontStretchNameValue == "Expanded" || FontStretchNameValue == "ExtraExpanded" || FontStretchNameValue == "UltraExpanded"</test>
			<error>
				<message>Entry FontStretch with type Name in FontDescriptorType1 has incorrect value %2 instead of ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontStretchNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20551"/>
			<description>Entry FontWeight in FontDescriptorType1 shall have type Integer</description>
			<test>containsFontWeight == false || FontWeightHasTypeInteger == true</test>
			<error>
				<message>Entry FontWeight in FontDescriptorType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="20552"/>
			<description>Entry FontWeight with type Integer in FontDescriptorType1 shall have one of values: 100, 200, 300, 400, 500, 600, 700, 800, 900</description>
			<test>FontWeightHasTypeInteger != true || FontWeightIntegerValue == 100 || FontWeightIntegerValue == 200 || FontWeightIntegerValue == 300 || FontWeightIntegerValue == 400 || FontWeightIntegerValue == 500 || FontWeightIntegerValue == 600 || FontWeightIntegerValue == 700 || FontWeightIntegerValue == 800 || FontWeightIntegerValue == 900</test>
			<error>
				<message>Entry FontWeight with type Integer in FontDescriptorType1 has incorrect value %2 instead of 100, 200, 300, 400, 500, 600, 700, 800, 900</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontWeightIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20553"/>
			<description>Entry ItalicAngle in FontDescriptorType1 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="20554"/>
			<description>Entry ItalicAngle in FontDescriptorType1 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20555"/>
			<description>Entry Leading in FontDescriptorType1 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20556"/>
			<description>Entry MaxWidth in FontDescriptorType1 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20557"/>
			<description>Entry MissingWidth in FontDescriptorType1 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20558"/>
			<description>Entry StemH in FontDescriptorType1 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20559"/>
			<description>Entry StemV in FontDescriptorType1 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="20560"/>
			<description>Entry StemV in FontDescriptorType1 is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20561"/>
			<description>Entry Type in FontDescriptorType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="20562"/>
			<description>Entry Type in FontDescriptorType1 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="20563"/>
			<description>Entry Type with type Name in FontDescriptorType1 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorType1 has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20564"/>
			<description>Entry XHeight in FontDescriptorType1 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="1" testNumber="20800"/>
			<description>FontDescriptorType3 shall not contain entries except Ascent, AvgWidth, CapHeight, Descent, Flags, FontBBox, FontFamily, FontName, FontStretch, FontWeight, ItalicAngle, Leading, MaxWidth, MissingWidth, StemH, StemV, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').length == 0</test>
			<error>
				<message>FontDescriptorType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20801"/>
			<description>Entry Ascent in FontDescriptorType3 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20802"/>
			<description>Entry AvgWidth in FontDescriptorType3 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20803"/>
			<description>Entry CapHeight in FontDescriptorType3 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20804"/>
			<description>Entry Descent in FontDescriptorType3 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="14" testNumber="20805"/>
			<description>Entry Descent with type Number in FontDescriptorType3 shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorType3 does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20806"/>
			<description>Entry Flags in FontDescriptorType3 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType3 is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="20807"/>
			<description>Entry Flags in FontDescriptorType3 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="9" testNumber="20808"/>
			<description>Entry Flags with type Bitmask in FontDescriptorType3 shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorType3 does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20809"/>
			<description>Entry FontBBox in FontDescriptorType3 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorType3 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20810"/>
			<description>Entry FontFamily in FontDescriptorType3 shall have type StringByte</description>
			<test>containsFontFamily == false || FontFamilyHasTypeStringByte == true</test>
			<error>
				<message>Entry FontFamily in FontDescriptorType3 is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20811"/>
			<description>Entry FontName in FontDescriptorType3 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="9" testNumber="20812"/>
			<description>Entry FontName with type Name in FontDescriptorType3 shall satisfy special case: fn:Eval(@FontName == parent::@Name)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentNameNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorType3 does not satisfy special case: fn:Eval(@FontName == parent::@Name)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20813"/>
			<description>Entry FontStretch in FontDescriptorType3 shall have type Name</description>
			<test>containsFontStretch == false || FontStretchHasTypeName == true</test>
			<error>
				<message>Entry FontStretch in FontDescriptorType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="6" testNumber="20814"/>
			<description>Entry FontStretch with type Name in FontDescriptorType3 shall have one of values: ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</description>
			<test>FontStretchHasTypeName != true || FontStretchNameValue == "UltraCondensed" || FontStretchNameValue == "ExtraCondensed" || FontStretchNameValue == "Condensed" || FontStretchNameValue == "SemiCondensed" || FontStretchNameValue == "Normal" || FontStretchNameValue == "SemiExpanded" || FontStretchNameValue == "Expanded" || FontStretchNameValue == "ExtraExpanded" || FontStretchNameValue == "UltraExpanded"</test>
			<error>
				<message>Entry FontStretch with type Name in FontDescriptorType3 has incorrect value %2 instead of ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontStretchNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20815"/>
			<description>Entry FontWeight in FontDescriptorType3 shall have type Integer</description>
			<test>containsFontWeight == false || FontWeightHasTypeInteger == true</test>
			<error>
				<message>Entry FontWeight in FontDescriptorType3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="6" testNumber="20816"/>
			<description>Entry FontWeight with type Integer in FontDescriptorType3 shall have one of values: 100, 200, 300, 400, 500, 600, 700, 800, 900</description>
			<test>FontWeightHasTypeInteger != true || FontWeightIntegerValue == 100 || FontWeightIntegerValue == 200 || FontWeightIntegerValue == 300 || FontWeightIntegerValue == 400 || FontWeightIntegerValue == 500 || FontWeightIntegerValue == 600 || FontWeightIntegerValue == 700 || FontWeightIntegerValue == 800 || FontWeightIntegerValue == 900</test>
			<error>
				<message>Entry FontWeight with type Integer in FontDescriptorType3 has incorrect value %2 instead of 100, 200, 300, 400, 500, 600, 700, 800, 900</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontWeightIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20817"/>
			<description>Entry ItalicAngle in FontDescriptorType3 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="20818"/>
			<description>Entry ItalicAngle in FontDescriptorType3 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20819"/>
			<description>Entry Leading in FontDescriptorType3 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20820"/>
			<description>Entry MaxWidth in FontDescriptorType3 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20821"/>
			<description>Entry MissingWidth in FontDescriptorType3 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20822"/>
			<description>Entry StemH in FontDescriptorType3 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20823"/>
			<description>Entry StemV in FontDescriptorType3 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20824"/>
			<description>Entry Type in FontDescriptorType3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="20825"/>
			<description>Entry Type in FontDescriptorType3 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="6" testNumber="20826"/>
			<description>Entry Type with type Name in FontDescriptorType3 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorType3 has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20827"/>
			<description>Entry XHeight in FontDescriptorType3 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="1" testNumber="20979"/>
			<description>FontFile shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Length1, Length2, Length3, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>FontFile contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20980"/>
			<description>Entry DL in FontFile shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FontFile is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="9" testNumber="20981"/>
			<description>Entry DL with type Integer in FontFile shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FontFile does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="17" testNumber="20982"/>
			<description>Entry DecodeParms with type Array in FontFile shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="17" testNumber="20983"/>
			<description>Entry DecodeParms with type Dictionary in FontFile shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFile is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20984"/>
			<description>Entry DecodeParms in FontFile shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFile is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="9" testNumber="20985"/>
			<description>Entry DecodeParms with type Array in FontFile shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="17" testNumber="20986"/>
			<description>Entry F with type Dictionary in FontFile shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FontFile is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20987"/>
			<description>Entry F in FontFile shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in FontFile is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="17" testNumber="20988"/>
			<description>Entry FDecodeParms with type Array in FontFile shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="17" testNumber="20989"/>
			<description>Entry FDecodeParms with type Dictionary in FontFile shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFile is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20990"/>
			<description>Entry FDecodeParms in FontFile shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFile is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="9" testNumber="20991"/>
			<description>Entry FDecodeParms with type Array in FontFile shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="17" testNumber="20992"/>
			<description>Entry FFilter with type Array in FontFile shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FontFile is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20993"/>
			<description>Entry FFilter in FontFile shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FontFile is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="9" testNumber="20994"/>
			<description>Entry FFilter with type Array in FontFile shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFile does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="6" testNumber="20995"/>
			<description>Entry FFilter with type Name in FontFile shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FontFile has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="17" testNumber="20996"/>
			<description>Entry Filter with type Array in FontFile shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FontFile is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="8" testNumber="20997"/>
			<description>Entry Filter in FontFile shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FontFile is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="9" testNumber="20998"/>
			<description>Entry Filter with type Array in FontFile shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFile does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="6" testNumber="20999"/>
			<description>Entry Filter with type Name in FontFile shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FontFile has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21000"/>
			<description>Entry Length in FontFile shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFile is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="7" testNumber="21001"/>
			<description>Entry Length in FontFile is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFile is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21002"/>
			<description>Entry Length1 in FontFile shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFile is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21003"/>
			<description>Entry Length1 with type Integer in FontFile shall satisfy special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFile does not satisfy special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21004"/>
			<description>Entry Length2 in FontFile shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFile is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21005"/>
			<description>Entry Length2 with type Integer in FontFile shall satisfy special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFile does not satisfy special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21006"/>
			<description>Entry Length3 in FontFile shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFile is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21007"/>
			<description>Entry Length3 with type Integer in FontFile shall satisfy special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFile does not satisfy special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21008"/>
			<description>Entry Subtype in FontFile shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFile is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_5" clause="6" testNumber="21009"/>
			<description>Entry Subtype with type Name in FontFile shall have one of values: OpenType, CIDFontType0C, Type1C</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type1C" || SubtypeNameValue == "CIDFontType0C" || SubtypeNameValue == "OpenType"</test>
			<error>
				<message>Entry Subtype with type Name in FontFile has incorrect value %2 instead of OpenType, CIDFontType0C, Type1C</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="1" testNumber="21190"/>
			<description>FontFile2 shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Length1, Length2, Length3, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>FontFile2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21191"/>
			<description>Entry DL in FontFile2 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FontFile2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21192"/>
			<description>Entry DL with type Integer in FontFile2 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FontFile2 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21193"/>
			<description>Entry DecodeParms with type Array in FontFile2 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile2 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21194"/>
			<description>Entry DecodeParms with type Dictionary in FontFile2 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFile2 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21195"/>
			<description>Entry DecodeParms in FontFile2 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFile2 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21196"/>
			<description>Entry DecodeParms with type Array in FontFile2 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile2 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21197"/>
			<description>Entry F with type Dictionary in FontFile2 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FontFile2 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21198"/>
			<description>Entry F in FontFile2 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in FontFile2 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21199"/>
			<description>Entry FDecodeParms with type Array in FontFile2 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile2 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21200"/>
			<description>Entry FDecodeParms with type Dictionary in FontFile2 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFile2 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21201"/>
			<description>Entry FDecodeParms in FontFile2 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFile2 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21202"/>
			<description>Entry FDecodeParms with type Array in FontFile2 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile2 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21203"/>
			<description>Entry FFilter with type Array in FontFile2 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FontFile2 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21204"/>
			<description>Entry FFilter in FontFile2 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FontFile2 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21205"/>
			<description>Entry FFilter with type Array in FontFile2 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFile2 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="6" testNumber="21206"/>
			<description>Entry FFilter with type Name in FontFile2 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FontFile2 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21207"/>
			<description>Entry Filter with type Array in FontFile2 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FontFile2 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21208"/>
			<description>Entry Filter in FontFile2 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FontFile2 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21209"/>
			<description>Entry Filter with type Array in FontFile2 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFile2 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="6" testNumber="21210"/>
			<description>Entry Filter with type Name in FontFile2 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FontFile2 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21211"/>
			<description>Entry Length in FontFile2 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFile2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="21212"/>
			<description>Entry Length in FontFile2 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFile2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21213"/>
			<description>Entry Length1 in FontFile2 shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFile2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="11" testNumber="21214"/>
			<description>Entry Length1 in FontFile2 is required, when fn:IsRequired(parent::parent::@Subtype== TrueType)</description>
			<test>(containsLength1 == true || (parentparentSubtypeNameValue == "TrueType") == false)</test>
			<error>
				<message>Entry Length1 in FontFile2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21215"/>
			<description>Entry Length1 with type Integer in FontFile2 shall satisfy special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFile2 does not satisfy special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21216"/>
			<description>Entry Length2 in FontFile2 shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFile2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21217"/>
			<description>Entry Length2 with type Integer in FontFile2 shall satisfy special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFile2 does not satisfy special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21218"/>
			<description>Entry Length3 in FontFile2 shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFile2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21219"/>
			<description>Entry Length3 with type Integer in FontFile2 shall satisfy special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFile2 does not satisfy special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21220"/>
			<description>Entry Subtype in FontFile2 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFile2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="1" testNumber="21401"/>
			<description>FontFile3CIDType0 shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Length1, Length2, Length3, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>FontFile3CIDType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21402"/>
			<description>Entry DL in FontFile3CIDType0 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FontFile3CIDType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21403"/>
			<description>Entry DL with type Integer in FontFile3CIDType0 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FontFile3CIDType0 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21404"/>
			<description>Entry DecodeParms with type Array in FontFile3CIDType0 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile3CIDType0 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21405"/>
			<description>Entry DecodeParms with type Dictionary in FontFile3CIDType0 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFile3CIDType0 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21406"/>
			<description>Entry DecodeParms in FontFile3CIDType0 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFile3CIDType0 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21407"/>
			<description>Entry DecodeParms with type Array in FontFile3CIDType0 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile3CIDType0 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21408"/>
			<description>Entry F with type Dictionary in FontFile3CIDType0 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FontFile3CIDType0 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21409"/>
			<description>Entry F in FontFile3CIDType0 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in FontFile3CIDType0 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21410"/>
			<description>Entry FDecodeParms with type Array in FontFile3CIDType0 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile3CIDType0 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21411"/>
			<description>Entry FDecodeParms with type Dictionary in FontFile3CIDType0 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFile3CIDType0 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21412"/>
			<description>Entry FDecodeParms in FontFile3CIDType0 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFile3CIDType0 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21413"/>
			<description>Entry FDecodeParms with type Array in FontFile3CIDType0 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile3CIDType0 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21414"/>
			<description>Entry FFilter with type Array in FontFile3CIDType0 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FontFile3CIDType0 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21415"/>
			<description>Entry FFilter in FontFile3CIDType0 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FontFile3CIDType0 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21416"/>
			<description>Entry FFilter with type Array in FontFile3CIDType0 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFile3CIDType0 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="6" testNumber="21417"/>
			<description>Entry FFilter with type Name in FontFile3CIDType0 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FontFile3CIDType0 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21418"/>
			<description>Entry Filter with type Array in FontFile3CIDType0 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FontFile3CIDType0 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21419"/>
			<description>Entry Filter in FontFile3CIDType0 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FontFile3CIDType0 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21420"/>
			<description>Entry Filter with type Array in FontFile3CIDType0 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFile3CIDType0 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="6" testNumber="21421"/>
			<description>Entry Filter with type Name in FontFile3CIDType0 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FontFile3CIDType0 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21422"/>
			<description>Entry Length in FontFile3CIDType0 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFile3CIDType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="21423"/>
			<description>Entry Length in FontFile3CIDType0 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFile3CIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21424"/>
			<description>Entry Length1 in FontFile3CIDType0 shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFile3CIDType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21425"/>
			<description>Entry Length1 with type Integer in FontFile3CIDType0 shall satisfy special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFile3CIDType0 does not satisfy special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21426"/>
			<description>Entry Length2 in FontFile3CIDType0 shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFile3CIDType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21427"/>
			<description>Entry Length2 with type Integer in FontFile3CIDType0 shall satisfy special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFile3CIDType0 does not satisfy special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21428"/>
			<description>Entry Length3 in FontFile3CIDType0 shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFile3CIDType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21429"/>
			<description>Entry Length3 with type Integer in FontFile3CIDType0 shall satisfy special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFile3CIDType0 does not satisfy special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21430"/>
			<description>Entry Subtype in FontFile3CIDType0 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFile3CIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_5" clause="6" testNumber="21431"/>
			<description>Entry Subtype with type Name in FontFile3CIDType0 shall have value CIDFontType0C</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "CIDFontType0C"</test>
			<error>
				<message>Entry Subtype with type Name in FontFile3CIDType0 has incorrect value %2 instead of CIDFontType0C</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="1" testNumber="21595"/>
			<description>FontFile3Type1 shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Length1, Length2, Length3, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>FontFile3Type1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21596"/>
			<description>Entry DL in FontFile3Type1 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FontFile3Type1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21597"/>
			<description>Entry DL with type Integer in FontFile3Type1 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FontFile3Type1 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21598"/>
			<description>Entry DecodeParms with type Array in FontFile3Type1 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile3Type1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21599"/>
			<description>Entry DecodeParms with type Dictionary in FontFile3Type1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFile3Type1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21600"/>
			<description>Entry DecodeParms in FontFile3Type1 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFile3Type1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21601"/>
			<description>Entry DecodeParms with type Array in FontFile3Type1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile3Type1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21602"/>
			<description>Entry F with type Dictionary in FontFile3Type1 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FontFile3Type1 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21603"/>
			<description>Entry F in FontFile3Type1 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in FontFile3Type1 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21604"/>
			<description>Entry FDecodeParms with type Array in FontFile3Type1 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile3Type1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21605"/>
			<description>Entry FDecodeParms with type Dictionary in FontFile3Type1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFile3Type1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21606"/>
			<description>Entry FDecodeParms in FontFile3Type1 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFile3Type1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21607"/>
			<description>Entry FDecodeParms with type Array in FontFile3Type1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile3Type1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21608"/>
			<description>Entry FFilter with type Array in FontFile3Type1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FontFile3Type1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21609"/>
			<description>Entry FFilter in FontFile3Type1 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FontFile3Type1 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21610"/>
			<description>Entry FFilter with type Array in FontFile3Type1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFile3Type1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="21611"/>
			<description>Entry FFilter with type Name in FontFile3Type1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FontFile3Type1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21612"/>
			<description>Entry Filter with type Array in FontFile3Type1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FontFile3Type1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21613"/>
			<description>Entry Filter in FontFile3Type1 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FontFile3Type1 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21614"/>
			<description>Entry Filter with type Array in FontFile3Type1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFile3Type1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="21615"/>
			<description>Entry Filter with type Name in FontFile3Type1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FontFile3Type1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21616"/>
			<description>Entry Length in FontFile3Type1 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFile3Type1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="21617"/>
			<description>Entry Length in FontFile3Type1 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFile3Type1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21618"/>
			<description>Entry Length1 in FontFile3Type1 shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFile3Type1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21619"/>
			<description>Entry Length1 with type Integer in FontFile3Type1 shall satisfy special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFile3Type1 does not satisfy special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21620"/>
			<description>Entry Length2 in FontFile3Type1 shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFile3Type1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21621"/>
			<description>Entry Length2 with type Integer in FontFile3Type1 shall satisfy special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFile3Type1 does not satisfy special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21622"/>
			<description>Entry Length3 in FontFile3Type1 shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFile3Type1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21623"/>
			<description>Entry Length3 with type Integer in FontFile3Type1 shall satisfy special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFile3Type1 does not satisfy special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21624"/>
			<description>Entry Subtype in FontFile3Type1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFile3Type1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="21625"/>
			<description>Entry Subtype in FontFile3Type1 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontFile3Type1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="21626"/>
			<description>Entry Subtype with type Name in FontFile3Type1 shall have one of values: OpenType, CIDFontType0C, Type1C</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type1C" || SubtypeNameValue == "CIDFontType0C" || SubtypeNameValue == "OpenType"</test>
			<error>
				<message>Entry Subtype with type Name in FontFile3Type1 has incorrect value %2 instead of OpenType, CIDFontType0C, Type1C</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="1" testNumber="21818"/>
			<description>FontFileType1 shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Length1, Length2, Length3, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>FontFileType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21819"/>
			<description>Entry DL in FontFileType1 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FontFileType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21820"/>
			<description>Entry DL with type Integer in FontFileType1 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FontFileType1 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21821"/>
			<description>Entry DecodeParms with type Array in FontFileType1 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFileType1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21822"/>
			<description>Entry DecodeParms with type Dictionary in FontFileType1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFileType1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21823"/>
			<description>Entry DecodeParms in FontFileType1 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFileType1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21824"/>
			<description>Entry DecodeParms with type Array in FontFileType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFileType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21825"/>
			<description>Entry F with type Dictionary in FontFileType1 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FontFileType1 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21826"/>
			<description>Entry F in FontFileType1 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in FontFileType1 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21827"/>
			<description>Entry FDecodeParms with type Array in FontFileType1 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFileType1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21828"/>
			<description>Entry FDecodeParms with type Dictionary in FontFileType1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFileType1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21829"/>
			<description>Entry FDecodeParms in FontFileType1 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFileType1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21830"/>
			<description>Entry FDecodeParms with type Array in FontFileType1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFileType1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21831"/>
			<description>Entry FFilter with type Array in FontFileType1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FontFileType1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21832"/>
			<description>Entry FFilter in FontFileType1 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FontFileType1 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21833"/>
			<description>Entry FFilter with type Array in FontFileType1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFileType1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="21834"/>
			<description>Entry FFilter with type Name in FontFileType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FontFileType1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21835"/>
			<description>Entry Filter with type Array in FontFileType1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FontFileType1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21836"/>
			<description>Entry Filter in FontFileType1 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FontFileType1 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21837"/>
			<description>Entry Filter with type Array in FontFileType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFileType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="21838"/>
			<description>Entry Filter with type Name in FontFileType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FontFileType1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21839"/>
			<description>Entry Length in FontFileType1 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFileType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="21840"/>
			<description>Entry Length in FontFileType1 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFileType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21841"/>
			<description>Entry Length1 in FontFileType1 shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFileType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="21842"/>
			<description>Entry Length1 in FontFileType1 is required</description>
			<test>containsLength1 == true</test>
			<error>
				<message>Entry Length1 in FontFileType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21843"/>
			<description>Entry Length1 with type Integer in FontFileType1 shall satisfy special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFileType1 does not satisfy special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21844"/>
			<description>Entry Length2 in FontFileType1 shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFileType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="21845"/>
			<description>Entry Length2 in FontFileType1 is required</description>
			<test>containsLength2 == true</test>
			<error>
				<message>Entry Length2 in FontFileType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21846"/>
			<description>Entry Length2 with type Integer in FontFileType1 shall satisfy special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFileType1 does not satisfy special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21847"/>
			<description>Entry Length3 in FontFileType1 shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFileType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="21848"/>
			<description>Entry Length3 in FontFileType1 is required</description>
			<test>containsLength3 == true</test>
			<error>
				<message>Entry Length3 in FontFileType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="21849"/>
			<description>Entry Length3 with type Integer in FontFileType1 shall satisfy special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFileType1 does not satisfy special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21850"/>
			<description>Entry Subtype in FontFileType1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFileType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMapEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="21960"/>
			<description>Entry with type Dictionary in FontMap shall be one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in FontMap is not one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMapEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="21961"/>
			<description>Entry in FontMap shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in FontMap is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="1" testNumber="22102"/>
			<description>FontMultipleMaster shall not contain entries except BaseFont, Encoding, FirstChar, FontDescriptor, LastChar, Name, Subtype, ToUnicode, Type, Widths</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths').length == 0</test>
			<error>
				<message>FontMultipleMaster contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22103"/>
			<description>Entry BaseFont in FontMultipleMaster shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontMultipleMaster is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="7" testNumber="22104"/>
			<description>Entry BaseFont in FontMultipleMaster is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="17" testNumber="22105"/>
			<description>Entry Encoding with type Dictionary in FontMultipleMaster shall be object Encoding</description>
			<test>EncodingHasTypeDictionary != true || Encoding_size == 1</test>
			<error>
				<message>Entry Encoding with type Dictionary in FontMultipleMaster is not object Encoding</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22106"/>
			<description>Entry Encoding in FontMultipleMaster shall have one of types: Name, Dictionary</description>
			<test>containsEncoding == false || EncodingHasTypeName == true || EncodingHasTypeDictionary == true</test>
			<error>
				<message>Entry Encoding in FontMultipleMaster is not one of types: Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="6" testNumber="22107"/>
			<description>Entry Encoding with type Name in FontMultipleMaster shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "MacRomanEncoding" || EncodingNameValue == "MacExpertEncoding" || EncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry Encoding with type Name in FontMultipleMaster has incorrect value %2 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22108"/>
			<description>Entry FirstChar in FontMultipleMaster shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontMultipleMaster is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="11" testNumber="22109"/>
			<description>Entry FirstChar in FontMultipleMaster is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFirstChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FirstChar in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="17" testNumber="22110"/>
			<description>Entry FontDescriptor with type Dictionary in FontMultipleMaster shall be object FontDescriptorType1</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontMultipleMaster is not object FontDescriptorType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22111"/>
			<description>Entry FontDescriptor in FontMultipleMaster shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontMultipleMaster is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="11" testNumber="22112"/>
			<description>Entry FontDescriptor in FontMultipleMaster is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFontDescriptor == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FontDescriptor in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="10" testNumber="22113"/>
			<description>Entry FontDescriptor with type Dictionary in FontMultipleMaster shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || isFontDescriptorIndirect == true</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontMultipleMaster is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22114"/>
			<description>Entry LastChar in FontMultipleMaster shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontMultipleMaster is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="11" testNumber="22115"/>
			<description>Entry LastChar in FontMultipleMaster is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsLastChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry LastChar in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22116"/>
			<description>Entry Name in FontMultipleMaster shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontMultipleMaster is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="11" testNumber="22117"/>
			<description>Entry Name in FontMultipleMaster is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22118"/>
			<description>Entry Subtype in FontMultipleMaster shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontMultipleMaster is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="7" testNumber="22119"/>
			<description>Entry Subtype in FontMultipleMaster is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="6" testNumber="22120"/>
			<description>Entry Subtype with type Name in FontMultipleMaster shall have value MMType1</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "MMType1"</test>
			<error>
				<message>Entry Subtype with type Name in FontMultipleMaster has incorrect value %2 instead of MMType1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="17" testNumber="22121"/>
			<description>Entry ToUnicode with type Stream in FontMultipleMaster shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontMultipleMaster is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22122"/>
			<description>Entry ToUnicode in FontMultipleMaster shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontMultipleMaster is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="10" testNumber="22123"/>
			<description>Entry ToUnicode with type Stream in FontMultipleMaster shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontMultipleMaster is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22124"/>
			<description>Entry Type in FontMultipleMaster shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontMultipleMaster is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="7" testNumber="22125"/>
			<description>Entry Type in FontMultipleMaster is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="6" testNumber="22126"/>
			<description>Entry Type with type Name in FontMultipleMaster shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontMultipleMaster has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="17" testNumber="22127"/>
			<description>Entry Widths with type Array in FontMultipleMaster shall be object ArrayOfNumbersGeneral</description>
			<test>WidthsHasTypeArray != true || Widths_size == 1</test>
			<error>
				<message>Entry Widths with type Array in FontMultipleMaster is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22128"/>
			<description>Entry Widths in FontMultipleMaster shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontMultipleMaster is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_5" clause="11" testNumber="22129"/>
			<description>Entry Widths in FontMultipleMaster is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsWidths == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry Widths in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="1" testNumber="22348"/>
			<description>FontTrueType shall not contain entries except BaseFont, Encoding, FirstChar, FontDescriptor, LastChar, Name, Subtype, ToUnicode, Type, Widths</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths').length == 0</test>
			<error>
				<message>FontTrueType contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22349"/>
			<description>Entry BaseFont in FontTrueType shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="7" testNumber="22350"/>
			<description>Entry BaseFont in FontTrueType is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="17" testNumber="22351"/>
			<description>Entry Encoding with type Dictionary in FontTrueType shall be object Encoding</description>
			<test>EncodingHasTypeDictionary != true || Encoding_size == 1</test>
			<error>
				<message>Entry Encoding with type Dictionary in FontTrueType is not object Encoding</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22352"/>
			<description>Entry Encoding in FontTrueType shall have one of types: Name, Dictionary</description>
			<test>containsEncoding == false || EncodingHasTypeName == true || EncodingHasTypeDictionary == true</test>
			<error>
				<message>Entry Encoding in FontTrueType is not one of types: Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="6" testNumber="22353"/>
			<description>Entry Encoding with type Name in FontTrueType shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "MacRomanEncoding" || EncodingNameValue == "MacExpertEncoding" || EncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry Encoding with type Name in FontTrueType has incorrect value %2 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22354"/>
			<description>Entry FirstChar in FontTrueType shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontTrueType is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="11" testNumber="22355"/>
			<description>Entry FirstChar in FontTrueType is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFirstChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FirstChar in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="17" testNumber="22356"/>
			<description>Entry FontDescriptor with type Dictionary in FontTrueType shall be object FontDescriptorTrueType</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontTrueType is not object FontDescriptorTrueType</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22357"/>
			<description>Entry FontDescriptor in FontTrueType shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontTrueType is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="11" testNumber="22358"/>
			<description>Entry FontDescriptor in FontTrueType is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFontDescriptor == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FontDescriptor in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="10" testNumber="22359"/>
			<description>Entry FontDescriptor with type Dictionary in FontTrueType shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || isFontDescriptorIndirect == true</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontTrueType is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22360"/>
			<description>Entry LastChar in FontTrueType shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontTrueType is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="11" testNumber="22361"/>
			<description>Entry LastChar in FontTrueType is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsLastChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry LastChar in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22362"/>
			<description>Entry Name in FontTrueType shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="11" testNumber="22363"/>
			<description>Entry Name in FontTrueType is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22364"/>
			<description>Entry Subtype in FontTrueType shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="7" testNumber="22365"/>
			<description>Entry Subtype in FontTrueType is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="6" testNumber="22366"/>
			<description>Entry Subtype with type Name in FontTrueType shall have value TrueType</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "TrueType"</test>
			<error>
				<message>Entry Subtype with type Name in FontTrueType has incorrect value %2 instead of TrueType</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="17" testNumber="22367"/>
			<description>Entry ToUnicode with type Stream in FontTrueType shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontTrueType is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22368"/>
			<description>Entry ToUnicode in FontTrueType shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontTrueType is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="10" testNumber="22369"/>
			<description>Entry ToUnicode with type Stream in FontTrueType shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontTrueType is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22370"/>
			<description>Entry Type in FontTrueType shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="7" testNumber="22371"/>
			<description>Entry Type in FontTrueType is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="6" testNumber="22372"/>
			<description>Entry Type with type Name in FontTrueType shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontTrueType has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="17" testNumber="22373"/>
			<description>Entry Widths with type Array in FontTrueType shall be object ArrayOfNumbersGeneral</description>
			<test>WidthsHasTypeArray != true || Widths_size == 1</test>
			<error>
				<message>Entry Widths with type Array in FontTrueType is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22374"/>
			<description>Entry Widths in FontTrueType shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontTrueType is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_5" clause="11" testNumber="22375"/>
			<description>Entry Widths in FontTrueType is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsWidths == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry Widths in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="1" testNumber="22520"/>
			<description>FontType0 shall not contain entries except BaseFont, DescendantFonts, Encoding, Subtype, ToUnicode, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'DescendantFonts' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>FontType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'DescendantFonts' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22521"/>
			<description>Entry BaseFont in FontType0 shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="22522"/>
			<description>Entry BaseFont in FontType0 is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="22523"/>
			<description>Entry DescendantFonts with type Array in FontType0 shall be object ArrayOfDescendantFonts</description>
			<test>DescendantFontsHasTypeArray != true || DescendantFonts_size == 1</test>
			<error>
				<message>Entry DescendantFonts with type Array in FontType0 is not object ArrayOfDescendantFonts</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22524"/>
			<description>Entry DescendantFonts in FontType0 shall have type Array</description>
			<test>containsDescendantFonts == false || DescendantFontsHasTypeArray == true</test>
			<error>
				<message>Entry DescendantFonts in FontType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="22525"/>
			<description>Entry DescendantFonts in FontType0 is required</description>
			<test>containsDescendantFonts == true</test>
			<error>
				<message>Entry DescendantFonts in FontType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="22526"/>
			<description>Entry Encoding with type Stream in FontType0 shall be object CMapStream</description>
			<test>EncodingHasTypeStream != true || Encoding_size == 1</test>
			<error>
				<message>Entry Encoding with type Stream in FontType0 is not object CMapStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22527"/>
			<description>Entry Encoding in FontType0 shall have one of types: Stream, Name</description>
			<test>containsEncoding == false || EncodingHasTypeStream == true || EncodingHasTypeName == true</test>
			<error>
				<message>Entry Encoding in FontType0 is not one of types: Stream, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="22528"/>
			<description>Entry Encoding in FontType0 is required</description>
			<test>containsEncoding == true</test>
			<error>
				<message>Entry Encoding in FontType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="10" testNumber="22529"/>
			<description>Entry Encoding with type Stream in FontType0 shall be indirect</description>
			<test>EncodingHasTypeStream != true || isEncodingIndirect == true</test>
			<error>
				<message>Entry Encoding with type Stream in FontType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="6" testNumber="22530"/>
			<description>Entry Encoding with type Name in FontType0 shall have one of values: GBK2K-V, ETenms-B5-H, 83pv-RKSJ-H, UniKS-UTF16-V, KSCpc-EUC-H, KSCms-UHC-HW-V, GB-EUC-H, B5pc-V, KSC-EUC-H, HKscs-B5-V, GBK2K-H, B5pc-H, KSCms-UHC-H, HKscs-B5-H, UniJIS-UCS2-V, UniJIS-UCS2-HW-H, GB-EUC-V, 90msp-RKSJ-H, UniJIS-UTF16-H, KSC-EUC-V, ETen-B5-V, CNS-EUC-H, UniCNS-UCS2-H, UniJIS-UCS2-H, UniJIS-UCS2-HW-V, ETenms-B5-V, CNS-EUC-V, 90msp-RKSJ-V, UniKS-UCS2-H, UniKS-UTF16-H, ETen-B5-H, 90ms-RKSJ-V, GBpc-EUC-H, Ext-RKSJ-H, UniKS-UCS2-V, Identity-V, H, GBpc-EUC-V, GBKp-EUC-H, KSCms-UHC-V, Add-RKSJ-H, UniCNS-UTF16-H, UniJIS-UTF16-V, V, UniCNS-UCS2-V, GBKp-EUC-V, Add-RKSJ-V, 90pv-RKSJ-H, GBK-EUC-V, UniGB-UTF16-V, UniCNS-UTF16-V, GBK-EUC-H, UniGB-UCS2-H, EUC-V, UniGB-UTF16-H, Ext-RKSJ-V, 90ms-RKSJ-H, Identity-H, UniGB-UCS2-V, EUC-H, KSCms-UHC-HW-H</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "GB-EUC-H" || EncodingNameValue == "GB-EUC-V" || EncodingNameValue == "GBpc-EUC-H" || EncodingNameValue == "GBpc-EUC-V" || EncodingNameValue == "GBK-EUC-H" || EncodingNameValue == "GBK-EUC-V" || EncodingNameValue == "GBKp-EUC-H" || EncodingNameValue == "GBKp-EUC-V" || EncodingNameValue == "GBK2K-H" || EncodingNameValue == "GBK2K-V" || EncodingNameValue == "UniGB-UCS2-H" || EncodingNameValue == "UniGB-UCS2-V" || EncodingNameValue == "UniGB-UTF16-H" || EncodingNameValue == "UniGB-UTF16-V" || EncodingNameValue == "B5pc-H" || EncodingNameValue == "B5pc-V" || EncodingNameValue == "HKscs-B5-H" || EncodingNameValue == "HKscs-B5-V" || EncodingNameValue == "ETen-B5-H" || EncodingNameValue == "ETen-B5-V" || EncodingNameValue == "ETenms-B5-H" || EncodingNameValue == "ETenms-B5-V" || EncodingNameValue == "CNS-EUC-H" || EncodingNameValue == "CNS-EUC-V" || EncodingNameValue == "UniCNS-UCS2-H" || EncodingNameValue == "UniCNS-UCS2-V" || EncodingNameValue == "UniCNS-UTF16-H" || EncodingNameValue == "UniCNS-UTF16-V" || EncodingNameValue == "83pv-RKSJ-H" || EncodingNameValue == "90ms-RKSJ-H" || EncodingNameValue == "90ms-RKSJ-V" || EncodingNameValue == "90msp-RKSJ-H" || EncodingNameValue == "90msp-RKSJ-V" || EncodingNameValue == "90pv-RKSJ-H" || EncodingNameValue == "Add-RKSJ-H" || EncodingNameValue == "Add-RKSJ-V" || EncodingNameValue == "EUC-H" || EncodingNameValue == "EUC-V" || EncodingNameValue == "Ext-RKSJ-H" || EncodingNameValue == "Ext-RKSJ-V" || EncodingNameValue == "H" || EncodingNameValue == "V" || EncodingNameValue == "UniJIS-UCS2-H" || EncodingNameValue == "UniJIS-UCS2-V" || EncodingNameValue == "UniJIS-UCS2-HW-H" || EncodingNameValue == "UniJIS-UCS2-HW-V" || EncodingNameValue == "UniJIS-UTF16-H" || EncodingNameValue == "UniJIS-UTF16-V" || EncodingNameValue == "KSC-EUC-H" || EncodingNameValue == "KSC-EUC-V" || EncodingNameValue == "KSCms-UHC-H" || EncodingNameValue == "KSCms-UHC-V" || EncodingNameValue == "KSCms-UHC-HW-H" || EncodingNameValue == "KSCms-UHC-HW-V" || EncodingNameValue == "KSCpc-EUC-H" || EncodingNameValue == "UniKS-UCS2-H" || EncodingNameValue == "UniKS-UCS2-V" || EncodingNameValue == "UniKS-UTF16-H" || EncodingNameValue == "UniKS-UTF16-V" || EncodingNameValue == "Identity-H" || EncodingNameValue == "Identity-V"</test>
			<error>
				<message>Entry Encoding with type Name in FontType0 has incorrect value %2 instead of GBK2K-V, ETenms-B5-H, 83pv-RKSJ-H, UniKS-UTF16-V, KSCpc-EUC-H, KSCms-UHC-HW-V, GB-EUC-H, B5pc-V, KSC-EUC-H, HKscs-B5-V, GBK2K-H, B5pc-H, KSCms-UHC-H, HKscs-B5-H, UniJIS-UCS2-V, UniJIS-UCS2-HW-H, GB-EUC-V, 90msp-RKSJ-H, UniJIS-UTF16-H, KSC-EUC-V, ETen-B5-V, CNS-EUC-H, UniCNS-UCS2-H, UniJIS-UCS2-H, UniJIS-UCS2-HW-V, ETenms-B5-V, CNS-EUC-V, 90msp-RKSJ-V, UniKS-UCS2-H, UniKS-UTF16-H, ETen-B5-H, 90ms-RKSJ-V, GBpc-EUC-H, Ext-RKSJ-H, UniKS-UCS2-V, Identity-V, H, GBpc-EUC-V, GBKp-EUC-H, KSCms-UHC-V, Add-RKSJ-H, UniCNS-UTF16-H, UniJIS-UTF16-V, V, UniCNS-UCS2-V, GBKp-EUC-V, Add-RKSJ-V, 90pv-RKSJ-H, GBK-EUC-V, UniGB-UTF16-V, UniCNS-UTF16-V, GBK-EUC-H, UniGB-UCS2-H, EUC-V, UniGB-UTF16-H, Ext-RKSJ-V, 90ms-RKSJ-H, Identity-H, UniGB-UCS2-V, EUC-H, KSCms-UHC-HW-H</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22531"/>
			<description>Entry Subtype in FontType0 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="22532"/>
			<description>Entry Subtype in FontType0 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="6" testNumber="22533"/>
			<description>Entry Subtype with type Name in FontType0 shall have value Type0</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type0"</test>
			<error>
				<message>Entry Subtype with type Name in FontType0 has incorrect value %2 instead of Type0</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="22534"/>
			<description>Entry ToUnicode with type Stream in FontType0 shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType0 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22535"/>
			<description>Entry ToUnicode in FontType0 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontType0 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="10" testNumber="22536"/>
			<description>Entry ToUnicode with type Stream in FontType0 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22537"/>
			<description>Entry Type in FontType0 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="22538"/>
			<description>Entry Type in FontType0 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_5" clause="6" testNumber="22539"/>
			<description>Entry Type with type Name in FontType0 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontType0 has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="1" testNumber="22739"/>
			<description>FontType1 shall not contain entries except BaseFont, Encoding, FirstChar, FontDescriptor, LastChar, Name, Subtype, ToUnicode, Type, Widths</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths').length == 0</test>
			<error>
				<message>FontType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22740"/>
			<description>Entry BaseFont in FontType1 shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="22741"/>
			<description>Entry BaseFont in FontType1 is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="22742"/>
			<description>Entry Encoding with type Dictionary in FontType1 shall be object Encoding</description>
			<test>EncodingHasTypeDictionary != true || Encoding_size == 1</test>
			<error>
				<message>Entry Encoding with type Dictionary in FontType1 is not object Encoding</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22743"/>
			<description>Entry Encoding in FontType1 shall have one of types: Name, Dictionary</description>
			<test>containsEncoding == false || EncodingHasTypeName == true || EncodingHasTypeDictionary == true</test>
			<error>
				<message>Entry Encoding in FontType1 is not one of types: Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="22744"/>
			<description>Entry Encoding with type Name in FontType1 shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "MacRomanEncoding" || EncodingNameValue == "MacExpertEncoding" || EncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry Encoding with type Name in FontType1 has incorrect value %2 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22745"/>
			<description>Entry FirstChar in FontType1 shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="11" testNumber="22746"/>
			<description>Entry FirstChar in FontType1 is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFirstChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FirstChar in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="22747"/>
			<description>Entry FontDescriptor with type Dictionary in FontType1 shall be object FontDescriptorType1</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType1 is not object FontDescriptorType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22748"/>
			<description>Entry FontDescriptor in FontType1 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="11" testNumber="22749"/>
			<description>Entry FontDescriptor in FontType1 is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFontDescriptor == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FontDescriptor in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="12" testNumber="22750"/>
			<description>If entry FontDescriptor with type Dictionary in FontType1 satisfies condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || (isFontDescriptorIndirect == true || (true) == false)</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22751"/>
			<description>Entry LastChar in FontType1 shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="11" testNumber="22752"/>
			<description>Entry LastChar in FontType1 is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsLastChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry LastChar in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22753"/>
			<description>Entry Name in FontType1 shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="11" testNumber="22754"/>
			<description>Entry Name in FontType1 is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22755"/>
			<description>Entry Subtype in FontType1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="22756"/>
			<description>Entry Subtype in FontType1 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="22757"/>
			<description>Entry Subtype with type Name in FontType1 shall have value Type1</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type1"</test>
			<error>
				<message>Entry Subtype with type Name in FontType1 has incorrect value %2 instead of Type1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="22758"/>
			<description>Entry ToUnicode with type Stream in FontType1 shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType1 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22759"/>
			<description>Entry ToUnicode in FontType1 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontType1 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="10" testNumber="22760"/>
			<description>Entry ToUnicode with type Stream in FontType1 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22761"/>
			<description>Entry Type in FontType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="22762"/>
			<description>Entry Type in FontType1 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="22763"/>
			<description>Entry Type with type Name in FontType1 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontType1 has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="22764"/>
			<description>Entry Widths with type Array in FontType1 shall be object ArrayOfNumbersGeneral</description>
			<test>WidthsHasTypeArray != true || Widths_size == 1</test>
			<error>
				<message>Entry Widths with type Array in FontType1 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="22765"/>
			<description>Entry Widths in FontType1 shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontType1 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="11" testNumber="22766"/>
			<description>Entry Widths in FontType1 is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsWidths == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry Widths in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="22767"/>
			<description>Entry Widths with type Array in FontType1 shall satisfy special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</description>
			<test>WidthsHasTypeArray != true || (WidthsArraySize == (1 + (LastCharIntegerValue - FirstCharIntegerValue)))</test>
			<error>
				<message>Entry Widths with type Array in FontType1 does not satisfy special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="1" testNumber="23025"/>
			<description>FontType3 shall not contain entries except CharProcs, Encoding, FirstChar, FontBBox, FontDescriptor, FontMatrix, LastChar, Name, Resources, Subtype, ToUnicode, Type, Widths</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CharProcs' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'FontMatrix' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths').length == 0</test>
			<error>
				<message>FontType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CharProcs' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'FontMatrix' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23026"/>
			<description>Entry CharProcs with type Dictionary in FontType3 shall be object CharProcMap</description>
			<test>CharProcsHasTypeDictionary != true || CharProcs_size == 1</test>
			<error>
				<message>Entry CharProcs with type Dictionary in FontType3 is not object CharProcMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23027"/>
			<description>Entry CharProcs in FontType3 shall have type Dictionary</description>
			<test>containsCharProcs == false || CharProcsHasTypeDictionary == true</test>
			<error>
				<message>Entry CharProcs in FontType3 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23028"/>
			<description>Entry CharProcs in FontType3 is required</description>
			<test>containsCharProcs == true</test>
			<error>
				<message>Entry CharProcs in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23029"/>
			<description>Entry Encoding with type Dictionary in FontType3 shall be object Encoding</description>
			<test>EncodingHasTypeDictionary != true || Encoding_size == 1</test>
			<error>
				<message>Entry Encoding with type Dictionary in FontType3 is not object Encoding</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23030"/>
			<description>Entry Encoding in FontType3 shall have type Dictionary</description>
			<test>containsEncoding == false || EncodingHasTypeDictionary == true</test>
			<error>
				<message>Entry Encoding in FontType3 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23031"/>
			<description>Entry Encoding in FontType3 is required</description>
			<test>containsEncoding == true</test>
			<error>
				<message>Entry Encoding in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23032"/>
			<description>Entry FirstChar in FontType3 shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontType3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23033"/>
			<description>Entry FirstChar in FontType3 is required</description>
			<test>containsFirstChar == true</test>
			<error>
				<message>Entry FirstChar in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23034"/>
			<description>Entry FontBBox in FontType3 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontType3 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23035"/>
			<description>Entry FontBBox in FontType3 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23036"/>
			<description>Entry FontDescriptor with type Dictionary in FontType3 shall be object FontDescriptorType3</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType3 is not object FontDescriptorType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23037"/>
			<description>Entry FontDescriptor in FontType3 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontType3 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="11" testNumber="23038"/>
			<description>Entry FontDescriptor in FontType3 is required, when fn:IsRequired(fn:IsPDFTagged())</description>
			<test>(containsFontDescriptor == true || (isPDFTagged) == false)</test>
			<error>
				<message>Entry FontDescriptor in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="12" testNumber="23039"/>
			<description>If entry FontDescriptor with type Dictionary in FontType3 satisfies condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || (isFontDescriptorIndirect == true || (true) == false)</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType3 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23040"/>
			<description>Entry FontMatrix in FontType3 shall have type Matrix</description>
			<test>containsFontMatrix == false || FontMatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry FontMatrix in FontType3 is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23041"/>
			<description>Entry FontMatrix in FontType3 is required</description>
			<test>containsFontMatrix == true</test>
			<error>
				<message>Entry FontMatrix in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23042"/>
			<description>Entry LastChar in FontType3 shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontType3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23043"/>
			<description>Entry LastChar in FontType3 is required</description>
			<test>containsLastChar == true</test>
			<error>
				<message>Entry LastChar in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23044"/>
			<description>Entry Name in FontType3 shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="11" testNumber="23045"/>
			<description>Entry Name in FontType3 is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23046"/>
			<description>Entry Resources with type Dictionary in FontType3 shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in FontType3 is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23047"/>
			<description>Entry Resources in FontType3 shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in FontType3 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23048"/>
			<description>Entry Subtype in FontType3 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23049"/>
			<description>Entry Subtype in FontType3 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="6" testNumber="23050"/>
			<description>Entry Subtype with type Name in FontType3 shall have value Type3</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type3"</test>
			<error>
				<message>Entry Subtype with type Name in FontType3 has incorrect value %2 instead of Type3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23051"/>
			<description>Entry ToUnicode with type Stream in FontType3 shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType3 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23052"/>
			<description>Entry ToUnicode in FontType3 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontType3 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="10" testNumber="23053"/>
			<description>Entry ToUnicode with type Stream in FontType3 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType3 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23054"/>
			<description>Entry Type in FontType3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23055"/>
			<description>Entry Type in FontType3 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="6" testNumber="23056"/>
			<description>Entry Type with type Name in FontType3 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontType3 has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23057"/>
			<description>Entry Widths with type Array in FontType3 shall be object ArrayOfNumbersGeneral</description>
			<test>WidthsHasTypeArray != true || Widths_size == 1</test>
			<error>
				<message>Entry Widths with type Array in FontType3 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23058"/>
			<description>Entry Widths in FontType3 shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23059"/>
			<description>Entry Widths in FontType3 is required</description>
			<test>containsWidths == true</test>
			<error>
				<message>Entry Widths in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23060"/>
			<description>Entry Widths with type Array in FontType3 shall satisfy special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</description>
			<test>WidthsHasTypeArray != true || (WidthsArraySize == (1 + (LastCharIntegerValue - FirstCharIntegerValue)))</test>
			<error>
				<message>Entry Widths with type Array in FontType3 does not satisfy special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="1" testNumber="23290"/>
			<description>FunctionType0 shall not contain entries except BitsPerSample, DL, Decode, DecodeParms, Domain, Encode, F, FDecodeParms, FFilter, Filter, FunctionType, Length, Order, Range, Size</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerSample' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Encode' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Order' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'Size').length == 0</test>
			<error>
				<message>FunctionType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerSample' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Encode' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Order' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'Size').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23291"/>
			<description>Entry BitsPerSample in FunctionType0 shall have type Integer</description>
			<test>containsBitsPerSample == false || BitsPerSampleHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerSample in FunctionType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23292"/>
			<description>Entry BitsPerSample in FunctionType0 is required</description>
			<test>containsBitsPerSample == true</test>
			<error>
				<message>Entry BitsPerSample in FunctionType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="6" testNumber="23293"/>
			<description>Entry BitsPerSample with type Integer in FunctionType0 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerSampleHasTypeInteger != true || BitsPerSampleIntegerValue == 1 || BitsPerSampleIntegerValue == 2 || BitsPerSampleIntegerValue == 4 || BitsPerSampleIntegerValue == 8 || BitsPerSampleIntegerValue == 12 || BitsPerSampleIntegerValue == 16 || BitsPerSampleIntegerValue == 24 || BitsPerSampleIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerSample with type Integer in FunctionType0 has incorrect value %2 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerSampleIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23294"/>
			<description>Entry DL in FunctionType0 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FunctionType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23295"/>
			<description>Entry DL with type Integer in FunctionType0 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FunctionType0 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23296"/>
			<description>Entry Decode with type Array in FunctionType0 shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in FunctionType0 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23297"/>
			<description>Entry Decode in FunctionType0 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in FunctionType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23298"/>
			<description>Entry Decode with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(Decode) == fn:ArrayLength(Range))</description>
			<test>DecodeHasTypeArray != true || (DecodeArraySize == RangeArraySize)</test>
			<error>
				<message>Entry Decode with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(Decode) == fn:ArrayLength(Range))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23299"/>
			<description>Entry DecodeParms with type Array in FunctionType0 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FunctionType0 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23300"/>
			<description>Entry DecodeParms with type Dictionary in FunctionType0 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FunctionType0 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23301"/>
			<description>Entry DecodeParms in FunctionType0 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FunctionType0 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23302"/>
			<description>Entry DecodeParms with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23303"/>
			<description>Entry Domain with type Array in FunctionType0 shall be object ArrayOfNumbersGeneral</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in FunctionType0 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23304"/>
			<description>Entry Domain in FunctionType0 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in FunctionType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23305"/>
			<description>Entry Domain in FunctionType0 is required</description>
			<test>containsDomain == true</test>
			<error>
				<message>Entry Domain in FunctionType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23306"/>
			<description>Entry Domain with type Array in FunctionType0 shall satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</description>
			<test>DomainHasTypeArray != true || ((DomainArraySize % 2) == 0)</test>
			<error>
				<message>Entry Domain with type Array in FunctionType0 does not satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23307"/>
			<description>Entry Encode with type Array in FunctionType0 shall be object ArrayOfNumbersGeneral</description>
			<test>EncodeHasTypeArray != true || Encode_size == 1</test>
			<error>
				<message>Entry Encode with type Array in FunctionType0 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23308"/>
			<description>Entry Encode in FunctionType0 shall have type Array</description>
			<test>containsEncode == false || EncodeHasTypeArray == true</test>
			<error>
				<message>Entry Encode in FunctionType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23309"/>
			<description>Entry Encode with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(Encode) == (2 * fn:ArrayLength(Size)))</description>
			<test>EncodeHasTypeArray != true || (EncodeArraySize == (2 * SizeArraySize))</test>
			<error>
				<message>Entry Encode with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(Encode) == (2 * fn:ArrayLength(Size)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23310"/>
			<description>Entry F with type Dictionary in FunctionType0 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FunctionType0 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23311"/>
			<description>Entry F in FunctionType0 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in FunctionType0 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23312"/>
			<description>Entry FDecodeParms with type Array in FunctionType0 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FunctionType0 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23313"/>
			<description>Entry FDecodeParms with type Dictionary in FunctionType0 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FunctionType0 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23314"/>
			<description>Entry FDecodeParms in FunctionType0 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FunctionType0 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23315"/>
			<description>Entry FDecodeParms with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23316"/>
			<description>Entry FFilter with type Array in FunctionType0 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FunctionType0 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23317"/>
			<description>Entry FFilter in FunctionType0 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FunctionType0 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23318"/>
			<description>Entry FFilter with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="6" testNumber="23319"/>
			<description>Entry FFilter with type Name in FunctionType0 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FunctionType0 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23320"/>
			<description>Entry Filter with type Array in FunctionType0 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FunctionType0 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23321"/>
			<description>Entry Filter in FunctionType0 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FunctionType0 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23322"/>
			<description>Entry Filter with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="6" testNumber="23323"/>
			<description>Entry Filter with type Name in FunctionType0 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FunctionType0 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23324"/>
			<description>Entry FunctionType in FunctionType0 shall have type Integer</description>
			<test>containsFunctionType == false || FunctionTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FunctionType in FunctionType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23325"/>
			<description>Entry FunctionType in FunctionType0 is required</description>
			<test>containsFunctionType == true</test>
			<error>
				<message>Entry FunctionType in FunctionType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="6" testNumber="23326"/>
			<description>Entry FunctionType with type Integer in FunctionType0 shall have value 0</description>
			<test>FunctionTypeHasTypeInteger != true || FunctionTypeIntegerValue == 0</test>
			<error>
				<message>Entry FunctionType with type Integer in FunctionType0 has incorrect value %2 instead of 0</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FunctionTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23327"/>
			<description>Entry Length in FunctionType0 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FunctionType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23328"/>
			<description>Entry Length in FunctionType0 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FunctionType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23329"/>
			<description>Entry Order in FunctionType0 shall have type Integer</description>
			<test>containsOrder == false || OrderHasTypeInteger == true</test>
			<error>
				<message>Entry Order in FunctionType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="6" testNumber="23330"/>
			<description>Entry Order with type Integer in FunctionType0 shall have one of values: 1, 3</description>
			<test>OrderHasTypeInteger != true || OrderIntegerValue == 1 || OrderIntegerValue == 3</test>
			<error>
				<message>Entry Order with type Integer in FunctionType0 has incorrect value %2 instead of 1, 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>OrderIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23331"/>
			<description>Entry Range with type Array in FunctionType0 shall be object ArrayOfNumbersGeneral</description>
			<test>RangeHasTypeArray != true || Range_size == 1</test>
			<error>
				<message>Entry Range with type Array in FunctionType0 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23332"/>
			<description>Entry Range in FunctionType0 shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in FunctionType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23333"/>
			<description>Entry Range in FunctionType0 is required</description>
			<test>containsRange == true</test>
			<error>
				<message>Entry Range in FunctionType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23334"/>
			<description>Entry Range with type Array in FunctionType0 shall satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</description>
			<test>RangeHasTypeArray != true || ((RangeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Range with type Array in FunctionType0 does not satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23335"/>
			<description>Entry Size with type Array in FunctionType0 shall be object ArrayOfIntegersGeneral</description>
			<test>SizeHasTypeArray != true || Size_size == 1</test>
			<error>
				<message>Entry Size with type Array in FunctionType0 is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23336"/>
			<description>Entry Size in FunctionType0 shall have type Array</description>
			<test>containsSize == false || SizeHasTypeArray == true</test>
			<error>
				<message>Entry Size in FunctionType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23337"/>
			<description>Entry Size in FunctionType0 is required</description>
			<test>containsSize == true</test>
			<error>
				<message>Entry Size in FunctionType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23338"/>
			<description>Entry Size with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(Domain) == (2 * fn:ArrayLength(Size)))</description>
			<test>SizeHasTypeArray != true || (DomainArraySize == (2 * SizeArraySize))</test>
			<error>
				<message>Entry Size with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(Domain) == (2 * fn:ArrayLength(Size)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_5" clause="1" testNumber="23524"/>
			<description>FunctionType2 shall not contain entries except C0, C1, Domain, FunctionType, N, Range</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C0' &amp;&amp; elem != 'C1' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Range').length == 0</test>
			<error>
				<message>FunctionType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C0' &amp;&amp; elem != 'C1' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Range').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23525"/>
			<description>Entry C0 with type Array in FunctionType2 shall be object ArrayOfNumbersGeneral</description>
			<test>C0HasTypeArray != true || C0_size == 1</test>
			<error>
				<message>Entry C0 with type Array in FunctionType2 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23526"/>
			<description>Entry C0 in FunctionType2 shall have type Array</description>
			<test>containsC0 == false || C0HasTypeArray == true</test>
			<error>
				<message>Entry C0 in FunctionType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23527"/>
			<description>Entry C0 with type Array in FunctionType2 shall satisfy special case: fn:Eval(fn:ArrayLength(C0) == fn:ArrayLength(C1))</description>
			<test>C0HasTypeArray != true || (C0ArraySize == C1ArraySize)</test>
			<error>
				<message>Entry C0 with type Array in FunctionType2 does not satisfy special case: fn:Eval(fn:ArrayLength(C0) == fn:ArrayLength(C1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23528"/>
			<description>Entry C1 with type Array in FunctionType2 shall be object ArrayOfNumbersGeneral</description>
			<test>C1HasTypeArray != true || C1_size == 1</test>
			<error>
				<message>Entry C1 with type Array in FunctionType2 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23529"/>
			<description>Entry C1 in FunctionType2 shall have type Array</description>
			<test>containsC1 == false || C1HasTypeArray == true</test>
			<error>
				<message>Entry C1 in FunctionType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23530"/>
			<description>Entry C1 with type Array in FunctionType2 shall satisfy special case: fn:Eval(fn:ArrayLength(C1) == fn:ArrayLength(C0))</description>
			<test>C1HasTypeArray != true || (C1ArraySize == C0ArraySize)</test>
			<error>
				<message>Entry C1 with type Array in FunctionType2 does not satisfy special case: fn:Eval(fn:ArrayLength(C1) == fn:ArrayLength(C0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23531"/>
			<description>Entry Domain with type Array in FunctionType2 shall be object ArrayOfNumbersGeneral</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in FunctionType2 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23532"/>
			<description>Entry Domain in FunctionType2 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in FunctionType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23533"/>
			<description>Entry Domain in FunctionType2 is required</description>
			<test>containsDomain == true</test>
			<error>
				<message>Entry Domain in FunctionType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23534"/>
			<description>Entry Domain with type Array in FunctionType2 shall satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</description>
			<test>DomainHasTypeArray != true || ((DomainArraySize % 2) == 0)</test>
			<error>
				<message>Entry Domain with type Array in FunctionType2 does not satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23535"/>
			<description>Entry FunctionType in FunctionType2 shall have type Integer</description>
			<test>containsFunctionType == false || FunctionTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FunctionType in FunctionType2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23536"/>
			<description>Entry FunctionType in FunctionType2 is required</description>
			<test>containsFunctionType == true</test>
			<error>
				<message>Entry FunctionType in FunctionType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_5" clause="6" testNumber="23537"/>
			<description>Entry FunctionType with type Integer in FunctionType2 shall have value 2</description>
			<test>FunctionTypeHasTypeInteger != true || FunctionTypeIntegerValue == 2</test>
			<error>
				<message>Entry FunctionType with type Integer in FunctionType2 has incorrect value %2 instead of 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FunctionTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23538"/>
			<description>Entry N in FunctionType2 shall have type Number</description>
			<test>containsN == false || NHasTypeNumber == true</test>
			<error>
				<message>Entry N in FunctionType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23539"/>
			<description>Entry N in FunctionType2 is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in FunctionType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23540"/>
			<description>Entry Range with type Array in FunctionType2 shall be object ArrayOfNumbersGeneral</description>
			<test>RangeHasTypeArray != true || Range_size == 1</test>
			<error>
				<message>Entry Range with type Array in FunctionType2 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23541"/>
			<description>Entry Range in FunctionType2 shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in FunctionType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23542"/>
			<description>Entry Range with type Array in FunctionType2 shall satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</description>
			<test>RangeHasTypeArray != true || ((RangeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Range with type Array in FunctionType2 does not satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="1" testNumber="23646"/>
			<description>FunctionType3 shall not contain entries except Bounds, Domain, Encode, FunctionType, Functions, Range</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Bounds' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Encode' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Functions' &amp;&amp; elem != 'Range').length == 0</test>
			<error>
				<message>FunctionType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Bounds' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Encode' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Functions' &amp;&amp; elem != 'Range').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23647"/>
			<description>Entry Bounds with type Array in FunctionType3 shall be object ArrayOfNumbersGeneral</description>
			<test>BoundsHasTypeArray != true || Bounds_size == 1</test>
			<error>
				<message>Entry Bounds with type Array in FunctionType3 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23648"/>
			<description>Entry Bounds in FunctionType3 shall have type Array</description>
			<test>containsBounds == false || BoundsHasTypeArray == true</test>
			<error>
				<message>Entry Bounds in FunctionType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23649"/>
			<description>Entry Bounds in FunctionType3 is required</description>
			<test>containsBounds == true</test>
			<error>
				<message>Entry Bounds in FunctionType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23650"/>
			<description>Entry Bounds with type Array in FunctionType3 shall satisfy special case: fn:Eval(fn:ArrayLength(Bounds) == (fn:ArrayLength(Functions) - 1))</description>
			<test>BoundsHasTypeArray != true || (BoundsArraySize == (FunctionsArraySize - 1))</test>
			<error>
				<message>Entry Bounds with type Array in FunctionType3 does not satisfy special case: fn:Eval(fn:ArrayLength(Bounds) == (fn:ArrayLength(Functions) - 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23651"/>
			<description>Entry Domain with type Array in FunctionType3 shall be object ArrayOfNumbersGeneral</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in FunctionType3 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23652"/>
			<description>Entry Domain in FunctionType3 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in FunctionType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23653"/>
			<description>Entry Domain in FunctionType3 is required</description>
			<test>containsDomain == true</test>
			<error>
				<message>Entry Domain in FunctionType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23654"/>
			<description>Entry Domain with type Array in FunctionType3 shall satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</description>
			<test>DomainHasTypeArray != true || ((DomainArraySize % 2) == 0)</test>
			<error>
				<message>Entry Domain with type Array in FunctionType3 does not satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23655"/>
			<description>Entry Encode with type Array in FunctionType3 shall be object ArrayOfNumbersGeneral</description>
			<test>EncodeHasTypeArray != true || Encode_size == 1</test>
			<error>
				<message>Entry Encode with type Array in FunctionType3 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23656"/>
			<description>Entry Encode in FunctionType3 shall have type Array</description>
			<test>containsEncode == false || EncodeHasTypeArray == true</test>
			<error>
				<message>Entry Encode in FunctionType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23657"/>
			<description>Entry Encode in FunctionType3 is required</description>
			<test>containsEncode == true</test>
			<error>
				<message>Entry Encode in FunctionType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23658"/>
			<description>Entry Encode with type Array in FunctionType3 shall satisfy special case: fn:Eval((fn:ArrayLength(Encode) mod 2) == 0)</description>
			<test>EncodeHasTypeArray != true || ((EncodeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Encode with type Array in FunctionType3 does not satisfy special case: fn:Eval((fn:ArrayLength(Encode) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23659"/>
			<description>Entry FunctionType in FunctionType3 shall have type Integer</description>
			<test>containsFunctionType == false || FunctionTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FunctionType in FunctionType3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23660"/>
			<description>Entry FunctionType in FunctionType3 is required</description>
			<test>containsFunctionType == true</test>
			<error>
				<message>Entry FunctionType in FunctionType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="6" testNumber="23661"/>
			<description>Entry FunctionType with type Integer in FunctionType3 shall have value 3</description>
			<test>FunctionTypeHasTypeInteger != true || FunctionTypeIntegerValue == 3</test>
			<error>
				<message>Entry FunctionType with type Integer in FunctionType3 has incorrect value %2 instead of 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FunctionTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23662"/>
			<description>Entry Functions with type Array in FunctionType3 shall be object ArrayOfFunctions</description>
			<test>FunctionsHasTypeArray != true || Functions_size == 1</test>
			<error>
				<message>Entry Functions with type Array in FunctionType3 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23663"/>
			<description>Entry Functions in FunctionType3 shall have type Array</description>
			<test>containsFunctions == false || FunctionsHasTypeArray == true</test>
			<error>
				<message>Entry Functions in FunctionType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23664"/>
			<description>Entry Functions in FunctionType3 is required</description>
			<test>containsFunctions == true</test>
			<error>
				<message>Entry Functions in FunctionType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23665"/>
			<description>Entry Functions with type Array in FunctionType3 shall satisfy special case: fn:Eval(fn:ArrayLength(Functions) == (fn:ArrayLength(Bounds) + 1))</description>
			<test>FunctionsHasTypeArray != true || (FunctionsArraySize == (BoundsArraySize + 1))</test>
			<error>
				<message>Entry Functions with type Array in FunctionType3 does not satisfy special case: fn:Eval(fn:ArrayLength(Functions) == (fn:ArrayLength(Bounds) + 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23666"/>
			<description>Entry Range with type Array in FunctionType3 shall be object ArrayOfNumbersGeneral</description>
			<test>RangeHasTypeArray != true || Range_size == 1</test>
			<error>
				<message>Entry Range with type Array in FunctionType3 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23667"/>
			<description>Entry Range in FunctionType3 shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in FunctionType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23668"/>
			<description>Entry Range with type Array in FunctionType3 shall satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</description>
			<test>RangeHasTypeArray != true || ((RangeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Range with type Array in FunctionType3 does not satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="1" testNumber="23802"/>
			<description>FunctionType4 shall not contain entries except DL, DecodeParms, Domain, F, FDecodeParms, FFilter, Filter, FunctionType, Length, Range</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Range').length == 0</test>
			<error>
				<message>FunctionType4 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Range').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23803"/>
			<description>Entry DL in FunctionType4 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FunctionType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23804"/>
			<description>Entry DL with type Integer in FunctionType4 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FunctionType4 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23805"/>
			<description>Entry DecodeParms with type Array in FunctionType4 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FunctionType4 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23806"/>
			<description>Entry DecodeParms with type Dictionary in FunctionType4 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FunctionType4 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23807"/>
			<description>Entry DecodeParms in FunctionType4 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FunctionType4 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23808"/>
			<description>Entry DecodeParms with type Array in FunctionType4 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FunctionType4 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23809"/>
			<description>Entry Domain with type Array in FunctionType4 shall be object ArrayOfNumbersGeneral</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in FunctionType4 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23810"/>
			<description>Entry Domain in FunctionType4 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in FunctionType4 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23811"/>
			<description>Entry Domain in FunctionType4 is required</description>
			<test>containsDomain == true</test>
			<error>
				<message>Entry Domain in FunctionType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23812"/>
			<description>Entry Domain with type Array in FunctionType4 shall satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</description>
			<test>DomainHasTypeArray != true || ((DomainArraySize % 2) == 0)</test>
			<error>
				<message>Entry Domain with type Array in FunctionType4 does not satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23813"/>
			<description>Entry F with type Dictionary in FunctionType4 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FunctionType4 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23814"/>
			<description>Entry F in FunctionType4 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in FunctionType4 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23815"/>
			<description>Entry FDecodeParms with type Array in FunctionType4 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FunctionType4 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23816"/>
			<description>Entry FDecodeParms with type Dictionary in FunctionType4 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FunctionType4 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23817"/>
			<description>Entry FDecodeParms in FunctionType4 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FunctionType4 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23818"/>
			<description>Entry FDecodeParms with type Array in FunctionType4 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FunctionType4 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23819"/>
			<description>Entry FFilter with type Array in FunctionType4 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FunctionType4 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23820"/>
			<description>Entry FFilter in FunctionType4 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FunctionType4 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23821"/>
			<description>Entry FFilter with type Array in FunctionType4 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FunctionType4 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="6" testNumber="23822"/>
			<description>Entry FFilter with type Name in FunctionType4 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FunctionType4 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23823"/>
			<description>Entry Filter with type Array in FunctionType4 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FunctionType4 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23824"/>
			<description>Entry Filter in FunctionType4 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FunctionType4 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23825"/>
			<description>Entry Filter with type Array in FunctionType4 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FunctionType4 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="6" testNumber="23826"/>
			<description>Entry Filter with type Name in FunctionType4 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FunctionType4 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23827"/>
			<description>Entry FunctionType in FunctionType4 shall have type Integer</description>
			<test>containsFunctionType == false || FunctionTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FunctionType in FunctionType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23828"/>
			<description>Entry FunctionType in FunctionType4 is required</description>
			<test>containsFunctionType == true</test>
			<error>
				<message>Entry FunctionType in FunctionType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="6" testNumber="23829"/>
			<description>Entry FunctionType with type Integer in FunctionType4 shall have value 4</description>
			<test>FunctionTypeHasTypeInteger != true || FunctionTypeIntegerValue == 4</test>
			<error>
				<message>Entry FunctionType with type Integer in FunctionType4 has incorrect value %2 instead of 4</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FunctionTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23830"/>
			<description>Entry Length in FunctionType4 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FunctionType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23831"/>
			<description>Entry Length in FunctionType4 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FunctionType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="23832"/>
			<description>Entry Range with type Array in FunctionType4 shall be object ArrayOfNumbersGeneral</description>
			<test>RangeHasTypeArray != true || Range_size == 1</test>
			<error>
				<message>Entry Range with type Array in FunctionType4 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23833"/>
			<description>Entry Range in FunctionType4 shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in FunctionType4 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="7" testNumber="23834"/>
			<description>Entry Range in FunctionType4 is required</description>
			<test>containsRange == true</test>
			<error>
				<message>Entry Range in FunctionType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_5" clause="9" testNumber="23835"/>
			<description>Entry Range with type Array in FunctionType4 shall satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</description>
			<test>RangeHasTypeArray != true || ((RangeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Range with type Array in FunctionType4 does not satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_5" clause="2" testNumber="23966"/>
			<description>GammaArray shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>GammaArray contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23967"/>
			<description>Entry 0 in GammaArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in GammaArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_5" clause="14" testNumber="23968"/>
			<description>Entry 0 with type Number in GammaArray shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in GammaArray does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23969"/>
			<description>Entry 1 in GammaArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in GammaArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_5" clause="14" testNumber="23970"/>
			<description>Entry 1 with type Number in GammaArray shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Number in GammaArray does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="23971"/>
			<description>Entry 2 in GammaArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in GammaArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_5" clause="14" testNumber="23972"/>
			<description>Entry 2 with type Number in GammaArray shall satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Number in GammaArray does not satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="1" testNumber="24170"/>
			<description>GraphicsStateParameter shall not contain entries except AAPL:AA, AAPL:ST, AIS, BG, BG2, BM, CA, D, FL, Font, HT, HTP, LC, LJ, LW, ML, OP, OPM, RI, SA, SM, SMask, TK, TR, TR2, Type, UCR, UCR2, ca, op</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AAPL:AA' &amp;&amp; elem != 'AAPL:ST' &amp;&amp; elem != 'AIS' &amp;&amp; elem != 'BG' &amp;&amp; elem != 'BG2' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'D' &amp;&amp; elem != 'FL' &amp;&amp; elem != 'Font' &amp;&amp; elem != 'HT' &amp;&amp; elem != 'HTP' &amp;&amp; elem != 'LC' &amp;&amp; elem != 'LJ' &amp;&amp; elem != 'LW' &amp;&amp; elem != 'ML' &amp;&amp; elem != 'OP' &amp;&amp; elem != 'OPM' &amp;&amp; elem != 'RI' &amp;&amp; elem != 'SA' &amp;&amp; elem != 'SM' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'TK' &amp;&amp; elem != 'TR' &amp;&amp; elem != 'TR2' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UCR' &amp;&amp; elem != 'UCR2' &amp;&amp; elem != 'ca' &amp;&amp; elem != 'op').length == 0</test>
			<error>
				<message>GraphicsStateParameter contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AAPL:AA' &amp;&amp; elem != 'AAPL:ST' &amp;&amp; elem != 'AIS' &amp;&amp; elem != 'BG' &amp;&amp; elem != 'BG2' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'D' &amp;&amp; elem != 'FL' &amp;&amp; elem != 'Font' &amp;&amp; elem != 'HT' &amp;&amp; elem != 'HTP' &amp;&amp; elem != 'LC' &amp;&amp; elem != 'LJ' &amp;&amp; elem != 'LW' &amp;&amp; elem != 'ML' &amp;&amp; elem != 'OP' &amp;&amp; elem != 'OPM' &amp;&amp; elem != 'RI' &amp;&amp; elem != 'SA' &amp;&amp; elem != 'SM' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'TK' &amp;&amp; elem != 'TR' &amp;&amp; elem != 'TR2' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UCR' &amp;&amp; elem != 'UCR2' &amp;&amp; elem != 'ca' &amp;&amp; elem != 'op').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24171"/>
			<description>Entry AAPL:AA in GraphicsStateParameter shall have type Boolean</description>
			<test>containsAAPLAA == false || AAPLAAHasTypeBoolean == true</test>
			<error>
				<message>Entry AAPL:AA in GraphicsStateParameter is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24172"/>
			<description>Entry AAPL:ST with type Dictionary in GraphicsStateParameter shall be object AAPL_ST</description>
			<test>AAPLSTHasTypeDictionary != true || AAPLST_size == 1</test>
			<error>
				<message>Entry AAPL:ST with type Dictionary in GraphicsStateParameter is not object AAPL_ST</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24173"/>
			<description>Entry AAPL:ST in GraphicsStateParameter shall have one of types: Name, Dictionary</description>
			<test>containsAAPLST == false || AAPLSTHasTypeName == true || AAPLSTHasTypeDictionary == true</test>
			<error>
				<message>Entry AAPL:ST in GraphicsStateParameter is not one of types: Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24174"/>
			<description>Entry AIS in GraphicsStateParameter shall have type Boolean</description>
			<test>containsAIS == false || AISHasTypeBoolean == true</test>
			<error>
				<message>Entry AIS in GraphicsStateParameter is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24175"/>
			<description>Entry BG with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>BGHasTypeStream != true || BG_size == 1</test>
			<error>
				<message>Entry BG with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24176"/>
			<description>Entry BG with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>BGHasTypeDictionary != true || BG_size == 1</test>
			<error>
				<message>Entry BG with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24177"/>
			<description>Entry BG in GraphicsStateParameter shall have one of types: Stream, Dictionary</description>
			<test>containsBG == false || BGHasTypeStream == true || BGHasTypeDictionary == true</test>
			<error>
				<message>Entry BG in GraphicsStateParameter is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="10" testNumber="24178"/>
			<description>Entry BG with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>BGHasTypeStream != true || isBGIndirect == true</test>
			<error>
				<message>Entry BG with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24179"/>
			<description>Entry BG2 with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>BG2HasTypeStream != true || BG2_size == 1</test>
			<error>
				<message>Entry BG2 with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24180"/>
			<description>Entry BG2 with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>BG2HasTypeDictionary != true || BG2_size == 1</test>
			<error>
				<message>Entry BG2 with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24181"/>
			<description>Entry BG2 in GraphicsStateParameter shall have one of types: Stream, Name, Dictionary</description>
			<test>containsBG2 == false || BG2HasTypeStream == true || BG2HasTypeName == true || BG2HasTypeDictionary == true</test>
			<error>
				<message>Entry BG2 in GraphicsStateParameter is not one of types: Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="10" testNumber="24182"/>
			<description>Entry BG2 with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>BG2HasTypeStream != true || isBG2Indirect == true</test>
			<error>
				<message>Entry BG2 with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24183"/>
			<description>Entry BM with type Array in GraphicsStateParameter shall be object ArrayOfBlendModes</description>
			<test>BMHasTypeArray != true || BM_size == 1</test>
			<error>
				<message>Entry BM with type Array in GraphicsStateParameter is not object ArrayOfBlendModes</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24184"/>
			<description>Entry BM in GraphicsStateParameter shall have one of types: Array, Name</description>
			<test>containsBM == false || BMHasTypeArray == true || BMHasTypeName == true</test>
			<error>
				<message>Entry BM in GraphicsStateParameter is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="19" testNumber="24185"/>
			<description>Entry BM with type Name in GraphicsStateParameter shouldn't have deprecated value "Compatible"</description>
			<test>BMNameValue != "Compatible"</test>
			<error>
				<message>Entry BM with type Name in GraphicsStateParameter has deprecated value "Compatible"</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="13" testNumber="24186"/>
			<description>Entry BM with type Name in GraphicsStateParameter shall have one of values: Screen, ColorDodge, Saturation, Color, Luminosity, Darken, Difference, Compatible, Normal, SoftLight, ColorBurn, Multiply, Exclusion, HardLight, Hue, Overlay, Lighten</description>
			<test>BMHasTypeName != true || BMNameValue == "Compatible" || BMNameValue == "Normal" || BMNameValue == "Multiply" || BMNameValue == "Screen" || BMNameValue == "Difference" || BMNameValue == "Darken" || BMNameValue == "Lighten" || BMNameValue == "ColorDodge" || BMNameValue == "ColorBurn" || BMNameValue == "Exclusion" || BMNameValue == "HardLight" || BMNameValue == "Overlay" || BMNameValue == "SoftLight" || BMNameValue == "Luminosity" || BMNameValue == "Hue" || BMNameValue == "Saturation" || BMNameValue == "Color"</test>
			<error>
				<message>Entry BM with type Name in GraphicsStateParameter has incorrect value %2 instead of Screen, ColorDodge, Saturation, Color, Luminosity, Darken, Difference, Compatible, Normal, SoftLight, ColorBurn, Multiply, Exclusion, HardLight, Hue, Overlay, Lighten</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BMNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24187"/>
			<description>Entry CA in GraphicsStateParameter shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in GraphicsStateParameter is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="14" testNumber="24188"/>
			<description>Entry CA with type Number in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval((@CA &gt;= 0) &amp;&amp; (@CA &lt;= 1))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0) &amp;&amp; (CANumberValue &lt;= 1)</test>
			<error>
				<message>Entry CA with type Number in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval((@CA &gt;= 0) &amp;&amp; (@CA &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24189"/>
			<description>Entry D with type Array in GraphicsStateParameter shall be object ArrayOfGSPDashPatterns</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in GraphicsStateParameter is not object ArrayOfGSPDashPatterns</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24190"/>
			<description>Entry D in GraphicsStateParameter shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in GraphicsStateParameter is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24191"/>
			<description>Entry FL in GraphicsStateParameter shall have type Number</description>
			<test>containsFL == false || FLHasTypeNumber == true</test>
			<error>
				<message>Entry FL in GraphicsStateParameter is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="14" testNumber="24192"/>
			<description>Entry FL with type Number in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval(@FL &gt; 0)</description>
			<test>FLHasTypeNumber != true || FLNumberValue &gt; 0</test>
			<error>
				<message>Entry FL with type Number in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval(@FL &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24193"/>
			<description>Entry Font with type Array in GraphicsStateParameter shall be object ArrayOfFontAndSize</description>
			<test>FontHasTypeArray != true || Font_size == 1</test>
			<error>
				<message>Entry Font with type Array in GraphicsStateParameter is not object ArrayOfFontAndSize</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24194"/>
			<description>Entry Font in GraphicsStateParameter shall have type Array</description>
			<test>containsFont == false || FontHasTypeArray == true</test>
			<error>
				<message>Entry Font in GraphicsStateParameter is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24195"/>
			<description>Entry HT with type Stream in GraphicsStateParameter shall be one of objects HalftoneType6, HalftoneType10, HalftoneType16</description>
			<test>HTHasTypeStream != true || HT_size == 1</test>
			<error>
				<message>Entry HT with type Stream in GraphicsStateParameter is not one of objects HalftoneType6, HalftoneType10, HalftoneType16</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24196"/>
			<description>Entry HT with type Dictionary in GraphicsStateParameter shall be one of objects HalftoneType1, HalftoneType5</description>
			<test>HTHasTypeDictionary != true || HT_size == 1</test>
			<error>
				<message>Entry HT with type Dictionary in GraphicsStateParameter is not one of objects HalftoneType1, HalftoneType5</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24197"/>
			<description>Entry HT in GraphicsStateParameter shall have one of types: Stream, Name, Dictionary</description>
			<test>containsHT == false || HTHasTypeStream == true || HTHasTypeName == true || HTHasTypeDictionary == true</test>
			<error>
				<message>Entry HT in GraphicsStateParameter is not one of types: Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="10" testNumber="24198"/>
			<description>Entry HT with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>HTHasTypeStream != true || isHTIndirect == true</test>
			<error>
				<message>Entry HT with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24199"/>
			<description>Entry HTP with type Array in GraphicsStateParameter shall be object ArrayOf_2Integers</description>
			<test>HTPHasTypeArray != true || HTP_size == 1</test>
			<error>
				<message>Entry HTP with type Array in GraphicsStateParameter is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24200"/>
			<description>Entry HTP in GraphicsStateParameter shall have type Array</description>
			<test>containsHTP == false || HTPHasTypeArray == true</test>
			<error>
				<message>Entry HTP in GraphicsStateParameter is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="5" testNumber="24201"/>
			<description>Entry HTP in GraphicsStateParameter is deprecated since PDF 1.3</description>
			<test>containsHTP == false</test>
			<error>
				<message>Entry HTP in GraphicsStateParameter is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24202"/>
			<description>Entry LC in GraphicsStateParameter shall have type Integer</description>
			<test>containsLC == false || LCHasTypeInteger == true</test>
			<error>
				<message>Entry LC in GraphicsStateParameter is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="14" testNumber="24203"/>
			<description>Entry LC with type Integer in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval((@LC &gt;= 0) &amp;&amp; (@LC &lt;= 2))</description>
			<test>LCHasTypeInteger != true || (LCIntegerValue &gt;= 0) &amp;&amp; (LCIntegerValue &lt;= 2)</test>
			<error>
				<message>Entry LC with type Integer in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval((@LC &gt;= 0) &amp;&amp; (@LC &lt;= 2))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24204"/>
			<description>Entry LJ in GraphicsStateParameter shall have type Integer</description>
			<test>containsLJ == false || LJHasTypeInteger == true</test>
			<error>
				<message>Entry LJ in GraphicsStateParameter is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="14" testNumber="24205"/>
			<description>Entry LJ with type Integer in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval((@LJ &gt;= 0) &amp;&amp; (@LJ &lt;= 2))</description>
			<test>LJHasTypeInteger != true || (LJIntegerValue &gt;= 0) &amp;&amp; (LJIntegerValue &lt;= 2)</test>
			<error>
				<message>Entry LJ with type Integer in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval((@LJ &gt;= 0) &amp;&amp; (@LJ &lt;= 2))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24206"/>
			<description>Entry LW in GraphicsStateParameter shall have type Number</description>
			<test>containsLW == false || LWHasTypeNumber == true</test>
			<error>
				<message>Entry LW in GraphicsStateParameter is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="14" testNumber="24207"/>
			<description>Entry LW with type Number in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval(@LW &gt;= 0)</description>
			<test>LWHasTypeNumber != true || LWNumberValue &gt;= 0</test>
			<error>
				<message>Entry LW with type Number in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval(@LW &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24208"/>
			<description>Entry ML in GraphicsStateParameter shall have type Number</description>
			<test>containsML == false || MLHasTypeNumber == true</test>
			<error>
				<message>Entry ML in GraphicsStateParameter is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="14" testNumber="24209"/>
			<description>Entry ML with type Number in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval(@ML &gt;= 1)</description>
			<test>MLHasTypeNumber != true || MLNumberValue &gt;= 1</test>
			<error>
				<message>Entry ML with type Number in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval(@ML &gt;= 1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24210"/>
			<description>Entry OP in GraphicsStateParameter shall have type Boolean</description>
			<test>containsOP == false || OPHasTypeBoolean == true</test>
			<error>
				<message>Entry OP in GraphicsStateParameter is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24211"/>
			<description>Entry OPM in GraphicsStateParameter shall have type Integer</description>
			<test>containsOPM == false || OPMHasTypeInteger == true</test>
			<error>
				<message>Entry OPM in GraphicsStateParameter is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="14" testNumber="24212"/>
			<description>Entry OPM with type Integer in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval((@OPM &gt;= 0) &amp;&amp; (@OPM &lt;= 1))</description>
			<test>OPMHasTypeInteger != true || (OPMIntegerValue &gt;= 0) &amp;&amp; (OPMIntegerValue &lt;= 1)</test>
			<error>
				<message>Entry OPM with type Integer in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval((@OPM &gt;= 0) &amp;&amp; (@OPM &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24213"/>
			<description>Entry RI in GraphicsStateParameter shall have type Name</description>
			<test>containsRI == false || RIHasTypeName == true</test>
			<error>
				<message>Entry RI in GraphicsStateParameter is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="6" testNumber="24214"/>
			<description>Entry RI with type Name in GraphicsStateParameter shall have one of values: AbsoluteColorimetric, Perceptual, Saturation, RelativeColorimetric</description>
			<test>RIHasTypeName != true || RINameValue == "AbsoluteColorimetric" || RINameValue == "RelativeColorimetric" || RINameValue == "Saturation" || RINameValue == "Perceptual"</test>
			<error>
				<message>Entry RI with type Name in GraphicsStateParameter has incorrect value %2 instead of AbsoluteColorimetric, Perceptual, Saturation, RelativeColorimetric</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RINameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24215"/>
			<description>Entry SA in GraphicsStateParameter shall have type Boolean</description>
			<test>containsSA == false || SAHasTypeBoolean == true</test>
			<error>
				<message>Entry SA in GraphicsStateParameter is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24216"/>
			<description>Entry SM in GraphicsStateParameter shall have type Number</description>
			<test>containsSM == false || SMHasTypeNumber == true</test>
			<error>
				<message>Entry SM in GraphicsStateParameter is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="14" testNumber="24217"/>
			<description>Entry SM with type Number in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval((@SM &gt;= 0) &amp;&amp; (@SM &lt;= 1))</description>
			<test>SMHasTypeNumber != true || (SMNumberValue &gt;= 0) &amp;&amp; (SMNumberValue &lt;= 1)</test>
			<error>
				<message>Entry SM with type Number in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval((@SM &gt;= 0) &amp;&amp; (@SM &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24218"/>
			<description>Entry SMask with type Dictionary in GraphicsStateParameter shall be one of objects SoftMaskAlpha, SoftMaskLuminosity</description>
			<test>SMaskHasTypeDictionary != true || SMask_size == 1</test>
			<error>
				<message>Entry SMask with type Dictionary in GraphicsStateParameter is not one of objects SoftMaskAlpha, SoftMaskLuminosity</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24219"/>
			<description>Entry SMask in GraphicsStateParameter shall have one of types: Name, Dictionary</description>
			<test>containsSMask == false || SMaskHasTypeName == true || SMaskHasTypeDictionary == true</test>
			<error>
				<message>Entry SMask in GraphicsStateParameter is not one of types: Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="6" testNumber="24220"/>
			<description>Entry SMask with type Name in GraphicsStateParameter shall have value None</description>
			<test>SMaskHasTypeName != true || SMaskNameValue == "None"</test>
			<error>
				<message>Entry SMask with type Name in GraphicsStateParameter has incorrect value %2 instead of None</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SMaskNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24221"/>
			<description>Entry TK in GraphicsStateParameter shall have type Boolean</description>
			<test>containsTK == false || TKHasTypeBoolean == true</test>
			<error>
				<message>Entry TK in GraphicsStateParameter is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24222"/>
			<description>Entry TR with type Array in GraphicsStateParameter shall be object ArrayOf4Functions</description>
			<test>TRHasTypeArray != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Array in GraphicsStateParameter is not object ArrayOf4Functions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24223"/>
			<description>Entry TR with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>TRHasTypeStream != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24224"/>
			<description>Entry TR with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>TRHasTypeDictionary != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24225"/>
			<description>Entry TR in GraphicsStateParameter shall have one of types: Array, Stream, Name, Dictionary</description>
			<test>containsTR == false || TRHasTypeArray == true || TRHasTypeStream == true || TRHasTypeName == true || TRHasTypeDictionary == true</test>
			<error>
				<message>Entry TR in GraphicsStateParameter is not one of types: Array, Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="10" testNumber="24226"/>
			<description>Entry TR with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>TRHasTypeStream != true || isTRIndirect == true</test>
			<error>
				<message>Entry TR with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24227"/>
			<description>Entry TR2 with type Array in GraphicsStateParameter shall be object ArrayOf4Functions</description>
			<test>TR2HasTypeArray != true || TR2_size == 1</test>
			<error>
				<message>Entry TR2 with type Array in GraphicsStateParameter is not object ArrayOf4Functions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24228"/>
			<description>Entry TR2 with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>TR2HasTypeStream != true || TR2_size == 1</test>
			<error>
				<message>Entry TR2 with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24229"/>
			<description>Entry TR2 with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>TR2HasTypeDictionary != true || TR2_size == 1</test>
			<error>
				<message>Entry TR2 with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24230"/>
			<description>Entry TR2 in GraphicsStateParameter shall have one of types: Array, Stream, Name, Dictionary</description>
			<test>containsTR2 == false || TR2HasTypeArray == true || TR2HasTypeStream == true || TR2HasTypeName == true || TR2HasTypeDictionary == true</test>
			<error>
				<message>Entry TR2 in GraphicsStateParameter is not one of types: Array, Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="10" testNumber="24231"/>
			<description>Entry TR2 with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>TR2HasTypeStream != true || isTR2Indirect == true</test>
			<error>
				<message>Entry TR2 with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24232"/>
			<description>Entry Type in GraphicsStateParameter shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in GraphicsStateParameter is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="6" testNumber="24233"/>
			<description>Entry Type with type Name in GraphicsStateParameter shall have value ExtGState</description>
			<test>TypeHasTypeName != true || TypeNameValue == "ExtGState"</test>
			<error>
				<message>Entry Type with type Name in GraphicsStateParameter has incorrect value %2 instead of ExtGState</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24234"/>
			<description>Entry UCR with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>UCRHasTypeStream != true || UCR_size == 1</test>
			<error>
				<message>Entry UCR with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24235"/>
			<description>Entry UCR with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>UCRHasTypeDictionary != true || UCR_size == 1</test>
			<error>
				<message>Entry UCR with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24236"/>
			<description>Entry UCR in GraphicsStateParameter shall have one of types: Stream, Dictionary</description>
			<test>containsUCR == false || UCRHasTypeStream == true || UCRHasTypeDictionary == true</test>
			<error>
				<message>Entry UCR in GraphicsStateParameter is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="10" testNumber="24237"/>
			<description>Entry UCR with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>UCRHasTypeStream != true || isUCRIndirect == true</test>
			<error>
				<message>Entry UCR with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24238"/>
			<description>Entry UCR2 with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>UCR2HasTypeStream != true || UCR2_size == 1</test>
			<error>
				<message>Entry UCR2 with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24239"/>
			<description>Entry UCR2 with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>UCR2HasTypeDictionary != true || UCR2_size == 1</test>
			<error>
				<message>Entry UCR2 with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24240"/>
			<description>Entry UCR2 in GraphicsStateParameter shall have one of types: Stream, Name, Dictionary</description>
			<test>containsUCR2 == false || UCR2HasTypeStream == true || UCR2HasTypeName == true || UCR2HasTypeDictionary == true</test>
			<error>
				<message>Entry UCR2 in GraphicsStateParameter is not one of types: Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="10" testNumber="24241"/>
			<description>Entry UCR2 with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>UCR2HasTypeStream != true || isUCR2Indirect == true</test>
			<error>
				<message>Entry UCR2 with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24242"/>
			<description>Entry ca in GraphicsStateParameter shall have type Number</description>
			<test>containsca == false || caHasTypeNumber == true</test>
			<error>
				<message>Entry ca in GraphicsStateParameter is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="14" testNumber="24243"/>
			<description>Entry ca with type Number in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval((@ca &gt;= 0) &amp;&amp; (@ca &lt;= 1))</description>
			<test>caHasTypeNumber != true || (caNumberValue &gt;= 0) &amp;&amp; (caNumberValue &lt;= 1)</test>
			<error>
				<message>Entry ca with type Number in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval((@ca &gt;= 0) &amp;&amp; (@ca &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24244"/>
			<description>Entry op in GraphicsStateParameter shall have type Boolean</description>
			<test>containsop == false || opHasTypeBoolean == true</test>
			<error>
				<message>Entry op in GraphicsStateParameter is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameterMapEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24481"/>
			<description>Entry with type Dictionary in GraphicsStateParameterMap shall be object GraphicsStateParameter</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in GraphicsStateParameterMap is not object GraphicsStateParameter</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameterMapEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24482"/>
			<description>Entry in GraphicsStateParameterMap shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in GraphicsStateParameterMap is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_5" clause="1" testNumber="24500"/>
			<description>GroupAttributes shall not contain entries except CS, I, K, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CS' &amp;&amp; elem != 'I' &amp;&amp; elem != 'K' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>GroupAttributes contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CS' &amp;&amp; elem != 'I' &amp;&amp; elem != 'K' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24501"/>
			<description>Entry CS with type Array in GroupAttributes shall be one of objects CalGrayColorSpace, CalRGBColorSpace, ICCBasedColorSpace</description>
			<test>CSHasTypeArray != true || CS_size == 1</test>
			<error>
				<message>Entry CS with type Array in GroupAttributes is not one of objects CalGrayColorSpace, CalRGBColorSpace, ICCBasedColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24502"/>
			<description>Entry CS in GroupAttributes shall have one of types: Array, Name</description>
			<test>containsCS == false || CSHasTypeArray == true || CSHasTypeName == true</test>
			<error>
				<message>Entry CS in GroupAttributes is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_5" clause="6" testNumber="24503"/>
			<description>Entry CS with type Name in GroupAttributes shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>CSHasTypeName != true || CSNameValue == "DeviceCMYK" || CSNameValue == "DeviceRGB" || CSNameValue == "DeviceGray"</test>
			<error>
				<message>Entry CS with type Name in GroupAttributes has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>CSNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24504"/>
			<description>Entry I in GroupAttributes shall have type Boolean</description>
			<test>containsI == false || IHasTypeBoolean == true</test>
			<error>
				<message>Entry I in GroupAttributes is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24505"/>
			<description>Entry K in GroupAttributes shall have type Boolean</description>
			<test>containsK == false || KHasTypeBoolean == true</test>
			<error>
				<message>Entry K in GroupAttributes is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24506"/>
			<description>Entry S in GroupAttributes shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in GroupAttributes is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_5" clause="7" testNumber="24507"/>
			<description>Entry S in GroupAttributes is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in GroupAttributes is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_5" clause="6" testNumber="24508"/>
			<description>Entry S with type Name in GroupAttributes shall have value Transparency</description>
			<test>SHasTypeName != true || SNameValue == "Transparency"</test>
			<error>
				<message>Entry S with type Name in GroupAttributes has incorrect value %2 instead of Transparency</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24509"/>
			<description>Entry Type in GroupAttributes shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in GroupAttributes is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_5" clause="6" testNumber="24510"/>
			<description>Entry Type with type Name in GroupAttributes shall have value Group</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Group"</test>
			<error>
				<message>Entry Type with type Name in GroupAttributes has incorrect value %2 instead of Group</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="1" testNumber="24620"/>
			<description>HalftoneType1 shall not contain entries except AccurateScreens, Angle, Frequency, HalftoneName, HalftoneType, SpotFunction, TransferFunction, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AccurateScreens' &amp;&amp; elem != 'Angle' &amp;&amp; elem != 'Frequency' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'SpotFunction' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>HalftoneType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AccurateScreens' &amp;&amp; elem != 'Angle' &amp;&amp; elem != 'Frequency' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'SpotFunction' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24621"/>
			<description>Entry AccurateScreens in HalftoneType1 shall have type Boolean</description>
			<test>containsAccurateScreens == false || AccurateScreensHasTypeBoolean == true</test>
			<error>
				<message>Entry AccurateScreens in HalftoneType1 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24622"/>
			<description>Entry Angle in HalftoneType1 shall have type Number</description>
			<test>containsAngle == false || AngleHasTypeNumber == true</test>
			<error>
				<message>Entry Angle in HalftoneType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="24623"/>
			<description>Entry Angle in HalftoneType1 is required</description>
			<test>containsAngle == true</test>
			<error>
				<message>Entry Angle in HalftoneType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24624"/>
			<description>Entry Frequency in HalftoneType1 shall have type Number</description>
			<test>containsFrequency == false || FrequencyHasTypeNumber == true</test>
			<error>
				<message>Entry Frequency in HalftoneType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="24625"/>
			<description>Entry Frequency in HalftoneType1 is required</description>
			<test>containsFrequency == true</test>
			<error>
				<message>Entry Frequency in HalftoneType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="14" testNumber="24626"/>
			<description>Entry Frequency with type Number in HalftoneType1 shall satisfy possible value predicate: fn:Eval(@Frequency &gt;= 0)</description>
			<test>FrequencyHasTypeNumber != true || FrequencyNumberValue &gt;= 0</test>
			<error>
				<message>Entry Frequency with type Number in HalftoneType1 does not satisfy possible value predicate: fn:Eval(@Frequency &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24627"/>
			<description>Entry HalftoneName in HalftoneType1 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType1 is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24628"/>
			<description>Entry HalftoneType in HalftoneType1 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="24629"/>
			<description>Entry HalftoneType in HalftoneType1 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="24630"/>
			<description>Entry HalftoneType with type Integer in HalftoneType1 shall have value 1</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 1</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType1 has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24631"/>
			<description>Entry SpotFunction with type Array in HalftoneType1 shall be object ArrayOfFunctions</description>
			<test>SpotFunctionHasTypeArray != true || SpotFunction_size == 1</test>
			<error>
				<message>Entry SpotFunction with type Array in HalftoneType1 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24632"/>
			<description>Entry SpotFunction with type Stream in HalftoneType1 shall be one of objects FunctionType0, FunctionType4</description>
			<test>SpotFunctionHasTypeStream != true || SpotFunction_size == 1</test>
			<error>
				<message>Entry SpotFunction with type Stream in HalftoneType1 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24633"/>
			<description>Entry SpotFunction with type Dictionary in HalftoneType1 shall be one of objects FunctionType2, FunctionType3</description>
			<test>SpotFunctionHasTypeDictionary != true || SpotFunction_size == 1</test>
			<error>
				<message>Entry SpotFunction with type Dictionary in HalftoneType1 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24634"/>
			<description>Entry SpotFunction in HalftoneType1 shall have one of types: Array, Stream, Name, Dictionary</description>
			<test>containsSpotFunction == false || SpotFunctionHasTypeArray == true || SpotFunctionHasTypeStream == true || SpotFunctionHasTypeName == true || SpotFunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry SpotFunction in HalftoneType1 is not one of types: Array, Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="24635"/>
			<description>Entry SpotFunction in HalftoneType1 is required</description>
			<test>containsSpotFunction == true</test>
			<error>
				<message>Entry SpotFunction in HalftoneType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="10" testNumber="24636"/>
			<description>Entry SpotFunction with type Stream in HalftoneType1 shall be indirect</description>
			<test>SpotFunctionHasTypeStream != true || isSpotFunctionIndirect == true</test>
			<error>
				<message>Entry SpotFunction with type Stream in HalftoneType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="24637"/>
			<description>Entry SpotFunction with type Name in HalftoneType1 shall have one of values: Ellipse, LineX, SimpleDot, LineY, Cross, InvertedDouble, Diamond, InvertedDoubleDot, Square, Double, InvertedEllipseC, InvertedEllipseA, Line, CosineDot, InvertedSimpleDot, Round, EllipseA, DoubleDot, EllipseC, Rhomboid, EllipseB</description>
			<test>SpotFunctionHasTypeName != true || SpotFunctionNameValue == "SimpleDot" || SpotFunctionNameValue == "InvertedSimpleDot" || SpotFunctionNameValue == "DoubleDot" || SpotFunctionNameValue == "InvertedDoubleDot" || SpotFunctionNameValue == "CosineDot" || SpotFunctionNameValue == "Double" || SpotFunctionNameValue == "InvertedDouble" || SpotFunctionNameValue == "Line" || SpotFunctionNameValue == "LineX" || SpotFunctionNameValue == "LineY" || SpotFunctionNameValue == "Round" || SpotFunctionNameValue == "Ellipse" || SpotFunctionNameValue == "EllipseA" || SpotFunctionNameValue == "InvertedEllipseA" || SpotFunctionNameValue == "EllipseB" || SpotFunctionNameValue == "EllipseC" || SpotFunctionNameValue == "InvertedEllipseC" || SpotFunctionNameValue == "Square" || SpotFunctionNameValue == "Cross" || SpotFunctionNameValue == "Rhomboid" || SpotFunctionNameValue == "Diamond"</test>
			<error>
				<message>Entry SpotFunction with type Name in HalftoneType1 has incorrect value %2 instead of Ellipse, LineX, SimpleDot, LineY, Cross, InvertedDouble, Diamond, InvertedDoubleDot, Square, Double, InvertedEllipseC, InvertedEllipseA, Line, CosineDot, InvertedSimpleDot, Round, EllipseA, DoubleDot, EllipseC, Rhomboid, EllipseB</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SpotFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24638"/>
			<description>Entry TransferFunction with type Stream in HalftoneType1 shall be one of objects FunctionType0, FunctionType4</description>
			<test>TransferFunctionHasTypeStream != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType1 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24639"/>
			<description>Entry TransferFunction with type Dictionary in HalftoneType1 shall be one of objects FunctionType2, FunctionType3</description>
			<test>TransferFunctionHasTypeDictionary != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Dictionary in HalftoneType1 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24640"/>
			<description>Entry TransferFunction in HalftoneType1 shall have one of types: Stream, Name, Dictionary</description>
			<test>containsTransferFunction == false || TransferFunctionHasTypeStream == true || TransferFunctionHasTypeName == true || TransferFunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry TransferFunction in HalftoneType1 is not one of types: Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="11" testNumber="24641"/>
			<description>Entry TransferFunction in HalftoneType1 is required, when fn:IsRequired(parent::@HalftoneType== 5)</description>
			<test>(containsTransferFunction == true || (parentHalftoneTypeIntegerValue == 5) == false)</test>
			<error>
				<message>Entry TransferFunction in HalftoneType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="10" testNumber="24642"/>
			<description>Entry TransferFunction with type Stream in HalftoneType1 shall be indirect</description>
			<test>TransferFunctionHasTypeStream != true || isTransferFunctionIndirect == true</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="24643"/>
			<description>Entry TransferFunction with type Name in HalftoneType1 shall have value Identity</description>
			<test>TransferFunctionHasTypeName != true || TransferFunctionNameValue == "Identity"</test>
			<error>
				<message>Entry TransferFunction with type Name in HalftoneType1 has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransferFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24644"/>
			<description>Entry Type in HalftoneType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="24645"/>
			<description>Entry Type with type Name in HalftoneType1 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType1 has incorrect value %2 instead of Halftone</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="1" testNumber="24820"/>
			<description>HalftoneType10 shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, HalftoneName, HalftoneType, Length, TransferFunction, Type, Xsquare, Ysquare</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Xsquare' &amp;&amp; elem != 'Ysquare').length == 0</test>
			<error>
				<message>HalftoneType10 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Xsquare' &amp;&amp; elem != 'Ysquare').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24821"/>
			<description>Entry DL in HalftoneType10 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in HalftoneType10 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="9" testNumber="24822"/>
			<description>Entry DL with type Integer in HalftoneType10 shall satisfy special case: fn:Eval(@DL == ((@Xsquare * @Xsquare) + (@Ysquare * @Ysquare)))</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue == ((XsquareIntegerValue * XsquareIntegerValue) + (YsquareIntegerValue * YsquareIntegerValue)))</test>
			<error>
				<message>Entry DL with type Integer in HalftoneType10 does not satisfy special case: fn:Eval(@DL == ((@Xsquare * @Xsquare) + (@Ysquare * @Ysquare)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24823"/>
			<description>Entry DecodeParms with type Array in HalftoneType10 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType10 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24824"/>
			<description>Entry DecodeParms with type Dictionary in HalftoneType10 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in HalftoneType10 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24825"/>
			<description>Entry DecodeParms in HalftoneType10 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in HalftoneType10 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="9" testNumber="24826"/>
			<description>Entry DecodeParms with type Array in HalftoneType10 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType10 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24827"/>
			<description>Entry F with type Dictionary in HalftoneType10 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in HalftoneType10 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24828"/>
			<description>Entry F in HalftoneType10 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in HalftoneType10 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24829"/>
			<description>Entry FDecodeParms with type Array in HalftoneType10 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType10 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24830"/>
			<description>Entry FDecodeParms with type Dictionary in HalftoneType10 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in HalftoneType10 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24831"/>
			<description>Entry FDecodeParms in HalftoneType10 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in HalftoneType10 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="9" testNumber="24832"/>
			<description>Entry FDecodeParms with type Array in HalftoneType10 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType10 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24833"/>
			<description>Entry FFilter with type Array in HalftoneType10 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType10 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24834"/>
			<description>Entry FFilter in HalftoneType10 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in HalftoneType10 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="9" testNumber="24835"/>
			<description>Entry FFilter with type Array in HalftoneType10 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType10 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="6" testNumber="24836"/>
			<description>Entry FFilter with type Name in HalftoneType10 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in HalftoneType10 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24837"/>
			<description>Entry Filter with type Array in HalftoneType10 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType10 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24838"/>
			<description>Entry Filter in HalftoneType10 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in HalftoneType10 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="9" testNumber="24839"/>
			<description>Entry Filter with type Array in HalftoneType10 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType10 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="6" testNumber="24840"/>
			<description>Entry Filter with type Name in HalftoneType10 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in HalftoneType10 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24841"/>
			<description>Entry HalftoneName in HalftoneType10 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType10 is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24842"/>
			<description>Entry HalftoneType in HalftoneType10 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType10 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="7" testNumber="24843"/>
			<description>Entry HalftoneType in HalftoneType10 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType10 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="6" testNumber="24844"/>
			<description>Entry HalftoneType with type Integer in HalftoneType10 shall have value 10</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 10</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType10 has incorrect value %2 instead of 10</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24845"/>
			<description>Entry Length in HalftoneType10 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in HalftoneType10 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="7" testNumber="24846"/>
			<description>Entry Length in HalftoneType10 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in HalftoneType10 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24847"/>
			<description>Entry TransferFunction with type Stream in HalftoneType10 shall be one of objects FunctionType0, FunctionType4</description>
			<test>TransferFunctionHasTypeStream != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType10 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="17" testNumber="24848"/>
			<description>Entry TransferFunction with type Dictionary in HalftoneType10 shall be one of objects FunctionType2, FunctionType3</description>
			<test>TransferFunctionHasTypeDictionary != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Dictionary in HalftoneType10 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24849"/>
			<description>Entry TransferFunction in HalftoneType10 shall have one of types: Stream, Name, Dictionary</description>
			<test>containsTransferFunction == false || TransferFunctionHasTypeStream == true || TransferFunctionHasTypeName == true || TransferFunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry TransferFunction in HalftoneType10 is not one of types: Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="11" testNumber="24850"/>
			<description>Entry TransferFunction in HalftoneType10 is required, when fn:IsRequired(parent::@HalftoneType== 5)</description>
			<test>(containsTransferFunction == true || (parentHalftoneTypeIntegerValue == 5) == false)</test>
			<error>
				<message>Entry TransferFunction in HalftoneType10 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="10" testNumber="24851"/>
			<description>Entry TransferFunction with type Stream in HalftoneType10 shall be indirect</description>
			<test>TransferFunctionHasTypeStream != true || isTransferFunctionIndirect == true</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType10 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="6" testNumber="24852"/>
			<description>Entry TransferFunction with type Name in HalftoneType10 shall have value Identity</description>
			<test>TransferFunctionHasTypeName != true || TransferFunctionNameValue == "Identity"</test>
			<error>
				<message>Entry TransferFunction with type Name in HalftoneType10 has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransferFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24853"/>
			<description>Entry Type in HalftoneType10 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType10 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="6" testNumber="24854"/>
			<description>Entry Type with type Name in HalftoneType10 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType10 has incorrect value %2 instead of Halftone</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24855"/>
			<description>Entry Xsquare in HalftoneType10 shall have type Integer</description>
			<test>containsXsquare == false || XsquareHasTypeInteger == true</test>
			<error>
				<message>Entry Xsquare in HalftoneType10 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="7" testNumber="24856"/>
			<description>Entry Xsquare in HalftoneType10 is required</description>
			<test>containsXsquare == true</test>
			<error>
				<message>Entry Xsquare in HalftoneType10 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="14" testNumber="24857"/>
			<description>Entry Xsquare with type Integer in HalftoneType10 shall satisfy possible value predicate: fn:Eval(@Xsquare &gt; 0)</description>
			<test>XsquareHasTypeInteger != true || XsquareIntegerValue &gt; 0</test>
			<error>
				<message>Entry Xsquare with type Integer in HalftoneType10 does not satisfy possible value predicate: fn:Eval(@Xsquare &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="8" testNumber="24858"/>
			<description>Entry Ysquare in HalftoneType10 shall have type Integer</description>
			<test>containsYsquare == false || YsquareHasTypeInteger == true</test>
			<error>
				<message>Entry Ysquare in HalftoneType10 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="7" testNumber="24859"/>
			<description>Entry Ysquare in HalftoneType10 is required</description>
			<test>containsYsquare == true</test>
			<error>
				<message>Entry Ysquare in HalftoneType10 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_5" clause="14" testNumber="24860"/>
			<description>Entry Ysquare with type Integer in HalftoneType10 shall satisfy possible value predicate: fn:Eval(@Ysquare &gt; 0)</description>
			<test>YsquareHasTypeInteger != true || YsquareIntegerValue &gt; 0</test>
			<error>
				<message>Entry Ysquare with type Integer in HalftoneType10 does not satisfy possible value predicate: fn:Eval(@Ysquare &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="1" testNumber="25072"/>
			<description>HalftoneType16 shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, HalftoneName, HalftoneType, Height, Height2, Length, TransferFunction, Type, Width, Width2</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Height2' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'Width2').length == 0</test>
			<error>
				<message>HalftoneType16 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Height2' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'Width2').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25073"/>
			<description>Entry DL in HalftoneType16 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="9" testNumber="25074"/>
			<description>Entry DL with type Integer in HalftoneType16 shall satisfy special case: fn:Eval(@DL == (2 * (@Width * @Height) + (@Width2 * @Height2)))</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue == (2 * (WidthIntegerValue * HeightIntegerValue) + (Width2IntegerValue * Height2IntegerValue)))</test>
			<error>
				<message>Entry DL with type Integer in HalftoneType16 does not satisfy special case: fn:Eval(@DL == (2 * (@Width * @Height) + (@Width2 * @Height2)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25075"/>
			<description>Entry DecodeParms with type Array in HalftoneType16 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType16 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25076"/>
			<description>Entry DecodeParms with type Dictionary in HalftoneType16 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in HalftoneType16 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25077"/>
			<description>Entry DecodeParms in HalftoneType16 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in HalftoneType16 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="9" testNumber="25078"/>
			<description>Entry DecodeParms with type Array in HalftoneType16 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType16 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25079"/>
			<description>Entry F with type Dictionary in HalftoneType16 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in HalftoneType16 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25080"/>
			<description>Entry F in HalftoneType16 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in HalftoneType16 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25081"/>
			<description>Entry FDecodeParms with type Array in HalftoneType16 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType16 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25082"/>
			<description>Entry FDecodeParms with type Dictionary in HalftoneType16 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in HalftoneType16 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25083"/>
			<description>Entry FDecodeParms in HalftoneType16 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in HalftoneType16 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="9" testNumber="25084"/>
			<description>Entry FDecodeParms with type Array in HalftoneType16 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType16 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25085"/>
			<description>Entry FFilter with type Array in HalftoneType16 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType16 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25086"/>
			<description>Entry FFilter in HalftoneType16 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in HalftoneType16 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="9" testNumber="25087"/>
			<description>Entry FFilter with type Array in HalftoneType16 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType16 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25088"/>
			<description>Entry FFilter with type Name in HalftoneType16 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in HalftoneType16 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25089"/>
			<description>Entry Filter with type Array in HalftoneType16 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType16 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25090"/>
			<description>Entry Filter in HalftoneType16 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in HalftoneType16 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="9" testNumber="25091"/>
			<description>Entry Filter with type Array in HalftoneType16 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType16 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25092"/>
			<description>Entry Filter with type Name in HalftoneType16 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in HalftoneType16 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25093"/>
			<description>Entry HalftoneName in HalftoneType16 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType16 is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25094"/>
			<description>Entry HalftoneType in HalftoneType16 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="7" testNumber="25095"/>
			<description>Entry HalftoneType in HalftoneType16 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType16 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25096"/>
			<description>Entry HalftoneType with type Integer in HalftoneType16 shall have value 16</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 16</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType16 has incorrect value %2 instead of 16</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25097"/>
			<description>Entry Height in HalftoneType16 shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="7" testNumber="25098"/>
			<description>Entry Height in HalftoneType16 is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in HalftoneType16 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="14" testNumber="25099"/>
			<description>Entry Height with type Integer in HalftoneType16 shall satisfy possible value predicate: fn:Eval(@Height &gt; 0)</description>
			<test>HeightHasTypeInteger != true || HeightIntegerValue &gt; 0</test>
			<error>
				<message>Entry Height with type Integer in HalftoneType16 does not satisfy possible value predicate: fn:Eval(@Height &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25100"/>
			<description>Entry Height2 in HalftoneType16 shall have type Integer</description>
			<test>containsHeight2 == false || Height2HasTypeInteger == true</test>
			<error>
				<message>Entry Height2 in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="14" testNumber="25101"/>
			<description>Entry Height2 with type Integer in HalftoneType16 shall satisfy possible value predicate: fn:Eval(@Height2 &gt; 0)</description>
			<test>Height2HasTypeInteger != true || Height2IntegerValue &gt; 0</test>
			<error>
				<message>Entry Height2 with type Integer in HalftoneType16 does not satisfy possible value predicate: fn:Eval(@Height2 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="9" testNumber="25102"/>
			<description>Entry Height2 with type Integer in HalftoneType16 shall satisfy special case: fn:IsPresent(Width2)</description>
			<test>Height2HasTypeInteger != true || ((containsWidth2 == true))</test>
			<error>
				<message>Entry Height2 with type Integer in HalftoneType16 does not satisfy special case: fn:IsPresent(Width2)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25103"/>
			<description>Entry Length in HalftoneType16 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="7" testNumber="25104"/>
			<description>Entry Length in HalftoneType16 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in HalftoneType16 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25105"/>
			<description>Entry TransferFunction with type Stream in HalftoneType16 shall be one of objects FunctionType0, FunctionType4</description>
			<test>TransferFunctionHasTypeStream != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType16 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25106"/>
			<description>Entry TransferFunction with type Dictionary in HalftoneType16 shall be one of objects FunctionType2, FunctionType3</description>
			<test>TransferFunctionHasTypeDictionary != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Dictionary in HalftoneType16 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25107"/>
			<description>Entry TransferFunction in HalftoneType16 shall have one of types: Stream, Name, Dictionary</description>
			<test>containsTransferFunction == false || TransferFunctionHasTypeStream == true || TransferFunctionHasTypeName == true || TransferFunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry TransferFunction in HalftoneType16 is not one of types: Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="11" testNumber="25108"/>
			<description>Entry TransferFunction in HalftoneType16 is required, when fn:IsRequired(parent::@HalftoneType== 5)</description>
			<test>(containsTransferFunction == true || (parentHalftoneTypeIntegerValue == 5) == false)</test>
			<error>
				<message>Entry TransferFunction in HalftoneType16 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="10" testNumber="25109"/>
			<description>Entry TransferFunction with type Stream in HalftoneType16 shall be indirect</description>
			<test>TransferFunctionHasTypeStream != true || isTransferFunctionIndirect == true</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType16 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25110"/>
			<description>Entry TransferFunction with type Name in HalftoneType16 shall have value Identity</description>
			<test>TransferFunctionHasTypeName != true || TransferFunctionNameValue == "Identity"</test>
			<error>
				<message>Entry TransferFunction with type Name in HalftoneType16 has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransferFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25111"/>
			<description>Entry Type in HalftoneType16 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType16 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25112"/>
			<description>Entry Type with type Name in HalftoneType16 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType16 has incorrect value %2 instead of Halftone</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25113"/>
			<description>Entry Width in HalftoneType16 shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="7" testNumber="25114"/>
			<description>Entry Width in HalftoneType16 is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in HalftoneType16 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="14" testNumber="25115"/>
			<description>Entry Width with type Integer in HalftoneType16 shall satisfy possible value predicate: fn:Eval(@Width &gt; 0)</description>
			<test>WidthHasTypeInteger != true || WidthIntegerValue &gt; 0</test>
			<error>
				<message>Entry Width with type Integer in HalftoneType16 does not satisfy possible value predicate: fn:Eval(@Width &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25116"/>
			<description>Entry Width2 in HalftoneType16 shall have type Integer</description>
			<test>containsWidth2 == false || Width2HasTypeInteger == true</test>
			<error>
				<message>Entry Width2 in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_5" clause="14" testNumber="25117"/>
			<description>Entry Width2 with type Integer in HalftoneType16 shall satisfy possible value predicate: fn:Eval(@Width2 &gt; 0)</description>
			<test>Width2HasTypeInteger != true || Width2IntegerValue &gt; 0</test>
			<error>
				<message>Entry Width2 with type Integer in HalftoneType16 does not satisfy possible value predicate: fn:Eval(@Width2 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25289"/>
			<description>Entry Default with type Stream in HalftoneType5 shall be one of objects HalftoneType6, HalftoneType10, HalftoneType16</description>
			<test>DefaultHasTypeStream != true || Default_size == 1</test>
			<error>
				<message>Entry Default with type Stream in HalftoneType5 is not one of objects HalftoneType6, HalftoneType10, HalftoneType16</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25290"/>
			<description>Entry Default with type Dictionary in HalftoneType5 shall be object HalftoneType1</description>
			<test>DefaultHasTypeDictionary != true || Default_size == 1</test>
			<error>
				<message>Entry Default with type Dictionary in HalftoneType5 is not object HalftoneType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25291"/>
			<description>Entry Default in HalftoneType5 shall have one of types: Stream, Dictionary</description>
			<test>containsDefault == false || DefaultHasTypeStream == true || DefaultHasTypeDictionary == true</test>
			<error>
				<message>Entry Default in HalftoneType5 is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_5" clause="7" testNumber="25292"/>
			<description>Entry Default in HalftoneType5 is required</description>
			<test>containsDefault == true</test>
			<error>
				<message>Entry Default in HalftoneType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_5" clause="10" testNumber="25293"/>
			<description>Entry Default with type Stream in HalftoneType5 shall be indirect</description>
			<test>DefaultHasTypeStream != true || isDefaultIndirect == true</test>
			<error>
				<message>Entry Default with type Stream in HalftoneType5 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25294"/>
			<description>Entry HalftoneName in HalftoneType5 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType5 is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25295"/>
			<description>Entry HalftoneType in HalftoneType5 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_5" clause="7" testNumber="25296"/>
			<description>Entry HalftoneType in HalftoneType5 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25297"/>
			<description>Entry HalftoneType with type Integer in HalftoneType5 shall have value 5</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 5</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType5 has incorrect value %2 instead of 5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25298"/>
			<description>Entry Type in HalftoneType5 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType5 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25299"/>
			<description>Entry Type with type Name in HalftoneType5 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType5 has incorrect value %2 instead of Halftone</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5Entry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25345"/>
			<description>Entry with type Stream in HalftoneType5 shall be one of objects HalftoneType6, HalftoneType10, HalftoneType16</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in HalftoneType5 is not one of objects HalftoneType6, HalftoneType10, HalftoneType16</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5Entry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25346"/>
			<description>Entry with type Dictionary in HalftoneType5 shall be object HalftoneType1</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in HalftoneType5 is not object HalftoneType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5Entry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25347"/>
			<description>Entry in HalftoneType5 shall have one of types: Stream, Dictionary</description>
			<test>HasTypeStream == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in HalftoneType5 is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5Entry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="25348"/>
			<description>Entry with type Stream in HalftoneType5 shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in HalftoneType5 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="1" testNumber="25454"/>
			<description>HalftoneType6 shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, HalftoneName, HalftoneType, Height, Length, TransferFunction, Type, Width</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width').length == 0</test>
			<error>
				<message>HalftoneType6 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25455"/>
			<description>Entry DL in HalftoneType6 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in HalftoneType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="9" testNumber="25456"/>
			<description>Entry DL with type Integer in HalftoneType6 shall satisfy special case: fn:Eval(@DL == (@Width * @Height))</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue == (WidthIntegerValue * HeightIntegerValue))</test>
			<error>
				<message>Entry DL with type Integer in HalftoneType6 does not satisfy special case: fn:Eval(@DL == (@Width * @Height))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25457"/>
			<description>Entry DecodeParms with type Array in HalftoneType6 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType6 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25458"/>
			<description>Entry DecodeParms with type Dictionary in HalftoneType6 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in HalftoneType6 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25459"/>
			<description>Entry DecodeParms in HalftoneType6 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in HalftoneType6 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="9" testNumber="25460"/>
			<description>Entry DecodeParms with type Array in HalftoneType6 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType6 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25461"/>
			<description>Entry F with type Dictionary in HalftoneType6 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in HalftoneType6 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25462"/>
			<description>Entry F in HalftoneType6 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in HalftoneType6 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25463"/>
			<description>Entry FDecodeParms with type Array in HalftoneType6 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType6 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25464"/>
			<description>Entry FDecodeParms with type Dictionary in HalftoneType6 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in HalftoneType6 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25465"/>
			<description>Entry FDecodeParms in HalftoneType6 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in HalftoneType6 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="9" testNumber="25466"/>
			<description>Entry FDecodeParms with type Array in HalftoneType6 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType6 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25467"/>
			<description>Entry FFilter with type Array in HalftoneType6 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType6 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25468"/>
			<description>Entry FFilter in HalftoneType6 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in HalftoneType6 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="9" testNumber="25469"/>
			<description>Entry FFilter with type Array in HalftoneType6 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType6 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25470"/>
			<description>Entry FFilter with type Name in HalftoneType6 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in HalftoneType6 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25471"/>
			<description>Entry Filter with type Array in HalftoneType6 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType6 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25472"/>
			<description>Entry Filter in HalftoneType6 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in HalftoneType6 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="9" testNumber="25473"/>
			<description>Entry Filter with type Array in HalftoneType6 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType6 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25474"/>
			<description>Entry Filter with type Name in HalftoneType6 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in HalftoneType6 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25475"/>
			<description>Entry HalftoneName in HalftoneType6 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType6 is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25476"/>
			<description>Entry HalftoneType in HalftoneType6 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="7" testNumber="25477"/>
			<description>Entry HalftoneType in HalftoneType6 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25478"/>
			<description>Entry HalftoneType with type Integer in HalftoneType6 shall have value 6</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 6</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType6 has incorrect value %2 instead of 6</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25479"/>
			<description>Entry Height in HalftoneType6 shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in HalftoneType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="7" testNumber="25480"/>
			<description>Entry Height in HalftoneType6 is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in HalftoneType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="14" testNumber="25481"/>
			<description>Entry Height with type Integer in HalftoneType6 shall satisfy possible value predicate: fn:Eval(@Height &gt;= 0)</description>
			<test>HeightHasTypeInteger != true || HeightIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Height with type Integer in HalftoneType6 does not satisfy possible value predicate: fn:Eval(@Height &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25482"/>
			<description>Entry Length in HalftoneType6 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in HalftoneType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="7" testNumber="25483"/>
			<description>Entry Length in HalftoneType6 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in HalftoneType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25484"/>
			<description>Entry TransferFunction with type Stream in HalftoneType6 shall be one of objects FunctionType0, FunctionType4</description>
			<test>TransferFunctionHasTypeStream != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType6 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25485"/>
			<description>Entry TransferFunction with type Dictionary in HalftoneType6 shall be one of objects FunctionType2, FunctionType3</description>
			<test>TransferFunctionHasTypeDictionary != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Dictionary in HalftoneType6 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25486"/>
			<description>Entry TransferFunction in HalftoneType6 shall have one of types: Stream, Name, Dictionary</description>
			<test>containsTransferFunction == false || TransferFunctionHasTypeStream == true || TransferFunctionHasTypeName == true || TransferFunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry TransferFunction in HalftoneType6 is not one of types: Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="10" testNumber="25487"/>
			<description>Entry TransferFunction with type Stream in HalftoneType6 shall be indirect</description>
			<test>TransferFunctionHasTypeStream != true || isTransferFunctionIndirect == true</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType6 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25488"/>
			<description>Entry TransferFunction with type Name in HalftoneType6 shall have value Identity</description>
			<test>TransferFunctionHasTypeName != true || TransferFunctionNameValue == "Identity"</test>
			<error>
				<message>Entry TransferFunction with type Name in HalftoneType6 has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransferFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25489"/>
			<description>Entry Type in HalftoneType6 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType6 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25490"/>
			<description>Entry Type with type Name in HalftoneType6 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType6 has incorrect value %2 instead of Halftone</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25491"/>
			<description>Entry Width in HalftoneType6 shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in HalftoneType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="7" testNumber="25492"/>
			<description>Entry Width in HalftoneType6 is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in HalftoneType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_5" clause="14" testNumber="25493"/>
			<description>Entry Width with type Integer in HalftoneType6 shall satisfy possible value predicate: fn:Eval(@Width &gt; 0)</description>
			<test>WidthHasTypeInteger != true || WidthIntegerValue &gt; 0</test>
			<error>
				<message>Entry Width with type Integer in HalftoneType6 does not satisfy possible value predicate: fn:Eval(@Width &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_5" clause="2" testNumber="25626"/>
			<description>ICCBasedColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ICCBasedColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25627"/>
			<description>Entry 0 in ICCBasedColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ICCBasedColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25628"/>
			<description>Entry 0 with type Name in ICCBasedColorSpace shall have value ICCBased</description>
			<test>entry0HasTypeName != true || entry0NameValue == "ICCBased"</test>
			<error>
				<message>Entry 0 with type Name in ICCBasedColorSpace has incorrect value %2 instead of ICCBased</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25629"/>
			<description>Entry 1 with type Stream in ICCBasedColorSpace shall be object ICCProfileStream</description>
			<test>entry1HasTypeStream != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Stream in ICCBasedColorSpace is not object ICCProfileStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25630"/>
			<description>Entry 1 in ICCBasedColorSpace shall have type Stream</description>
			<test>size &lt;= 1 || entry1HasTypeStream == true</test>
			<error>
				<message>Entry 1 in ICCBasedColorSpace is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_5" clause="10" testNumber="25631"/>
			<description>Entry 1 with type Stream in ICCBasedColorSpace shall be indirect</description>
			<test>entry1HasTypeStream != true || isentry1Indirect == true</test>
			<error>
				<message>Entry 1 with type Stream in ICCBasedColorSpace is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="1" testNumber="25713"/>
			<description>ICCProfileStream shall not contain entries except Alternate, DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Metadata, N, Range</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Alternate' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Range').length == 0</test>
			<error>
				<message>ICCProfileStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Alternate' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Range').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25714"/>
			<description>Entry Alternate with type Array in ICCProfileStream shall be one of objects CalGrayColorSpace, CalRGBColorSpace, DeviceNColorSpace, IndexedColorSpace, LabColorSpace, SeparationColorSpace</description>
			<test>AlternateHasTypeArray != true || Alternate_size == 1</test>
			<error>
				<message>Entry Alternate with type Array in ICCProfileStream is not one of objects CalGrayColorSpace, CalRGBColorSpace, DeviceNColorSpace, IndexedColorSpace, LabColorSpace, SeparationColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25715"/>
			<description>Entry Alternate in ICCProfileStream shall have one of types: Array, Name</description>
			<test>containsAlternate == false || AlternateHasTypeArray == true || AlternateHasTypeName == true</test>
			<error>
				<message>Entry Alternate in ICCProfileStream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25716"/>
			<description>Entry Alternate with type Name in ICCProfileStream shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>AlternateHasTypeName != true || AlternateNameValue == "DeviceGray" || AlternateNameValue == "DeviceRGB" || AlternateNameValue == "DeviceCMYK"</test>
			<error>
				<message>Entry Alternate with type Name in ICCProfileStream has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>AlternateNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25717"/>
			<description>Entry DL in ICCProfileStream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in ICCProfileStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="25718"/>
			<description>Entry DL with type Integer in ICCProfileStream shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in ICCProfileStream does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25719"/>
			<description>Entry DecodeParms with type Array in ICCProfileStream shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in ICCProfileStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25720"/>
			<description>Entry DecodeParms with type Dictionary in ICCProfileStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ICCProfileStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25721"/>
			<description>Entry DecodeParms in ICCProfileStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ICCProfileStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="25722"/>
			<description>Entry DecodeParms with type Array in ICCProfileStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ICCProfileStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25723"/>
			<description>Entry F with type Dictionary in ICCProfileStream shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ICCProfileStream is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25724"/>
			<description>Entry F in ICCProfileStream shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ICCProfileStream is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25725"/>
			<description>Entry FDecodeParms with type Array in ICCProfileStream shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in ICCProfileStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25726"/>
			<description>Entry FDecodeParms with type Dictionary in ICCProfileStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ICCProfileStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25727"/>
			<description>Entry FDecodeParms in ICCProfileStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ICCProfileStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="25728"/>
			<description>Entry FDecodeParms with type Array in ICCProfileStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ICCProfileStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25729"/>
			<description>Entry FFilter with type Array in ICCProfileStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in ICCProfileStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25730"/>
			<description>Entry FFilter in ICCProfileStream shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in ICCProfileStream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="25731"/>
			<description>Entry FFilter with type Array in ICCProfileStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ICCProfileStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25732"/>
			<description>Entry FFilter with type Name in ICCProfileStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in ICCProfileStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25733"/>
			<description>Entry Filter with type Array in ICCProfileStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in ICCProfileStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25734"/>
			<description>Entry Filter in ICCProfileStream shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in ICCProfileStream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="25735"/>
			<description>Entry Filter with type Array in ICCProfileStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ICCProfileStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25736"/>
			<description>Entry Filter with type Name in ICCProfileStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in ICCProfileStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25737"/>
			<description>Entry Length in ICCProfileStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ICCProfileStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="7" testNumber="25738"/>
			<description>Entry Length in ICCProfileStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ICCProfileStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25739"/>
			<description>Entry Metadata with type Stream in ICCProfileStream shall be object Metadata</description>
			<test>MetadataHasTypeStream != true || Metadata_size == 1</test>
			<error>
				<message>Entry Metadata with type Stream in ICCProfileStream is not object Metadata</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25740"/>
			<description>Entry Metadata in ICCProfileStream shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in ICCProfileStream is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="10" testNumber="25741"/>
			<description>Entry Metadata with type Stream in ICCProfileStream shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in ICCProfileStream is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25742"/>
			<description>Entry N in ICCProfileStream shall have type Integer</description>
			<test>containsN == false || NHasTypeInteger == true</test>
			<error>
				<message>Entry N in ICCProfileStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="7" testNumber="25743"/>
			<description>Entry N in ICCProfileStream is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in ICCProfileStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25744"/>
			<description>Entry N with type Integer in ICCProfileStream shall have one of values: 1, 3, 4</description>
			<test>NHasTypeInteger != true || NIntegerValue == 1 || NIntegerValue == 3 || NIntegerValue == 4</test>
			<error>
				<message>Entry N with type Integer in ICCProfileStream has incorrect value %2 instead of 1, 3, 4</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25745"/>
			<description>Entry Range with type Array in ICCProfileStream shall be object ArrayOfNumbersGeneral</description>
			<test>RangeHasTypeArray != true || Range_size == 1</test>
			<error>
				<message>Entry Range with type Array in ICCProfileStream is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25746"/>
			<description>Entry Range in ICCProfileStream shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in ICCProfileStream is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="25747"/>
			<description>Entry Range with type Array in ICCProfileStream shall satisfy special case: fn:Eval(fn:ArrayLength(Range) == (2 * @N))</description>
			<test>RangeHasTypeArray != true || (RangeArraySize == (2 * NIntegerValue))</test>
			<error>
				<message>Entry Range with type Array in ICCProfileStream does not satisfy special case: fn:Eval(fn:ArrayLength(Range) == (2 * @N))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_5" clause="1" testNumber="25869"/>
			<description>IconFit shall not contain entries except A, FB, S, SW</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'FB' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SW').length == 0</test>
			<error>
				<message>IconFit contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'FB' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SW').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25870"/>
			<description>Entry A with type Array in IconFit shall be object ArrayOf_2Numbers</description>
			<test>AHasTypeArray != true || A_size == 1</test>
			<error>
				<message>Entry A with type Array in IconFit is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25871"/>
			<description>Entry A in IconFit shall have type Array</description>
			<test>containsA == false || AHasTypeArray == true</test>
			<error>
				<message>Entry A in IconFit is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_5" clause="9" testNumber="25872"/>
			<description>Entry A with type Array in IconFit shall satisfy special case: fn:Eval((A::@0&gt;= 0) &amp;&amp; (A::@0&lt;= 1) &amp;&amp; (A::@1&gt;= 0) &amp;&amp; (A::@1&lt;= 1))</description>
			<test>AHasTypeArray != true || ((A0NumberValue &gt;= 0) &amp;&amp; (A0NumberValue &lt;= 1) &amp;&amp; (A1NumberValue &gt;= 0) &amp;&amp; (A1NumberValue &lt;= 1))</test>
			<error>
				<message>Entry A with type Array in IconFit does not satisfy special case: fn:Eval((A::@0&gt;= 0) &amp;&amp; (A::@0&lt;= 1) &amp;&amp; (A::@1&gt;= 0) &amp;&amp; (A::@1&lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25873"/>
			<description>Entry FB in IconFit shall have type Boolean</description>
			<test>containsFB == false || FBHasTypeBoolean == true</test>
			<error>
				<message>Entry FB in IconFit is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25874"/>
			<description>Entry S in IconFit shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in IconFit is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25875"/>
			<description>Entry S with type Name in IconFit shall have one of values: P, A</description>
			<test>SHasTypeName != true || SNameValue == "A" || SNameValue == "P"</test>
			<error>
				<message>Entry S with type Name in IconFit has incorrect value %2 instead of P, A</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25876"/>
			<description>Entry SW in IconFit shall have type Name</description>
			<test>containsSW == false || SWHasTypeName == true</test>
			<error>
				<message>Entry SW in IconFit is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25877"/>
			<description>Entry SW with type Name in IconFit shall have one of values: A, B, S, N</description>
			<test>SWHasTypeName != true || SWNameValue == "A" || SWNameValue == "B" || SWNameValue == "S" || SWNameValue == "N"</test>
			<error>
				<message>Entry SW with type Name in IconFit has incorrect value %2 instead of A, B, S, N</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SWNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_5" clause="2" testNumber="25959"/>
			<description>IndexedColorSpace shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>IndexedColorSpace contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25960"/>
			<description>Entry 0 in IndexedColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in IndexedColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25961"/>
			<description>Entry 0 with type Name in IndexedColorSpace shall have value Indexed</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Indexed"</test>
			<error>
				<message>Entry 0 with type Name in IndexedColorSpace has incorrect value %2 instead of Indexed</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25962"/>
			<description>Entry 1 with type Array in IndexedColorSpace shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>entry1HasTypeArray != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Array in IndexedColorSpace is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25963"/>
			<description>Entry 1 in IndexedColorSpace shall have one of types: Array, Name</description>
			<test>size &lt;= 1 || entry1HasTypeArray == true || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in IndexedColorSpace is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_5" clause="6" testNumber="25964"/>
			<description>Entry 1 with type Name in IndexedColorSpace shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>entry1HasTypeName != true || entry1NameValue == "DeviceCMYK" || entry1NameValue == "DeviceRGB" || entry1NameValue == "DeviceGray"</test>
			<error>
				<message>Entry 1 with type Name in IndexedColorSpace has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25965"/>
			<description>Entry 2 in IndexedColorSpace shall have type Integer</description>
			<test>size &lt;= 2 || entry2HasTypeInteger == true</test>
			<error>
				<message>Entry 2 in IndexedColorSpace is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_5" clause="14" testNumber="25966"/>
			<description>Entry 2 with type Integer in IndexedColorSpace shall satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 255))</description>
			<test>entry2HasTypeInteger != true || (entry2IntegerValue &gt;= 0) &amp;&amp; (entry2IntegerValue &lt;= 255)</test>
			<error>
				<message>Entry 2 with type Integer in IndexedColorSpace does not satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 255))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_5" clause="17" testNumber="25967"/>
			<description>Entry 3 with type Stream in IndexedColorSpace shall be object Stream</description>
			<test>entry3HasTypeStream != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Stream in IndexedColorSpace is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="25968"/>
			<description>Entry 3 in IndexedColorSpace shall have one of types: Stream, String</description>
			<test>size &lt;= 3 || entry3HasTypeStream == true || entry3HasTypeString == true</test>
			<error>
				<message>Entry 3 in IndexedColorSpace is not one of types: Stream, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_5" clause="10" testNumber="25969"/>
			<description>Entry 3 with type Stream in IndexedColorSpace shall be indirect</description>
			<test>entry3HasTypeStream != true || isentry3Indirect == true</test>
			<error>
				<message>Entry 3 with type Stream in IndexedColorSpace is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_5" clause="1" testNumber="26041"/>
			<description>InteractiveForm shall not contain entries except CO, DA, DR, Fields, NeedAppearances, Q, SigFlags, XFA</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CO' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DR' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'NeedAppearances' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'SigFlags' &amp;&amp; elem != 'XFA').length == 0</test>
			<error>
				<message>InteractiveForm contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CO' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DR' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'NeedAppearances' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'SigFlags' &amp;&amp; elem != 'XFA').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26042"/>
			<description>Entry CO with type Array in InteractiveForm shall be object ArrayOfFields</description>
			<test>COHasTypeArray != true || CO_size == 1</test>
			<error>
				<message>Entry CO with type Array in InteractiveForm is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26043"/>
			<description>Entry CO in InteractiveForm shall have type Array</description>
			<test>containsCO == false || COHasTypeArray == true</test>
			<error>
				<message>Entry CO in InteractiveForm is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26044"/>
			<description>Entry DA in InteractiveForm shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in InteractiveForm is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26045"/>
			<description>Entry DR with type Dictionary in InteractiveForm shall be object Resource</description>
			<test>DRHasTypeDictionary != true || DR_size == 1</test>
			<error>
				<message>Entry DR with type Dictionary in InteractiveForm is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26046"/>
			<description>Entry DR in InteractiveForm shall have type Dictionary</description>
			<test>containsDR == false || DRHasTypeDictionary == true</test>
			<error>
				<message>Entry DR in InteractiveForm is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26047"/>
			<description>Entry Fields with type Array in InteractiveForm shall be object ArrayOfFields</description>
			<test>FieldsHasTypeArray != true || Fields_size == 1</test>
			<error>
				<message>Entry Fields with type Array in InteractiveForm is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26048"/>
			<description>Entry Fields in InteractiveForm shall have type Array</description>
			<test>containsFields == false || FieldsHasTypeArray == true</test>
			<error>
				<message>Entry Fields in InteractiveForm is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_5" clause="7" testNumber="26049"/>
			<description>Entry Fields in InteractiveForm is required</description>
			<test>containsFields == true</test>
			<error>
				<message>Entry Fields in InteractiveForm is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26050"/>
			<description>Entry NeedAppearances in InteractiveForm shall have type Boolean</description>
			<test>containsNeedAppearances == false || NeedAppearancesHasTypeBoolean == true</test>
			<error>
				<message>Entry NeedAppearances in InteractiveForm is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26051"/>
			<description>Entry Q in InteractiveForm shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in InteractiveForm is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_5" clause="6" testNumber="26052"/>
			<description>Entry Q with type Integer in InteractiveForm shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in InteractiveForm has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26053"/>
			<description>Entry SigFlags in InteractiveForm shall have type Bitmask</description>
			<test>containsSigFlags == false || SigFlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry SigFlags in InteractiveForm is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26054"/>
			<description>Entry SigFlags with type Bitmask in InteractiveForm shall satisfy special case: fn:Eval(fn:BitsClear(3 , 32))</description>
			<test>SigFlagsHasTypeBitmask != true || (((SigFlagsBitmaskValue &gt;&gt; 2 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry SigFlags with type Bitmask in InteractiveForm does not satisfy special case: fn:Eval(fn:BitsClear(3 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26055"/>
			<description>Entry XFA with type Stream in InteractiveForm shall be object Stream</description>
			<test>XFAHasTypeStream != true || XFA_size == 1</test>
			<error>
				<message>Entry XFA with type Stream in InteractiveForm is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26056"/>
			<description>Entry XFA in InteractiveForm shall have type Stream</description>
			<test>containsXFA == false || XFAHasTypeStream == true</test>
			<error>
				<message>Entry XFA in InteractiveForm is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_5" clause="10" testNumber="26057"/>
			<description>Entry XFA with type Stream in InteractiveForm shall be indirect</description>
			<test>XFAHasTypeStream != true || isXFAIndirect == true</test>
			<error>
				<message>Entry XFA with type Stream in InteractiveForm is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_5" clause="2" testNumber="26132"/>
			<description>LabColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>LabColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26133"/>
			<description>Entry 0 in LabColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in LabColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_5" clause="6" testNumber="26134"/>
			<description>Entry 0 with type Name in LabColorSpace shall have value Lab</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Lab"</test>
			<error>
				<message>Entry 0 with type Name in LabColorSpace has incorrect value %2 instead of Lab</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26135"/>
			<description>Entry 1 with type Dictionary in LabColorSpace shall be object LabDict</description>
			<test>entry1HasTypeDictionary != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Dictionary in LabColorSpace is not object LabDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26136"/>
			<description>Entry 1 in LabColorSpace shall have type Dictionary</description>
			<test>size &lt;= 1 || entry1HasTypeDictionary == true</test>
			<error>
				<message>Entry 1 in LabColorSpace is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_5" clause="1" testNumber="26184"/>
			<description>LabDict shall not contain entries except BlackPoint, Range, WhitePoint</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'WhitePoint').length == 0</test>
			<error>
				<message>LabDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'WhitePoint').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26185"/>
			<description>Entry BlackPoint with type Array in LabDict shall be object BlackpointArray</description>
			<test>BlackPointHasTypeArray != true || BlackPoint_size == 1</test>
			<error>
				<message>Entry BlackPoint with type Array in LabDict is not object BlackpointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26186"/>
			<description>Entry BlackPoint in LabDict shall have type Array</description>
			<test>containsBlackPoint == false || BlackPointHasTypeArray == true</test>
			<error>
				<message>Entry BlackPoint in LabDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26187"/>
			<description>Entry Range with type Array in LabDict shall be object LabRangeArray</description>
			<test>RangeHasTypeArray != true || Range_size == 1</test>
			<error>
				<message>Entry Range with type Array in LabDict is not object LabRangeArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26188"/>
			<description>Entry Range in LabDict shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in LabDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26189"/>
			<description>Entry WhitePoint with type Array in LabDict shall be object WhitepointArray</description>
			<test>WhitePointHasTypeArray != true || WhitePoint_size == 1</test>
			<error>
				<message>Entry WhitePoint with type Array in LabDict is not object WhitepointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26190"/>
			<description>Entry WhitePoint in LabDict shall have type Array</description>
			<test>containsWhitePoint == false || WhitePointHasTypeArray == true</test>
			<error>
				<message>Entry WhitePoint in LabDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_5" clause="7" testNumber="26191"/>
			<description>Entry WhitePoint in LabDict is required</description>
			<test>containsWhitePoint == true</test>
			<error>
				<message>Entry WhitePoint in LabDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_5" clause="2" testNumber="26252"/>
			<description>LabRangeArray shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>LabRangeArray contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26253"/>
			<description>Entry 0 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in LabRangeArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_5" clause="14" testNumber="26254"/>
			<description>Entry 0 with type Number in LabRangeArray shall satisfy possible value predicate: fn:Eval(@0 &lt;= @1)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &lt;= entry1NumberValue</test>
			<error>
				<message>Entry 0 with type Number in LabRangeArray does not satisfy possible value predicate: fn:Eval(@0 &lt;= @1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26255"/>
			<description>Entry 1 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in LabRangeArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_5" clause="14" testNumber="26256"/>
			<description>Entry 1 with type Number in LabRangeArray shall satisfy possible value predicate: fn:Eval(@1 &gt;= @0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= entry0NumberValue</test>
			<error>
				<message>Entry 1 with type Number in LabRangeArray does not satisfy possible value predicate: fn:Eval(@1 &gt;= @0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26257"/>
			<description>Entry 2 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in LabRangeArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_5" clause="14" testNumber="26258"/>
			<description>Entry 2 with type Number in LabRangeArray shall satisfy possible value predicate: fn:Eval(@2 &lt;= @3)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &lt;= entry3NumberValue</test>
			<error>
				<message>Entry 2 with type Number in LabRangeArray does not satisfy possible value predicate: fn:Eval(@2 &lt;= @3)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26259"/>
			<description>Entry 3 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in LabRangeArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_5" clause="14" testNumber="26260"/>
			<description>Entry 3 with type Number in LabRangeArray shall satisfy possible value predicate: fn:Eval(@3 &gt;= @2)</description>
			<test>entry3HasTypeNumber != true || entry3NumberValue &gt;= entry2NumberValue</test>
			<error>
				<message>Entry 3 with type Number in LabRangeArray does not satisfy possible value predicate: fn:Eval(@3 &gt;= @2)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="1" testNumber="26288"/>
			<description>LegalAttestation shall not contain entries except AlternateImages, Annotations, Attestation, DevDepGS_BG, DevDepGS_FL, DevDepGS_HT, DevDepGS_OP, DevDepGS_TR, DevDepGS_UCR, ExternalOPIdicts, ExternalRefXobjects, ExternalStreams, GoToRemoteActions, HideAnnotationActions, JavaScriptActions, LaunchActions, MovieActions, NonEmbeddedFonts, OptionalContent, SoundActions, TrueTypeFonts, URIActions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AlternateImages' &amp;&amp; elem != 'Annotations' &amp;&amp; elem != 'Attestation' &amp;&amp; elem != 'DevDepGS_BG' &amp;&amp; elem != 'DevDepGS_FL' &amp;&amp; elem != 'DevDepGS_HT' &amp;&amp; elem != 'DevDepGS_OP' &amp;&amp; elem != 'DevDepGS_TR' &amp;&amp; elem != 'DevDepGS_UCR' &amp;&amp; elem != 'ExternalOPIdicts' &amp;&amp; elem != 'ExternalRefXobjects' &amp;&amp; elem != 'ExternalStreams' &amp;&amp; elem != 'GoToRemoteActions' &amp;&amp; elem != 'HideAnnotationActions' &amp;&amp; elem != 'JavaScriptActions' &amp;&amp; elem != 'LaunchActions' &amp;&amp; elem != 'MovieActions' &amp;&amp; elem != 'NonEmbeddedFonts' &amp;&amp; elem != 'OptionalContent' &amp;&amp; elem != 'SoundActions' &amp;&amp; elem != 'TrueTypeFonts' &amp;&amp; elem != 'URIActions').length == 0</test>
			<error>
				<message>LegalAttestation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AlternateImages' &amp;&amp; elem != 'Annotations' &amp;&amp; elem != 'Attestation' &amp;&amp; elem != 'DevDepGS_BG' &amp;&amp; elem != 'DevDepGS_FL' &amp;&amp; elem != 'DevDepGS_HT' &amp;&amp; elem != 'DevDepGS_OP' &amp;&amp; elem != 'DevDepGS_TR' &amp;&amp; elem != 'DevDepGS_UCR' &amp;&amp; elem != 'ExternalOPIdicts' &amp;&amp; elem != 'ExternalRefXobjects' &amp;&amp; elem != 'ExternalStreams' &amp;&amp; elem != 'GoToRemoteActions' &amp;&amp; elem != 'HideAnnotationActions' &amp;&amp; elem != 'JavaScriptActions' &amp;&amp; elem != 'LaunchActions' &amp;&amp; elem != 'MovieActions' &amp;&amp; elem != 'NonEmbeddedFonts' &amp;&amp; elem != 'OptionalContent' &amp;&amp; elem != 'SoundActions' &amp;&amp; elem != 'TrueTypeFonts' &amp;&amp; elem != 'URIActions').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26289"/>
			<description>Entry AlternateImages in LegalAttestation shall have type Integer</description>
			<test>containsAlternateImages == false || AlternateImagesHasTypeInteger == true</test>
			<error>
				<message>Entry AlternateImages in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26290"/>
			<description>Entry AlternateImages with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@AlternateImages &gt;= 0)</description>
			<test>AlternateImagesHasTypeInteger != true || (AlternateImagesIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry AlternateImages with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@AlternateImages &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26291"/>
			<description>Entry Annotations in LegalAttestation shall have type Integer</description>
			<test>containsAnnotations == false || AnnotationsHasTypeInteger == true</test>
			<error>
				<message>Entry Annotations in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26292"/>
			<description>Entry Annotations with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@Annotations &gt;= 0)</description>
			<test>AnnotationsHasTypeInteger != true || (AnnotationsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Annotations with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@Annotations &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26293"/>
			<description>Entry Attestation in LegalAttestation shall have type StringText</description>
			<test>containsAttestation == false || AttestationHasTypeStringText == true</test>
			<error>
				<message>Entry Attestation in LegalAttestation is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26294"/>
			<description>Entry DevDepGS_BG in LegalAttestation shall have type Integer</description>
			<test>containsDevDepGS_BG == false || DevDepGS_BGHasTypeInteger == true</test>
			<error>
				<message>Entry DevDepGS_BG in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26295"/>
			<description>Entry DevDepGS_BG with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@DevDepGS_BG &gt;= 0)</description>
			<test>DevDepGS_BGHasTypeInteger != true || (DevDepGS_BGIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DevDepGS_BG with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@DevDepGS_BG &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26296"/>
			<description>Entry DevDepGS_FL in LegalAttestation shall have type Integer</description>
			<test>containsDevDepGS_FL == false || DevDepGS_FLHasTypeInteger == true</test>
			<error>
				<message>Entry DevDepGS_FL in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26297"/>
			<description>Entry DevDepGS_FL with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@DevDepGS_FL &gt;= 0)</description>
			<test>DevDepGS_FLHasTypeInteger != true || (DevDepGS_FLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DevDepGS_FL with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@DevDepGS_FL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26298"/>
			<description>Entry DevDepGS_HT in LegalAttestation shall have type Integer</description>
			<test>containsDevDepGS_HT == false || DevDepGS_HTHasTypeInteger == true</test>
			<error>
				<message>Entry DevDepGS_HT in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26299"/>
			<description>Entry DevDepGS_HT with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@DevDepGS_HT &gt;= 0)</description>
			<test>DevDepGS_HTHasTypeInteger != true || (DevDepGS_HTIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DevDepGS_HT with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@DevDepGS_HT &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26300"/>
			<description>Entry DevDepGS_OP in LegalAttestation shall have type Integer</description>
			<test>containsDevDepGS_OP == false || DevDepGS_OPHasTypeInteger == true</test>
			<error>
				<message>Entry DevDepGS_OP in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26301"/>
			<description>Entry DevDepGS_OP with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@DevDepGS_OP &gt;= 0)</description>
			<test>DevDepGS_OPHasTypeInteger != true || (DevDepGS_OPIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DevDepGS_OP with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@DevDepGS_OP &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26302"/>
			<description>Entry DevDepGS_TR in LegalAttestation shall have type Integer</description>
			<test>containsDevDepGS_TR == false || DevDepGS_TRHasTypeInteger == true</test>
			<error>
				<message>Entry DevDepGS_TR in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26303"/>
			<description>Entry DevDepGS_TR with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@DevDepGS_TR &gt;= 0)</description>
			<test>DevDepGS_TRHasTypeInteger != true || (DevDepGS_TRIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DevDepGS_TR with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@DevDepGS_TR &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26304"/>
			<description>Entry DevDepGS_UCR in LegalAttestation shall have type Integer</description>
			<test>containsDevDepGS_UCR == false || DevDepGS_UCRHasTypeInteger == true</test>
			<error>
				<message>Entry DevDepGS_UCR in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26305"/>
			<description>Entry DevDepGS_UCR with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@DevDepGS_UCR &gt;= 0)</description>
			<test>DevDepGS_UCRHasTypeInteger != true || (DevDepGS_UCRIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DevDepGS_UCR with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@DevDepGS_UCR &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26306"/>
			<description>Entry ExternalOPIdicts in LegalAttestation shall have type Integer</description>
			<test>containsExternalOPIdicts == false || ExternalOPIdictsHasTypeInteger == true</test>
			<error>
				<message>Entry ExternalOPIdicts in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26307"/>
			<description>Entry ExternalOPIdicts with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@ExternalOPIdicts &gt;= 0)</description>
			<test>ExternalOPIdictsHasTypeInteger != true || (ExternalOPIdictsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry ExternalOPIdicts with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@ExternalOPIdicts &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26308"/>
			<description>Entry ExternalRefXobjects in LegalAttestation shall have type Integer</description>
			<test>containsExternalRefXobjects == false || ExternalRefXobjectsHasTypeInteger == true</test>
			<error>
				<message>Entry ExternalRefXobjects in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26309"/>
			<description>Entry ExternalRefXobjects with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@ExternalRefXobjects &gt;= 0)</description>
			<test>ExternalRefXobjectsHasTypeInteger != true || (ExternalRefXobjectsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry ExternalRefXobjects with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@ExternalRefXobjects &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26310"/>
			<description>Entry ExternalStreams in LegalAttestation shall have type Integer</description>
			<test>containsExternalStreams == false || ExternalStreamsHasTypeInteger == true</test>
			<error>
				<message>Entry ExternalStreams in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26311"/>
			<description>Entry ExternalStreams with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@ExternalStreams &gt;= 0)</description>
			<test>ExternalStreamsHasTypeInteger != true || (ExternalStreamsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry ExternalStreams with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@ExternalStreams &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26312"/>
			<description>Entry GoToRemoteActions in LegalAttestation shall have type Integer</description>
			<test>containsGoToRemoteActions == false || GoToRemoteActionsHasTypeInteger == true</test>
			<error>
				<message>Entry GoToRemoteActions in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26313"/>
			<description>Entry GoToRemoteActions with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@GoToRemoteActions &gt;= 0)</description>
			<test>GoToRemoteActionsHasTypeInteger != true || (GoToRemoteActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry GoToRemoteActions with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@GoToRemoteActions &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26314"/>
			<description>Entry HideAnnotationActions in LegalAttestation shall have type Integer</description>
			<test>containsHideAnnotationActions == false || HideAnnotationActionsHasTypeInteger == true</test>
			<error>
				<message>Entry HideAnnotationActions in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26315"/>
			<description>Entry HideAnnotationActions with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@HideAnnotationActions &gt;= 0)</description>
			<test>HideAnnotationActionsHasTypeInteger != true || (HideAnnotationActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry HideAnnotationActions with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@HideAnnotationActions &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26316"/>
			<description>Entry JavaScriptActions in LegalAttestation shall have type Integer</description>
			<test>containsJavaScriptActions == false || JavaScriptActionsHasTypeInteger == true</test>
			<error>
				<message>Entry JavaScriptActions in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26317"/>
			<description>Entry JavaScriptActions with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@JavaScriptActions &gt;= 0)</description>
			<test>JavaScriptActionsHasTypeInteger != true || (JavaScriptActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry JavaScriptActions with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@JavaScriptActions &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26318"/>
			<description>Entry LaunchActions in LegalAttestation shall have type Integer</description>
			<test>containsLaunchActions == false || LaunchActionsHasTypeInteger == true</test>
			<error>
				<message>Entry LaunchActions in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26319"/>
			<description>Entry LaunchActions with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@LaunchActions &gt;= 0)</description>
			<test>LaunchActionsHasTypeInteger != true || (LaunchActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry LaunchActions with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@LaunchActions &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26320"/>
			<description>Entry MovieActions in LegalAttestation shall have type Integer</description>
			<test>containsMovieActions == false || MovieActionsHasTypeInteger == true</test>
			<error>
				<message>Entry MovieActions in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26321"/>
			<description>Entry MovieActions with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@MovieActions &gt;= 0)</description>
			<test>MovieActionsHasTypeInteger != true || (MovieActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry MovieActions with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@MovieActions &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26322"/>
			<description>Entry NonEmbeddedFonts in LegalAttestation shall have type Integer</description>
			<test>containsNonEmbeddedFonts == false || NonEmbeddedFontsHasTypeInteger == true</test>
			<error>
				<message>Entry NonEmbeddedFonts in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26323"/>
			<description>Entry NonEmbeddedFonts with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@NonEmbeddedFonts &gt;= 0)</description>
			<test>NonEmbeddedFontsHasTypeInteger != true || (NonEmbeddedFontsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry NonEmbeddedFonts with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@NonEmbeddedFonts &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26324"/>
			<description>Entry OptionalContent in LegalAttestation shall have type Boolean</description>
			<test>containsOptionalContent == false || OptionalContentHasTypeBoolean == true</test>
			<error>
				<message>Entry OptionalContent in LegalAttestation is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26325"/>
			<description>Entry SoundActions in LegalAttestation shall have type Integer</description>
			<test>containsSoundActions == false || SoundActionsHasTypeInteger == true</test>
			<error>
				<message>Entry SoundActions in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26326"/>
			<description>Entry SoundActions with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@SoundActions &gt;= 0)</description>
			<test>SoundActionsHasTypeInteger != true || (SoundActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry SoundActions with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@SoundActions &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26327"/>
			<description>Entry TrueTypeFonts in LegalAttestation shall have type Integer</description>
			<test>containsTrueTypeFonts == false || TrueTypeFontsHasTypeInteger == true</test>
			<error>
				<message>Entry TrueTypeFonts in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26328"/>
			<description>Entry TrueTypeFonts with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@TrueTypeFonts &gt;= 0)</description>
			<test>TrueTypeFontsHasTypeInteger != true || (TrueTypeFontsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry TrueTypeFonts with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@TrueTypeFonts &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26329"/>
			<description>Entry URIActions in LegalAttestation shall have type Integer</description>
			<test>containsURIActions == false || URIActionsHasTypeInteger == true</test>
			<error>
				<message>Entry URIActions in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="26330"/>
			<description>Entry URIActions with type Integer in LegalAttestation shall satisfy special case: fn:Eval(@URIActions &gt;= 0)</description>
			<test>URIActionsHasTypeInteger != true || (URIActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry URIActions with type Integer in LegalAttestation does not satisfy special case: fn:Eval(@URIActions &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="1" testNumber="26556"/>
			<description>LinearizationParameterDict shall not contain entries except E, H, L, Linearized, N, O, P, T</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'E' &amp;&amp; elem != 'H' &amp;&amp; elem != 'L' &amp;&amp; elem != 'Linearized' &amp;&amp; elem != 'N' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'T').length == 0</test>
			<error>
				<message>LinearizationParameterDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'E' &amp;&amp; elem != 'H' &amp;&amp; elem != 'L' &amp;&amp; elem != 'Linearized' &amp;&amp; elem != 'N' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'T').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26557"/>
			<description>Entry E in LinearizationParameterDict shall have type Integer</description>
			<test>containsE == false || EHasTypeInteger == true</test>
			<error>
				<message>Entry E in LinearizationParameterDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="7" testNumber="26558"/>
			<description>Entry E in LinearizationParameterDict is required</description>
			<test>containsE == true</test>
			<error>
				<message>Entry E in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="16" testNumber="26559"/>
			<description>If entry E with type Integer in LinearizationParameterDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>EHasTypeInteger != true || (isEIndirect == false)</test>
			<error>
				<message>Entry E with type Integer in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="14" testNumber="26560"/>
			<description>Entry E with type Integer in LinearizationParameterDict shall satisfy possible value predicate: fn:Eval((@E &gt; 0) &amp;&amp; (@E &lt;= @L))</description>
			<test>EHasTypeInteger != true || (EIntegerValue &gt; 0) &amp;&amp; (EIntegerValue &lt;= LIntegerValue)</test>
			<error>
				<message>Entry E with type Integer in LinearizationParameterDict does not satisfy possible value predicate: fn:Eval((@E &gt; 0) &amp;&amp; (@E &lt;= @L))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26561"/>
			<description>Entry H with type Array in LinearizationParameterDict shall be one of objects ArrayOf_2Integers, ArrayOf_4Integers</description>
			<test>HHasTypeArray != true || H_size == 1</test>
			<error>
				<message>Entry H with type Array in LinearizationParameterDict is not one of objects ArrayOf_2Integers, ArrayOf_4Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26562"/>
			<description>Entry H in LinearizationParameterDict shall have type Array</description>
			<test>containsH == false || HHasTypeArray == true</test>
			<error>
				<message>Entry H in LinearizationParameterDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="7" testNumber="26563"/>
			<description>Entry H in LinearizationParameterDict is required</description>
			<test>containsH == true</test>
			<error>
				<message>Entry H in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="16" testNumber="26564"/>
			<description>If entry H with type Array in LinearizationParameterDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>HHasTypeArray != true || (isHIndirect == false)</test>
			<error>
				<message>Entry H with type Array in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26565"/>
			<description>Entry L in LinearizationParameterDict shall have type Integer</description>
			<test>containsL == false || LHasTypeInteger == true</test>
			<error>
				<message>Entry L in LinearizationParameterDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="7" testNumber="26566"/>
			<description>Entry L in LinearizationParameterDict is required</description>
			<test>containsL == true</test>
			<error>
				<message>Entry L in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="16" testNumber="26567"/>
			<description>If entry L with type Integer in LinearizationParameterDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>LHasTypeInteger != true || (isLIndirect == false)</test>
			<error>
				<message>Entry L with type Integer in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="14" testNumber="26568"/>
			<description>Entry L with type Integer in LinearizationParameterDict shall satisfy possible value predicate: fn:Eval(@L &gt; 0)</description>
			<test>LHasTypeInteger != true || LIntegerValue &gt; 0</test>
			<error>
				<message>Entry L with type Integer in LinearizationParameterDict does not satisfy possible value predicate: fn:Eval(@L &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26569"/>
			<description>Entry Linearized in LinearizationParameterDict shall have type Number</description>
			<test>containsLinearized == false || LinearizedHasTypeNumber == true</test>
			<error>
				<message>Entry Linearized in LinearizationParameterDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="7" testNumber="26570"/>
			<description>Entry Linearized in LinearizationParameterDict is required</description>
			<test>containsLinearized == true</test>
			<error>
				<message>Entry Linearized in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="16" testNumber="26571"/>
			<description>If entry Linearized with type Number in LinearizationParameterDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>LinearizedHasTypeNumber != true || (isLinearizedIndirect == false)</test>
			<error>
				<message>Entry Linearized with type Number in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="26572"/>
			<description>Entry Linearized with type Number in LinearizationParameterDict shall have value 1.0</description>
			<test>LinearizedHasTypeNumber != true || LinearizedNumberValue == 1.0</test>
			<error>
				<message>Entry Linearized with type Number in LinearizationParameterDict has incorrect value %2 instead of 1.0</message>
				<arguments>
					<argument>keyName</argument>
					<argument>LinearizedNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26573"/>
			<description>Entry N in LinearizationParameterDict shall have type Integer</description>
			<test>containsN == false || NHasTypeInteger == true</test>
			<error>
				<message>Entry N in LinearizationParameterDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="7" testNumber="26574"/>
			<description>Entry N in LinearizationParameterDict is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="16" testNumber="26575"/>
			<description>If entry N with type Integer in LinearizationParameterDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>NHasTypeInteger != true || (isNIndirect == false)</test>
			<error>
				<message>Entry N with type Integer in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="14" testNumber="26576"/>
			<description>Entry N with type Integer in LinearizationParameterDict shall satisfy possible value predicate: fn:Eval(@N &gt; 0)</description>
			<test>NHasTypeInteger != true || NIntegerValue &gt; 0</test>
			<error>
				<message>Entry N with type Integer in LinearizationParameterDict does not satisfy possible value predicate: fn:Eval(@N &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26577"/>
			<description>Entry O in LinearizationParameterDict shall have type Integer</description>
			<test>containsO == false || OHasTypeInteger == true</test>
			<error>
				<message>Entry O in LinearizationParameterDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="7" testNumber="26578"/>
			<description>Entry O in LinearizationParameterDict is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="16" testNumber="26579"/>
			<description>If entry O with type Integer in LinearizationParameterDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>OHasTypeInteger != true || (isOIndirect == false)</test>
			<error>
				<message>Entry O with type Integer in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="14" testNumber="26580"/>
			<description>Entry O with type Integer in LinearizationParameterDict shall satisfy possible value predicate: fn:Eval(@O &gt; 0)</description>
			<test>OHasTypeInteger != true || OIntegerValue &gt; 0</test>
			<error>
				<message>Entry O with type Integer in LinearizationParameterDict does not satisfy possible value predicate: fn:Eval(@O &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26581"/>
			<description>Entry P in LinearizationParameterDict shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in LinearizationParameterDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="16" testNumber="26582"/>
			<description>If entry P with type Integer in LinearizationParameterDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>PHasTypeInteger != true || (isPIndirect == false)</test>
			<error>
				<message>Entry P with type Integer in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="14" testNumber="26583"/>
			<description>Entry P with type Integer in LinearizationParameterDict shall satisfy possible value predicate: fn:Eval(@P &gt;= 0)</description>
			<test>PHasTypeInteger != true || PIntegerValue &gt;= 0</test>
			<error>
				<message>Entry P with type Integer in LinearizationParameterDict does not satisfy possible value predicate: fn:Eval(@P &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26584"/>
			<description>Entry T in LinearizationParameterDict shall have type Integer</description>
			<test>containsT == false || THasTypeInteger == true</test>
			<error>
				<message>Entry T in LinearizationParameterDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="7" testNumber="26585"/>
			<description>Entry T in LinearizationParameterDict is required</description>
			<test>containsT == true</test>
			<error>
				<message>Entry T in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="16" testNumber="26586"/>
			<description>If entry T with type Integer in LinearizationParameterDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>THasTypeInteger != true || (isTIndirect == false)</test>
			<error>
				<message>Entry T with type Integer in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_5" clause="14" testNumber="26587"/>
			<description>Entry T with type Integer in LinearizationParameterDict shall satisfy possible value predicate: fn:Eval(@T &gt; 0)</description>
			<test>THasTypeInteger != true || TIntegerValue &gt; 0</test>
			<error>
				<message>Entry T with type Integer in LinearizationParameterDict does not satisfy possible value predicate: fn:Eval(@T &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_5" clause="1" testNumber="26705"/>
			<description>Mac shall not contain entries except Creator, ResFork, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Creator' &amp;&amp; elem != 'ResFork' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>Mac contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Creator' &amp;&amp; elem != 'ResFork' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26706"/>
			<description>Entry Creator in Mac shall have type Integer</description>
			<test>containsCreator == false || CreatorHasTypeInteger == true</test>
			<error>
				<message>Entry Creator in Mac is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26707"/>
			<description>Entry ResFork with type Stream in Mac shall be object Stream</description>
			<test>ResForkHasTypeStream != true || ResFork_size == 1</test>
			<error>
				<message>Entry ResFork with type Stream in Mac is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26708"/>
			<description>Entry ResFork in Mac shall have type Stream</description>
			<test>containsResFork == false || ResForkHasTypeStream == true</test>
			<error>
				<message>Entry ResFork in Mac is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_5" clause="10" testNumber="26709"/>
			<description>Entry ResFork with type Stream in Mac shall be indirect</description>
			<test>ResForkHasTypeStream != true || isResForkIndirect == true</test>
			<error>
				<message>Entry ResFork with type Stream in Mac is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26710"/>
			<description>Entry Subtype in Mac shall have type Integer</description>
			<test>containsSubtype == false || SubtypeHasTypeInteger == true</test>
			<error>
				<message>Entry Subtype in Mac is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkInfo">
			<id specification="ISO_32000_1_5" clause="1" testNumber="26731"/>
			<description>MarkInfo shall not contain entries except Marked</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Marked').length == 0</test>
			<error>
				<message>MarkInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Marked').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26732"/>
			<description>Entry Marked in MarkInfo shall have type Boolean</description>
			<test>containsMarked == false || MarkedHasTypeBoolean == true</test>
			<error>
				<message>Entry Marked in MarkInfo is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_5" clause="1" testNumber="26783"/>
			<description>MarkedContentReference shall not contain entries except MCID, Pg, Stm, StmOwn, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'MCID' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'Stm' &amp;&amp; elem != 'StmOwn' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>MarkedContentReference contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'MCID' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'Stm' &amp;&amp; elem != 'StmOwn' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26784"/>
			<description>Entry MCID in MarkedContentReference shall have type Integer</description>
			<test>containsMCID == false || MCIDHasTypeInteger == true</test>
			<error>
				<message>Entry MCID in MarkedContentReference is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_5" clause="7" testNumber="26785"/>
			<description>Entry MCID in MarkedContentReference is required</description>
			<test>containsMCID == true</test>
			<error>
				<message>Entry MCID in MarkedContentReference is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26786"/>
			<description>Entry Pg with type Dictionary in MarkedContentReference shall be object PageObject</description>
			<test>PgHasTypeDictionary != true || Pg_size == 1</test>
			<error>
				<message>Entry Pg with type Dictionary in MarkedContentReference is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26787"/>
			<description>Entry Pg in MarkedContentReference shall have type Dictionary</description>
			<test>containsPg == false || PgHasTypeDictionary == true</test>
			<error>
				<message>Entry Pg in MarkedContentReference is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_5" clause="10" testNumber="26788"/>
			<description>Entry Pg with type Dictionary in MarkedContentReference shall be indirect</description>
			<test>PgHasTypeDictionary != true || isPgIndirect == true</test>
			<error>
				<message>Entry Pg with type Dictionary in MarkedContentReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26789"/>
			<description>Entry Stm with type Stream in MarkedContentReference shall be object XObjectFormType1</description>
			<test>StmHasTypeStream != true || Stm_size == 1</test>
			<error>
				<message>Entry Stm with type Stream in MarkedContentReference is not object XObjectFormType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26790"/>
			<description>Entry Stm in MarkedContentReference shall have type Stream</description>
			<test>containsStm == false || StmHasTypeStream == true</test>
			<error>
				<message>Entry Stm in MarkedContentReference is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_5" clause="10" testNumber="26791"/>
			<description>Entry Stm with type Stream in MarkedContentReference shall be indirect</description>
			<test>StmHasTypeStream != true || isStmIndirect == true</test>
			<error>
				<message>Entry Stm with type Stream in MarkedContentReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26792"/>
			<description>Entry StmOwn with type Array in MarkedContentReference shall be object _UniversalArray</description>
			<test>StmOwnHasTypeArray != true || StmOwn_size == 1</test>
			<error>
				<message>Entry StmOwn with type Array in MarkedContentReference is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26793"/>
			<description>Entry StmOwn with type Stream in MarkedContentReference shall be object Stream</description>
			<test>StmOwnHasTypeStream != true || StmOwn_size == 1</test>
			<error>
				<message>Entry StmOwn with type Stream in MarkedContentReference is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26794"/>
			<description>Entry StmOwn with type Dictionary in MarkedContentReference shall be object _UniversalDictionary</description>
			<test>StmOwnHasTypeDictionary != true || StmOwn_size == 1</test>
			<error>
				<message>Entry StmOwn with type Dictionary in MarkedContentReference is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26795"/>
			<description>Entry StmOwn in MarkedContentReference shall have one of types: Array, Stream, Dictionary</description>
			<test>containsStmOwn == false || StmOwnHasTypeArray == true || StmOwnHasTypeStream == true || StmOwnHasTypeDictionary == true</test>
			<error>
				<message>Entry StmOwn in MarkedContentReference is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_5" clause="10" testNumber="26796"/>
			<description>Entry StmOwn with type Array in MarkedContentReference shall be indirect</description>
			<test>StmOwnHasTypeArray != true || isStmOwnIndirect == true</test>
			<error>
				<message>Entry StmOwn with type Array in MarkedContentReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_5" clause="10" testNumber="26797"/>
			<description>Entry StmOwn with type Stream in MarkedContentReference shall be indirect</description>
			<test>StmOwnHasTypeStream != true || isStmOwnIndirect == true</test>
			<error>
				<message>Entry StmOwn with type Stream in MarkedContentReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_5" clause="10" testNumber="26798"/>
			<description>Entry StmOwn with type Dictionary in MarkedContentReference shall be indirect</description>
			<test>StmOwnHasTypeDictionary != true || isStmOwnIndirect == true</test>
			<error>
				<message>Entry StmOwn with type Dictionary in MarkedContentReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26799"/>
			<description>Entry Type in MarkedContentReference shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MarkedContentReference is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_5" clause="7" testNumber="26800"/>
			<description>Entry Type in MarkedContentReference is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in MarkedContentReference is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_5" clause="6" testNumber="26801"/>
			<description>Entry Type with type Name in MarkedContentReference shall have value MCR</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MCR"</test>
			<error>
				<message>Entry Type with type Name in MarkedContentReference has incorrect value %2 instead of MCR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="1" testNumber="26970"/>
			<description>MediaClipData shall not contain entries except Alt, BE, CT, D, MH, N, P, PL, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Alt' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'CT' &amp;&amp; elem != 'D' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PL' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>MediaClipData contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Alt' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'CT' &amp;&amp; elem != 'D' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PL' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26971"/>
			<description>Entry Alt with type Array in MediaClipData shall be object ArrayOfStringsText</description>
			<test>AltHasTypeArray != true || Alt_size == 1</test>
			<error>
				<message>Entry Alt with type Array in MediaClipData is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26972"/>
			<description>Entry Alt in MediaClipData shall have type Array</description>
			<test>containsAlt == false || AltHasTypeArray == true</test>
			<error>
				<message>Entry Alt in MediaClipData is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26973"/>
			<description>Entry BE with type Dictionary in MediaClipData shall be object MediaClipDataMHBE</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in MediaClipData is not object MediaClipDataMHBE</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26974"/>
			<description>Entry BE in MediaClipData shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in MediaClipData is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26975"/>
			<description>Entry CT in MediaClipData shall have type StringAscii</description>
			<test>containsCT == false || CTHasTypeStringAscii == true</test>
			<error>
				<message>Entry CT in MediaClipData is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26976"/>
			<description>Entry D with type Stream in MediaClipData shall be object XObjectFormType1</description>
			<test>DHasTypeStream != true || D_size == 1</test>
			<error>
				<message>Entry D with type Stream in MediaClipData is not object XObjectFormType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26977"/>
			<description>Entry D with type Dictionary in MediaClipData shall be object FileSpecification</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in MediaClipData is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26978"/>
			<description>Entry D in MediaClipData shall have one of types: Stream, String, Dictionary</description>
			<test>containsD == false || DHasTypeStream == true || DHasTypeString == true || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in MediaClipData is not one of types: Stream, String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="7" testNumber="26979"/>
			<description>Entry D in MediaClipData is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in MediaClipData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="10" testNumber="26980"/>
			<description>Entry D with type Stream in MediaClipData shall be indirect</description>
			<test>DHasTypeStream != true || isDIndirect == true</test>
			<error>
				<message>Entry D with type Stream in MediaClipData is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26981"/>
			<description>Entry MH with type Dictionary in MediaClipData shall be object MediaClipDataMHBE</description>
			<test>MHHasTypeDictionary != true || MH_size == 1</test>
			<error>
				<message>Entry MH with type Dictionary in MediaClipData is not object MediaClipDataMHBE</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26982"/>
			<description>Entry MH in MediaClipData shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in MediaClipData is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26983"/>
			<description>Entry N in MediaClipData shall have type StringText</description>
			<test>containsN == false || NHasTypeStringText == true</test>
			<error>
				<message>Entry N in MediaClipData is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26984"/>
			<description>Entry P with type Dictionary in MediaClipData shall be object MediaPermissions</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in MediaClipData is not object MediaPermissions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26985"/>
			<description>Entry P in MediaClipData shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in MediaClipData is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="17" testNumber="26986"/>
			<description>Entry PL with type Dictionary in MediaClipData shall be object MediaPlayers</description>
			<test>PLHasTypeDictionary != true || PL_size == 1</test>
			<error>
				<message>Entry PL with type Dictionary in MediaClipData is not object MediaPlayers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26987"/>
			<description>Entry PL in MediaClipData shall have type Dictionary</description>
			<test>containsPL == false || PLHasTypeDictionary == true</test>
			<error>
				<message>Entry PL in MediaClipData is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26988"/>
			<description>Entry S in MediaClipData shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in MediaClipData is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="7" testNumber="26989"/>
			<description>Entry S in MediaClipData is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in MediaClipData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="6" testNumber="26990"/>
			<description>Entry S with type Name in MediaClipData shall have value MCD</description>
			<test>SHasTypeName != true || SNameValue == "MCD"</test>
			<error>
				<message>Entry S with type Name in MediaClipData has incorrect value %2 instead of MCD</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="8" testNumber="26991"/>
			<description>Entry Type in MediaClipData shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaClipData is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_5" clause="6" testNumber="26992"/>
			<description>Entry Type with type Name in MediaClipData shall have value MediaClip</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaClip"</test>
			<error>
				<message>Entry Type with type Name in MediaClipData has incorrect value %2 instead of MediaClip</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipDataMHBE">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27062"/>
			<description>MediaClipDataMHBE shall not contain entries except BU</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BU').length == 0</test>
			<error>
				<message>MediaClipDataMHBE contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BU').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipDataMHBE">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27063"/>
			<description>Entry BU in MediaClipDataMHBE shall have type StringAscii</description>
			<test>containsBU == false || BUHasTypeStringAscii == true</test>
			<error>
				<message>Entry BU in MediaClipDataMHBE is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27070"/>
			<description>MediaClipSection shall not contain entries except Alt, BE, D, MH, N, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Alt' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'D' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'N' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>MediaClipSection contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Alt' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'D' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'N' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27071"/>
			<description>Entry Alt with type Array in MediaClipSection shall be object ArrayOfStringsText</description>
			<test>AltHasTypeArray != true || Alt_size == 1</test>
			<error>
				<message>Entry Alt with type Array in MediaClipSection is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27072"/>
			<description>Entry Alt in MediaClipSection shall have type Array</description>
			<test>containsAlt == false || AltHasTypeArray == true</test>
			<error>
				<message>Entry Alt in MediaClipSection is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27073"/>
			<description>Entry BE with type Dictionary in MediaClipSection shall be object MediaClipSectionMHBE</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in MediaClipSection is not object MediaClipSectionMHBE</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27074"/>
			<description>Entry BE in MediaClipSection shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in MediaClipSection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27075"/>
			<description>Entry D with type Dictionary in MediaClipSection shall be one of objects MediaClipSection, MediaClipData</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in MediaClipSection is not one of objects MediaClipSection, MediaClipData</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27076"/>
			<description>Entry D in MediaClipSection shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in MediaClipSection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_5" clause="7" testNumber="27077"/>
			<description>Entry D in MediaClipSection is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in MediaClipSection is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27078"/>
			<description>Entry MH with type Dictionary in MediaClipSection shall be object MediaClipSectionMHBE</description>
			<test>MHHasTypeDictionary != true || MH_size == 1</test>
			<error>
				<message>Entry MH with type Dictionary in MediaClipSection is not object MediaClipSectionMHBE</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27079"/>
			<description>Entry MH in MediaClipSection shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in MediaClipSection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27080"/>
			<description>Entry N in MediaClipSection shall have type StringText</description>
			<test>containsN == false || NHasTypeStringText == true</test>
			<error>
				<message>Entry N in MediaClipSection is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27081"/>
			<description>Entry S in MediaClipSection shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in MediaClipSection is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_5" clause="7" testNumber="27082"/>
			<description>Entry S in MediaClipSection is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in MediaClipSection is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27083"/>
			<description>Entry S with type Name in MediaClipSection shall have value MCS</description>
			<test>SHasTypeName != true || SNameValue == "MCS"</test>
			<error>
				<message>Entry S with type Name in MediaClipSection has incorrect value %2 instead of MCS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27084"/>
			<description>Entry Type in MediaClipSection shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaClipSection is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27085"/>
			<description>Entry Type with type Name in MediaClipSection shall have value MediaClip</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaClip"</test>
			<error>
				<message>Entry Type with type Name in MediaClipSection has incorrect value %2 instead of MediaClip</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSectionMHBE">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27134"/>
			<description>MediaClipSectionMHBE shall not contain entries except B, E</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'E').length == 0</test>
			<error>
				<message>MediaClipSectionMHBE contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'E').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSectionMHBE">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27135"/>
			<description>Entry B with type Dictionary in MediaClipSectionMHBE shall be one of objects MediaOffsetTime, MediaOffsetMarker, MediaOffsetFrame</description>
			<test>BHasTypeDictionary != true || B_size == 1</test>
			<error>
				<message>Entry B with type Dictionary in MediaClipSectionMHBE is not one of objects MediaOffsetTime, MediaOffsetMarker, MediaOffsetFrame</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSectionMHBE">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27136"/>
			<description>Entry B in MediaClipSectionMHBE shall have type Dictionary</description>
			<test>containsB == false || BHasTypeDictionary == true</test>
			<error>
				<message>Entry B in MediaClipSectionMHBE is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSectionMHBE">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27137"/>
			<description>Entry E with type Dictionary in MediaClipSectionMHBE shall be one of objects MediaOffsetTime, MediaOffsetMarker, MediaOffsetFrame</description>
			<test>EHasTypeDictionary != true || E_size == 1</test>
			<error>
				<message>Entry E with type Dictionary in MediaClipSectionMHBE is not one of objects MediaOffsetTime, MediaOffsetMarker, MediaOffsetFrame</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSectionMHBE">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27138"/>
			<description>Entry E in MediaClipSectionMHBE shall have type Dictionary</description>
			<test>containsE == false || EHasTypeDictionary == true</test>
			<error>
				<message>Entry E in MediaClipSectionMHBE is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27154"/>
			<description>MediaCriteria shall not contain entries except A, C, D, L, O, P, R, S, Type, V, Z</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'L' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Z').length == 0</test>
			<error>
				<message>MediaCriteria contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'L' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Z').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27155"/>
			<description>Entry A in MediaCriteria shall have type Boolean</description>
			<test>containsA == false || AHasTypeBoolean == true</test>
			<error>
				<message>Entry A in MediaCriteria is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27156"/>
			<description>Entry C in MediaCriteria shall have type Boolean</description>
			<test>containsC == false || CHasTypeBoolean == true</test>
			<error>
				<message>Entry C in MediaCriteria is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27157"/>
			<description>Entry D with type Dictionary in MediaCriteria shall be object MinimumBitDepth</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in MediaCriteria is not object MinimumBitDepth</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27158"/>
			<description>Entry D in MediaCriteria shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in MediaCriteria is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27159"/>
			<description>Entry L with type Array in MediaCriteria shall be object ArrayOfStringsText</description>
			<test>LHasTypeArray != true || L_size == 1</test>
			<error>
				<message>Entry L with type Array in MediaCriteria is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27160"/>
			<description>Entry L in MediaCriteria shall have type Array</description>
			<test>containsL == false || LHasTypeArray == true</test>
			<error>
				<message>Entry L in MediaCriteria is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27161"/>
			<description>Entry O in MediaCriteria shall have type Boolean</description>
			<test>containsO == false || OHasTypeBoolean == true</test>
			<error>
				<message>Entry O in MediaCriteria is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27162"/>
			<description>Entry P with type Array in MediaCriteria shall be object ArrayOfNamesGeneral</description>
			<test>PHasTypeArray != true || P_size == 1</test>
			<error>
				<message>Entry P with type Array in MediaCriteria is not object ArrayOfNamesGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27163"/>
			<description>Entry P in MediaCriteria shall have type Array</description>
			<test>containsP == false || PHasTypeArray == true</test>
			<error>
				<message>Entry P in MediaCriteria is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27164"/>
			<description>Entry R in MediaCriteria shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in MediaCriteria is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_5" clause="9" testNumber="27165"/>
			<description>Entry R with type Integer in MediaCriteria shall satisfy special case: fn:Eval(@R &gt; 0)</description>
			<test>RHasTypeInteger != true || (RIntegerValue &gt; 0)</test>
			<error>
				<message>Entry R with type Integer in MediaCriteria does not satisfy special case: fn:Eval(@R &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27166"/>
			<description>Entry S in MediaCriteria shall have type Boolean</description>
			<test>containsS == false || SHasTypeBoolean == true</test>
			<error>
				<message>Entry S in MediaCriteria is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27167"/>
			<description>Entry Type in MediaCriteria shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaCriteria is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27168"/>
			<description>Entry Type with type Name in MediaCriteria shall have value MediaCriteria</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaCriteria"</test>
			<error>
				<message>Entry Type with type Name in MediaCriteria has incorrect value %2 instead of MediaCriteria</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27169"/>
			<description>Entry V with type Array in MediaCriteria shall be object ArrayOfSoftwareIdentifiers</description>
			<test>VHasTypeArray != true || V_size == 1</test>
			<error>
				<message>Entry V with type Array in MediaCriteria is not object ArrayOfSoftwareIdentifiers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27170"/>
			<description>Entry V in MediaCriteria shall have type Array</description>
			<test>containsV == false || VHasTypeArray == true</test>
			<error>
				<message>Entry V in MediaCriteria is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27171"/>
			<description>Entry Z with type Dictionary in MediaCriteria shall be object MinimumScreenSize</description>
			<test>ZHasTypeDictionary != true || Z_size == 1</test>
			<error>
				<message>Entry Z with type Dictionary in MediaCriteria is not object MinimumScreenSize</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27172"/>
			<description>Entry Z in MediaCriteria shall have type Dictionary</description>
			<test>containsZ == false || ZHasTypeDictionary == true</test>
			<error>
				<message>Entry Z in MediaCriteria is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27230"/>
			<description>MediaDuration shall not contain entries except S, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>MediaDuration contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27231"/>
			<description>Entry S in MediaDuration shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in MediaDuration is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_5" clause="7" testNumber="27232"/>
			<description>Entry S in MediaDuration is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in MediaDuration is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27233"/>
			<description>Entry S with type Name in MediaDuration shall have one of values: T, F, I</description>
			<test>SHasTypeName != true || SNameValue == "I" || SNameValue == "F" || SNameValue == "T"</test>
			<error>
				<message>Entry S with type Name in MediaDuration has incorrect value %2 instead of T, F, I</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27234"/>
			<description>Entry T with type Dictionary in MediaDuration shall be object Timespan</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in MediaDuration is not object Timespan</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27235"/>
			<description>Entry T in MediaDuration shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in MediaDuration is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_5" clause="11" testNumber="27236"/>
			<description>Entry T in MediaDuration is required, when fn:IsRequired(@S == T)</description>
			<test>(containsT == true || (SNameValue == "T") == false)</test>
			<error>
				<message>Entry T in MediaDuration is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27237"/>
			<description>Entry Type in MediaDuration shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaDuration is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27238"/>
			<description>Entry Type with type Name in MediaDuration shall have value MediaDuration</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaDuration"</test>
			<error>
				<message>Entry Type with type Name in MediaDuration has incorrect value %2 instead of MediaDuration</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27266"/>
			<description>MediaOffsetFrame shall not contain entries except F, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>MediaOffsetFrame contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27267"/>
			<description>Entry F in MediaOffsetFrame shall have type Integer</description>
			<test>containsF == false || FHasTypeInteger == true</test>
			<error>
				<message>Entry F in MediaOffsetFrame is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_5" clause="7" testNumber="27268"/>
			<description>Entry F in MediaOffsetFrame is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in MediaOffsetFrame is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_5" clause="14" testNumber="27269"/>
			<description>Entry F with type Integer in MediaOffsetFrame shall satisfy possible value predicate: fn:Eval(@F &gt;= 0)</description>
			<test>FHasTypeInteger != true || FIntegerValue &gt;= 0</test>
			<error>
				<message>Entry F with type Integer in MediaOffsetFrame does not satisfy possible value predicate: fn:Eval(@F &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27270"/>
			<description>Entry S in MediaOffsetFrame shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in MediaOffsetFrame is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_5" clause="7" testNumber="27271"/>
			<description>Entry S in MediaOffsetFrame is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in MediaOffsetFrame is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27272"/>
			<description>Entry S with type Name in MediaOffsetFrame shall have value F</description>
			<test>SHasTypeName != true || SNameValue == "F"</test>
			<error>
				<message>Entry S with type Name in MediaOffsetFrame has incorrect value %2 instead of F</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27273"/>
			<description>Entry Type in MediaOffsetFrame shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaOffsetFrame is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27274"/>
			<description>Entry Type with type Name in MediaOffsetFrame shall have value MediaOffset</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaOffset"</test>
			<error>
				<message>Entry Type with type Name in MediaOffsetFrame has incorrect value %2 instead of MediaOffset</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27302"/>
			<description>MediaOffsetMarker shall not contain entries except M, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'M' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>MediaOffsetMarker contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'M' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27303"/>
			<description>Entry M in MediaOffsetMarker shall have type StringText</description>
			<test>containsM == false || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in MediaOffsetMarker is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_5" clause="7" testNumber="27304"/>
			<description>Entry M in MediaOffsetMarker is required</description>
			<test>containsM == true</test>
			<error>
				<message>Entry M in MediaOffsetMarker is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27305"/>
			<description>Entry S in MediaOffsetMarker shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in MediaOffsetMarker is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_5" clause="7" testNumber="27306"/>
			<description>Entry S in MediaOffsetMarker is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in MediaOffsetMarker is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27307"/>
			<description>Entry S with type Name in MediaOffsetMarker shall have value M</description>
			<test>SHasTypeName != true || SNameValue == "M"</test>
			<error>
				<message>Entry S with type Name in MediaOffsetMarker has incorrect value %2 instead of M</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27308"/>
			<description>Entry Type in MediaOffsetMarker shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaOffsetMarker is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27309"/>
			<description>Entry Type with type Name in MediaOffsetMarker shall have value MediaOffset</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaOffset"</test>
			<error>
				<message>Entry Type with type Name in MediaOffsetMarker has incorrect value %2 instead of MediaOffset</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27334"/>
			<description>MediaOffsetTime shall not contain entries except S, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>MediaOffsetTime contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27335"/>
			<description>Entry S in MediaOffsetTime shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in MediaOffsetTime is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_5" clause="7" testNumber="27336"/>
			<description>Entry S in MediaOffsetTime is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in MediaOffsetTime is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27337"/>
			<description>Entry S with type Name in MediaOffsetTime shall have value T</description>
			<test>SHasTypeName != true || SNameValue == "T"</test>
			<error>
				<message>Entry S with type Name in MediaOffsetTime has incorrect value %2 instead of T</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27338"/>
			<description>Entry T with type Dictionary in MediaOffsetTime shall be object Timespan</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in MediaOffsetTime is not object Timespan</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27339"/>
			<description>Entry T in MediaOffsetTime shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in MediaOffsetTime is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_5" clause="7" testNumber="27340"/>
			<description>Entry T in MediaOffsetTime is required</description>
			<test>containsT == true</test>
			<error>
				<message>Entry T in MediaOffsetTime is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27341"/>
			<description>Entry Type in MediaOffsetTime shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaOffsetTime is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27342"/>
			<description>Entry Type with type Name in MediaOffsetTime shall have value MediaOffset</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaOffset"</test>
			<error>
				<message>Entry Type with type Name in MediaOffsetTime has incorrect value %2 instead of MediaOffset</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPermissions">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27370"/>
			<description>MediaPermissions shall not contain entries except TF, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'TF' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>MediaPermissions contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'TF' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPermissions">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27371"/>
			<description>Entry TF in MediaPermissions shall have type StringAscii</description>
			<test>containsTF == false || TFHasTypeStringAscii == true</test>
			<error>
				<message>Entry TF in MediaPermissions is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPermissions">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27372"/>
			<description>Entry TF with type StringAscii in MediaPermissions shall have one of values: TEMPALWAYS, TEMPEXTRACT, TEMPACCESS, TEMPNEVER</description>
			<test>TFHasTypeStringAscii != true || TFStringAsciiValue == "TEMPNEVER" || TFStringAsciiValue == "TEMPALWAYS" || TFStringAsciiValue == "TEMPEXTRACT" || TFStringAsciiValue == "TEMPACCESS"</test>
			<error>
				<message>Entry TF with type StringAscii in MediaPermissions has incorrect value %2 instead of TEMPALWAYS, TEMPEXTRACT, TEMPACCESS, TEMPNEVER</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TFStringAsciiValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPermissions">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27373"/>
			<description>Entry Type in MediaPermissions shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaPermissions is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPermissions">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27374"/>
			<description>Entry Type with type Name in MediaPermissions shall have value MediaPermissions</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaPermissions"</test>
			<error>
				<message>Entry Type with type Name in MediaPermissions has incorrect value %2 instead of MediaPermissions</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27390"/>
			<description>MediaPlayParameters shall not contain entries except BE, MH, PL, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'PL' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>MediaPlayParameters contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'PL' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27391"/>
			<description>Entry BE with type Dictionary in MediaPlayParameters shall be object MediaPlayParametersBE</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in MediaPlayParameters is not object MediaPlayParametersBE</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27392"/>
			<description>Entry BE in MediaPlayParameters shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in MediaPlayParameters is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27393"/>
			<description>Entry MH with type Dictionary in MediaPlayParameters shall be object MediaPlayParametersMH</description>
			<test>MHHasTypeDictionary != true || MH_size == 1</test>
			<error>
				<message>Entry MH with type Dictionary in MediaPlayParameters is not object MediaPlayParametersMH</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27394"/>
			<description>Entry MH in MediaPlayParameters shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in MediaPlayParameters is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27395"/>
			<description>Entry PL with type Dictionary in MediaPlayParameters shall be object MediaPlayers</description>
			<test>PLHasTypeDictionary != true || PL_size == 1</test>
			<error>
				<message>Entry PL with type Dictionary in MediaPlayParameters is not object MediaPlayers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27396"/>
			<description>Entry PL in MediaPlayParameters shall have type Dictionary</description>
			<test>containsPL == false || PLHasTypeDictionary == true</test>
			<error>
				<message>Entry PL in MediaPlayParameters is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27397"/>
			<description>Entry Type in MediaPlayParameters shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaPlayParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27398"/>
			<description>Entry Type with type Name in MediaPlayParameters shall have value MediaPlayParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaPlayParams"</test>
			<error>
				<message>Entry Type with type Name in MediaPlayParameters has incorrect value %2 instead of MediaPlayParams</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27426"/>
			<description>MediaPlayParametersBE shall not contain entries except A, C, D, F, RC, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>MediaPlayParametersBE contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27427"/>
			<description>Entry A in MediaPlayParametersBE shall have type Boolean</description>
			<test>containsA == false || AHasTypeBoolean == true</test>
			<error>
				<message>Entry A in MediaPlayParametersBE is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27428"/>
			<description>Entry C in MediaPlayParametersBE shall have type Boolean</description>
			<test>containsC == false || CHasTypeBoolean == true</test>
			<error>
				<message>Entry C in MediaPlayParametersBE is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27429"/>
			<description>Entry D with type Dictionary in MediaPlayParametersBE shall be object MediaDuration</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in MediaPlayParametersBE is not object MediaDuration</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27430"/>
			<description>Entry D in MediaPlayParametersBE shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in MediaPlayParametersBE is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27431"/>
			<description>Entry F in MediaPlayParametersBE shall have type Integer</description>
			<test>containsF == false || FHasTypeInteger == true</test>
			<error>
				<message>Entry F in MediaPlayParametersBE is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27432"/>
			<description>Entry F with type Integer in MediaPlayParametersBE shall have one of values: 0, 1, 2, 3, 4, 5</description>
			<test>FHasTypeInteger != true || FIntegerValue == 0 || FIntegerValue == 1 || FIntegerValue == 2 || FIntegerValue == 3 || FIntegerValue == 4 || FIntegerValue == 5</test>
			<error>
				<message>Entry F with type Integer in MediaPlayParametersBE has incorrect value %2 instead of 0, 1, 2, 3, 4, 5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27433"/>
			<description>Entry RC in MediaPlayParametersBE shall have type Number</description>
			<test>containsRC == false || RCHasTypeNumber == true</test>
			<error>
				<message>Entry RC in MediaPlayParametersBE is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_5" clause="14" testNumber="27434"/>
			<description>Entry RC with type Number in MediaPlayParametersBE shall satisfy possible value predicate: fn:Eval(@RC &gt;= 0.0)</description>
			<test>RCHasTypeNumber != true || RCNumberValue &gt;= 0.0</test>
			<error>
				<message>Entry RC with type Number in MediaPlayParametersBE does not satisfy possible value predicate: fn:Eval(@RC &gt;= 0.0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27435"/>
			<description>Entry V in MediaPlayParametersBE shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in MediaPlayParametersBE is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_5" clause="14" testNumber="27436"/>
			<description>Entry V with type Integer in MediaPlayParametersBE shall satisfy possible value predicate: fn:Eval((@V &gt;= 0) &amp;&amp; (@V &lt;= 100))</description>
			<test>VHasTypeInteger != true || (VIntegerValue &gt;= 0) &amp;&amp; (VIntegerValue &lt;= 100)</test>
			<error>
				<message>Entry V with type Integer in MediaPlayParametersBE does not satisfy possible value predicate: fn:Eval((@V &gt;= 0) &amp;&amp; (@V &lt;= 100))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27470"/>
			<description>MediaPlayParametersMH shall not contain entries except A, C, D, F, RC, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>MediaPlayParametersMH contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27471"/>
			<description>Entry A in MediaPlayParametersMH shall have type Boolean</description>
			<test>containsA == false || AHasTypeBoolean == true</test>
			<error>
				<message>Entry A in MediaPlayParametersMH is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27472"/>
			<description>Entry C in MediaPlayParametersMH shall have type Boolean</description>
			<test>containsC == false || CHasTypeBoolean == true</test>
			<error>
				<message>Entry C in MediaPlayParametersMH is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27473"/>
			<description>Entry D with type Dictionary in MediaPlayParametersMH shall be object MediaDuration</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in MediaPlayParametersMH is not object MediaDuration</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27474"/>
			<description>Entry D in MediaPlayParametersMH shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in MediaPlayParametersMH is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27475"/>
			<description>Entry F in MediaPlayParametersMH shall have type Integer</description>
			<test>containsF == false || FHasTypeInteger == true</test>
			<error>
				<message>Entry F in MediaPlayParametersMH is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27476"/>
			<description>Entry F with type Integer in MediaPlayParametersMH shall have one of values: 0, 1, 2, 3, 4, 5</description>
			<test>FHasTypeInteger != true || FIntegerValue == 0 || FIntegerValue == 1 || FIntegerValue == 2 || FIntegerValue == 3 || FIntegerValue == 4 || FIntegerValue == 5</test>
			<error>
				<message>Entry F with type Integer in MediaPlayParametersMH has incorrect value %2 instead of 0, 1, 2, 3, 4, 5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27477"/>
			<description>Entry RC in MediaPlayParametersMH shall have type Number</description>
			<test>containsRC == false || RCHasTypeNumber == true</test>
			<error>
				<message>Entry RC in MediaPlayParametersMH is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_5" clause="14" testNumber="27478"/>
			<description>Entry RC with type Number in MediaPlayParametersMH shall satisfy possible value predicate: fn:Eval(@RC &gt;= 0.0)</description>
			<test>RCHasTypeNumber != true || RCNumberValue &gt;= 0.0</test>
			<error>
				<message>Entry RC with type Number in MediaPlayParametersMH does not satisfy possible value predicate: fn:Eval(@RC &gt;= 0.0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27479"/>
			<description>Entry V in MediaPlayParametersMH shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in MediaPlayParametersMH is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_5" clause="14" testNumber="27480"/>
			<description>Entry V with type Integer in MediaPlayParametersMH shall satisfy possible value predicate: fn:Eval((@V &gt;= 0) &amp;&amp; (@V &lt;= 100))</description>
			<test>VHasTypeInteger != true || (VIntegerValue &gt;= 0) &amp;&amp; (VIntegerValue &lt;= 100)</test>
			<error>
				<message>Entry V with type Integer in MediaPlayParametersMH does not satisfy possible value predicate: fn:Eval((@V &gt;= 0) &amp;&amp; (@V &lt;= 100))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27514"/>
			<description>MediaPlayerInfo shall not contain entries except BE, MH, PID, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'PID' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>MediaPlayerInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'PID' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27515"/>
			<description>Entry BE with type Dictionary in MediaPlayerInfo shall be object _UniversalDictionary</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in MediaPlayerInfo is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27516"/>
			<description>Entry BE in MediaPlayerInfo shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in MediaPlayerInfo is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27517"/>
			<description>Entry MH with type Dictionary in MediaPlayerInfo shall be object _UniversalDictionary</description>
			<test>MHHasTypeDictionary != true || MH_size == 1</test>
			<error>
				<message>Entry MH with type Dictionary in MediaPlayerInfo is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27518"/>
			<description>Entry MH in MediaPlayerInfo shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in MediaPlayerInfo is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27519"/>
			<description>Entry PID with type Dictionary in MediaPlayerInfo shall be object SoftwareIdentifier</description>
			<test>PIDHasTypeDictionary != true || PID_size == 1</test>
			<error>
				<message>Entry PID with type Dictionary in MediaPlayerInfo is not object SoftwareIdentifier</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27520"/>
			<description>Entry PID in MediaPlayerInfo shall have type Dictionary</description>
			<test>containsPID == false || PIDHasTypeDictionary == true</test>
			<error>
				<message>Entry PID in MediaPlayerInfo is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27521"/>
			<description>Entry Type in MediaPlayerInfo shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaPlayerInfo is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27522"/>
			<description>Entry Type with type Name in MediaPlayerInfo shall have value MediaPlayerInfo</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaPlayerInfo"</test>
			<error>
				<message>Entry Type with type Name in MediaPlayerInfo has incorrect value %2 instead of MediaPlayerInfo</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27550"/>
			<description>MediaPlayers shall not contain entries except A, MU, NU, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'MU' &amp;&amp; elem != 'NU' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>MediaPlayers contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'MU' &amp;&amp; elem != 'NU' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27551"/>
			<description>Entry A with type Array in MediaPlayers shall be object ArrayOfMediaPlayerInfo</description>
			<test>AHasTypeArray != true || A_size == 1</test>
			<error>
				<message>Entry A with type Array in MediaPlayers is not object ArrayOfMediaPlayerInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27552"/>
			<description>Entry A in MediaPlayers shall have type Array</description>
			<test>containsA == false || AHasTypeArray == true</test>
			<error>
				<message>Entry A in MediaPlayers is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27553"/>
			<description>Entry MU with type Array in MediaPlayers shall be object ArrayOfMediaPlayerInfo</description>
			<test>MUHasTypeArray != true || MU_size == 1</test>
			<error>
				<message>Entry MU with type Array in MediaPlayers is not object ArrayOfMediaPlayerInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27554"/>
			<description>Entry MU in MediaPlayers shall have type Array</description>
			<test>containsMU == false || MUHasTypeArray == true</test>
			<error>
				<message>Entry MU in MediaPlayers is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27555"/>
			<description>Entry NU with type Array in MediaPlayers shall be object ArrayOfMediaPlayerInfo</description>
			<test>NUHasTypeArray != true || NU_size == 1</test>
			<error>
				<message>Entry NU with type Array in MediaPlayers is not object ArrayOfMediaPlayerInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27556"/>
			<description>Entry NU in MediaPlayers shall have type Array</description>
			<test>containsNU == false || NUHasTypeArray == true</test>
			<error>
				<message>Entry NU in MediaPlayers is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27557"/>
			<description>Entry Type in MediaPlayers shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaPlayers is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27558"/>
			<description>Entry Type with type Name in MediaPlayers shall have value MediaPlayers</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaPlayers"</test>
			<error>
				<message>Entry Type with type Name in MediaPlayers has incorrect value %2 instead of MediaPlayers</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParameters">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27586"/>
			<description>MediaScreenParameters shall not contain entries except BE, MH, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>MediaScreenParameters contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParameters">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27587"/>
			<description>Entry BE with type Dictionary in MediaScreenParameters shall be object MediaScreenParametersMHBE</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in MediaScreenParameters is not object MediaScreenParametersMHBE</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27588"/>
			<description>Entry BE in MediaScreenParameters shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in MediaScreenParameters is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParameters">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27589"/>
			<description>Entry MH with type Dictionary in MediaScreenParameters shall be object MediaScreenParametersMHBE</description>
			<test>MHHasTypeDictionary != true || MH_size == 1</test>
			<error>
				<message>Entry MH with type Dictionary in MediaScreenParameters is not object MediaScreenParametersMHBE</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27590"/>
			<description>Entry MH in MediaScreenParameters shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in MediaScreenParameters is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27591"/>
			<description>Entry Type in MediaScreenParameters shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaScreenParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParameters">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27592"/>
			<description>Entry Type with type Name in MediaScreenParameters shall have value MediaScreenParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaScreenParams"</test>
			<error>
				<message>Entry Type with type Name in MediaScreenParameters has incorrect value %2 instead of MediaScreenParams</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27614"/>
			<description>MediaScreenParametersMHBE shall not contain entries except B, F, M, O, W</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'O' &amp;&amp; elem != 'W').length == 0</test>
			<error>
				<message>MediaScreenParametersMHBE contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'O' &amp;&amp; elem != 'W').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27615"/>
			<description>Entry B with type Array in MediaScreenParametersMHBE shall be object ArrayOf_3RGBNumbers</description>
			<test>BHasTypeArray != true || B_size == 1</test>
			<error>
				<message>Entry B with type Array in MediaScreenParametersMHBE is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27616"/>
			<description>Entry B in MediaScreenParametersMHBE shall have type Array</description>
			<test>containsB == false || BHasTypeArray == true</test>
			<error>
				<message>Entry B in MediaScreenParametersMHBE is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27617"/>
			<description>Entry F with type Dictionary in MediaScreenParametersMHBE shall be object FloatingWindowParameters</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in MediaScreenParametersMHBE is not object FloatingWindowParameters</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27618"/>
			<description>Entry F in MediaScreenParametersMHBE shall have type Dictionary</description>
			<test>containsF == false || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in MediaScreenParametersMHBE is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27619"/>
			<description>Entry M in MediaScreenParametersMHBE shall have type Integer</description>
			<test>containsM == false || MHasTypeInteger == true</test>
			<error>
				<message>Entry M in MediaScreenParametersMHBE is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27620"/>
			<description>Entry M with type Integer in MediaScreenParametersMHBE shall have one of values: 0, 1, 2, 3, 4, 5, 6</description>
			<test>MHasTypeInteger != true || MIntegerValue == 0 || MIntegerValue == 1 || MIntegerValue == 2 || MIntegerValue == 3 || MIntegerValue == 4 || MIntegerValue == 5 || MIntegerValue == 6</test>
			<error>
				<message>Entry M with type Integer in MediaScreenParametersMHBE has incorrect value %2 instead of 0, 1, 2, 3, 4, 5, 6</message>
				<arguments>
					<argument>keyName</argument>
					<argument>MIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27621"/>
			<description>Entry O in MediaScreenParametersMHBE shall have type Number</description>
			<test>containsO == false || OHasTypeNumber == true</test>
			<error>
				<message>Entry O in MediaScreenParametersMHBE is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_5" clause="14" testNumber="27622"/>
			<description>Entry O with type Number in MediaScreenParametersMHBE shall satisfy possible value predicate: fn:Eval((@O &gt;= 0.0) &amp;&amp; (@O &lt;= 1.0))</description>
			<test>OHasTypeNumber != true || (ONumberValue &gt;= 0.0) &amp;&amp; (ONumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry O with type Number in MediaScreenParametersMHBE does not satisfy possible value predicate: fn:Eval((@O &gt;= 0.0) &amp;&amp; (@O &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27623"/>
			<description>Entry W in MediaScreenParametersMHBE shall have type Integer</description>
			<test>containsW == false || WHasTypeInteger == true</test>
			<error>
				<message>Entry W in MediaScreenParametersMHBE is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27624"/>
			<description>Entry W with type Integer in MediaScreenParametersMHBE shall have one of values: 0, 1, 2, 3</description>
			<test>WHasTypeInteger != true || WIntegerValue == 0 || WIntegerValue == 1 || WIntegerValue == 2 || WIntegerValue == 3</test>
			<error>
				<message>Entry W with type Integer in MediaScreenParametersMHBE has incorrect value %2 instead of 0, 1, 2, 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>WIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27685"/>
			<description>Metadata shall not contain entries except DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>Metadata contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27686"/>
			<description>Entry DL in Metadata shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in Metadata is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="9" testNumber="27687"/>
			<description>Entry DL with type Integer in Metadata shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in Metadata does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27688"/>
			<description>Entry DecodeParms with type Array in Metadata shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in Metadata is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27689"/>
			<description>Entry DecodeParms with type Dictionary in Metadata shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in Metadata is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27690"/>
			<description>Entry DecodeParms in Metadata shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in Metadata is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="9" testNumber="27691"/>
			<description>Entry DecodeParms with type Array in Metadata shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in Metadata does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27692"/>
			<description>Entry F with type Dictionary in Metadata shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in Metadata is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27693"/>
			<description>Entry F in Metadata shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in Metadata is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27694"/>
			<description>Entry FDecodeParms with type Array in Metadata shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in Metadata is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27695"/>
			<description>Entry FDecodeParms with type Dictionary in Metadata shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in Metadata is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27696"/>
			<description>Entry FDecodeParms in Metadata shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in Metadata is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="9" testNumber="27697"/>
			<description>Entry FDecodeParms with type Array in Metadata shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in Metadata does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27698"/>
			<description>Entry FFilter with type Array in Metadata shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in Metadata is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27699"/>
			<description>Entry FFilter in Metadata shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in Metadata is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="9" testNumber="27700"/>
			<description>Entry FFilter with type Array in Metadata shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in Metadata does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27701"/>
			<description>Entry FFilter with type Name in Metadata shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in Metadata has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27702"/>
			<description>Entry Filter with type Array in Metadata shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in Metadata is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27703"/>
			<description>Entry Filter in Metadata shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in Metadata is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="9" testNumber="27704"/>
			<description>Entry Filter with type Array in Metadata shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in Metadata does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27705"/>
			<description>Entry Filter with type Name in Metadata shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in Metadata has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27706"/>
			<description>Entry Length in Metadata shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in Metadata is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="7" testNumber="27707"/>
			<description>Entry Length in Metadata is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in Metadata is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27708"/>
			<description>Entry Subtype in Metadata shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in Metadata is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="7" testNumber="27709"/>
			<description>Entry Subtype in Metadata is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in Metadata is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27710"/>
			<description>Entry Subtype with type Name in Metadata shall have value XML</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "XML"</test>
			<error>
				<message>Entry Subtype with type Name in Metadata has incorrect value %2 instead of XML</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27711"/>
			<description>Entry Type in Metadata shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Metadata is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="7" testNumber="27712"/>
			<description>Entry Type in Metadata is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in Metadata is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27713"/>
			<description>Entry Type with type Name in Metadata shall have value Metadata</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Metadata"</test>
			<error>
				<message>Entry Type with type Name in Metadata has incorrect value %2 instead of Metadata</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27829"/>
			<description>MicrosoftWindowsLaunchParam shall not contain entries except D, F, O, P</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P').length == 0</test>
			<error>
				<message>MicrosoftWindowsLaunchParam contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27830"/>
			<description>Entry D in MicrosoftWindowsLaunchParam shall have type StringByte</description>
			<test>containsD == false || DHasTypeStringByte == true</test>
			<error>
				<message>Entry D in MicrosoftWindowsLaunchParam is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27831"/>
			<description>Entry F in MicrosoftWindowsLaunchParam shall have type StringByte</description>
			<test>containsF == false || FHasTypeStringByte == true</test>
			<error>
				<message>Entry F in MicrosoftWindowsLaunchParam is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_5" clause="7" testNumber="27832"/>
			<description>Entry F in MicrosoftWindowsLaunchParam is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in MicrosoftWindowsLaunchParam is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27833"/>
			<description>Entry O in MicrosoftWindowsLaunchParam shall have type StringAscii</description>
			<test>containsO == false || OHasTypeStringAscii == true</test>
			<error>
				<message>Entry O in MicrosoftWindowsLaunchParam is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27834"/>
			<description>Entry O with type StringAscii in MicrosoftWindowsLaunchParam shall have one of values: print, open</description>
			<test>OHasTypeStringAscii != true || OStringAsciiValue == "open" || OStringAsciiValue == "print"</test>
			<error>
				<message>Entry O with type StringAscii in MicrosoftWindowsLaunchParam has incorrect value %2 instead of print, open</message>
				<arguments>
					<argument>keyName</argument>
					<argument>OStringAsciiValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27835"/>
			<description>Entry P in MicrosoftWindowsLaunchParam shall have type StringByte</description>
			<test>containsP == false || PHasTypeStringByte == true</test>
			<error>
				<message>Entry P in MicrosoftWindowsLaunchParam is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27857"/>
			<description>MinimumBitDepth shall not contain entries except M, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'M' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>MinimumBitDepth contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'M' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27858"/>
			<description>Entry M in MinimumBitDepth shall have type Integer</description>
			<test>containsM == false || MHasTypeInteger == true</test>
			<error>
				<message>Entry M in MinimumBitDepth is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27859"/>
			<description>Entry M with type Integer in MinimumBitDepth shall have one of values: 0, 1, 2, 3, 4, 5, 6</description>
			<test>MHasTypeInteger != true || MIntegerValue == 0 || MIntegerValue == 1 || MIntegerValue == 2 || MIntegerValue == 3 || MIntegerValue == 4 || MIntegerValue == 5 || MIntegerValue == 6</test>
			<error>
				<message>Entry M with type Integer in MinimumBitDepth has incorrect value %2 instead of 0, 1, 2, 3, 4, 5, 6</message>
				<arguments>
					<argument>keyName</argument>
					<argument>MIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27860"/>
			<description>Entry Type in MinimumBitDepth shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MinimumBitDepth is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27861"/>
			<description>Entry Type with type Name in MinimumBitDepth shall have value MinBitDepth</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MinBitDepth"</test>
			<error>
				<message>Entry Type with type Name in MinimumBitDepth has incorrect value %2 instead of MinBitDepth</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27862"/>
			<description>Entry V in MinimumBitDepth shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in MinimumBitDepth is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_5" clause="7" testNumber="27863"/>
			<description>Entry V in MinimumBitDepth is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in MinimumBitDepth is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_5" clause="9" testNumber="27864"/>
			<description>Entry V with type Integer in MinimumBitDepth shall satisfy special case: fn:Eval(@V &gt; 0)</description>
			<test>VHasTypeInteger != true || (VIntegerValue &gt; 0)</test>
			<error>
				<message>Entry V with type Integer in MinimumBitDepth does not satisfy special case: fn:Eval(@V &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27889"/>
			<description>MinimumScreenSize shall not contain entries except M, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'M' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>MinimumScreenSize contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'M' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27890"/>
			<description>Entry M in MinimumScreenSize shall have type Integer</description>
			<test>containsM == false || MHasTypeInteger == true</test>
			<error>
				<message>Entry M in MinimumScreenSize is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27891"/>
			<description>Entry M with type Integer in MinimumScreenSize shall have one of values: 0, 1, 2, 3, 4, 5, 6</description>
			<test>MHasTypeInteger != true || MIntegerValue == 0 || MIntegerValue == 1 || MIntegerValue == 2 || MIntegerValue == 3 || MIntegerValue == 4 || MIntegerValue == 5 || MIntegerValue == 6</test>
			<error>
				<message>Entry M with type Integer in MinimumScreenSize has incorrect value %2 instead of 0, 1, 2, 3, 4, 5, 6</message>
				<arguments>
					<argument>keyName</argument>
					<argument>MIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27892"/>
			<description>Entry Type in MinimumScreenSize shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MinimumScreenSize is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_5" clause="6" testNumber="27893"/>
			<description>Entry Type with type Name in MinimumScreenSize shall have value MinScreenSize</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MinScreenSize"</test>
			<error>
				<message>Entry Type with type Name in MinimumScreenSize has incorrect value %2 instead of MinScreenSize</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27894"/>
			<description>Entry V with type Array in MinimumScreenSize shall be object ArrayOf_2Integers</description>
			<test>VHasTypeArray != true || V_size == 1</test>
			<error>
				<message>Entry V with type Array in MinimumScreenSize is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27895"/>
			<description>Entry V in MinimumScreenSize shall have type Array</description>
			<test>containsV == false || VHasTypeArray == true</test>
			<error>
				<message>Entry V in MinimumScreenSize is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_5" clause="7" testNumber="27896"/>
			<description>Entry V in MinimumScreenSize is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in MinimumScreenSize is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_5" clause="1" testNumber="27954"/>
			<description>Movie shall not contain entries except Aspect, F, Poster, Rotate</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Aspect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Poster' &amp;&amp; elem != 'Rotate').length == 0</test>
			<error>
				<message>Movie contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Aspect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Poster' &amp;&amp; elem != 'Rotate').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27955"/>
			<description>Entry Aspect with type Array in Movie shall be object ArrayOf_2Numbers</description>
			<test>AspectHasTypeArray != true || Aspect_size == 1</test>
			<error>
				<message>Entry Aspect with type Array in Movie is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27956"/>
			<description>Entry Aspect in Movie shall have type Array</description>
			<test>containsAspect == false || AspectHasTypeArray == true</test>
			<error>
				<message>Entry Aspect in Movie is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27957"/>
			<description>Entry F with type Dictionary in Movie shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in Movie is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27958"/>
			<description>Entry F in Movie shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in Movie is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_5" clause="7" testNumber="27959"/>
			<description>Entry F in Movie is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in Movie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_5" clause="17" testNumber="27960"/>
			<description>Entry Poster with type Stream in Movie shall be object XObjectImage</description>
			<test>PosterHasTypeStream != true || Poster_size == 1</test>
			<error>
				<message>Entry Poster with type Stream in Movie is not object XObjectImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27961"/>
			<description>Entry Poster in Movie shall have one of types: Stream, Boolean</description>
			<test>containsPoster == false || PosterHasTypeStream == true || PosterHasTypeBoolean == true</test>
			<error>
				<message>Entry Poster in Movie is not one of types: Stream, Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_5" clause="10" testNumber="27962"/>
			<description>Entry Poster with type Stream in Movie shall be indirect</description>
			<test>PosterHasTypeStream != true || isPosterIndirect == true</test>
			<error>
				<message>Entry Poster with type Stream in Movie is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_5" clause="8" testNumber="27963"/>
			<description>Entry Rotate in Movie shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in Movie is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_5" clause="14" testNumber="27964"/>
			<description>Entry Rotate with type Integer in Movie shall satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in Movie does not satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="1" testNumber="28064"/>
			<description>MovieActivation shall not contain entries except Duration, FWPosition, FWScale, Mode, Rate, ShowControls, Start, Synchronous, Volume</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Duration' &amp;&amp; elem != 'FWPosition' &amp;&amp; elem != 'FWScale' &amp;&amp; elem != 'Mode' &amp;&amp; elem != 'Rate' &amp;&amp; elem != 'ShowControls' &amp;&amp; elem != 'Start' &amp;&amp; elem != 'Synchronous' &amp;&amp; elem != 'Volume').length == 0</test>
			<error>
				<message>MovieActivation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Duration' &amp;&amp; elem != 'FWPosition' &amp;&amp; elem != 'FWScale' &amp;&amp; elem != 'Mode' &amp;&amp; elem != 'Rate' &amp;&amp; elem != 'ShowControls' &amp;&amp; elem != 'Start' &amp;&amp; elem != 'Synchronous' &amp;&amp; elem != 'Volume').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28065"/>
			<description>Entry Duration with type Array in MovieActivation shall be object ArrayOfDuration</description>
			<test>DurationHasTypeArray != true || Duration_size == 1</test>
			<error>
				<message>Entry Duration with type Array in MovieActivation is not object ArrayOfDuration</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28066"/>
			<description>Entry Duration in MovieActivation shall have one of types: Array, StringByte, Integer</description>
			<test>containsDuration == false || DurationHasTypeArray == true || DurationHasTypeStringByte == true || DurationHasTypeInteger == true</test>
			<error>
				<message>Entry Duration in MovieActivation is not one of types: Array, StringByte, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="28067"/>
			<description>Entry Duration with type StringByte in MovieActivation shall satisfy special case: fn:Eval(fn:StringLength(Duration) == 8)</description>
			<test>DurationHasTypeStringByte != true || (DurationStringSize == 8)</test>
			<error>
				<message>Entry Duration with type StringByte in MovieActivation does not satisfy special case: fn:Eval(fn:StringLength(Duration) == 8)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="28068"/>
			<description>Entry Duration with type Integer in MovieActivation shall satisfy special case: fn:Eval(@Duration &gt; 0)</description>
			<test>DurationHasTypeInteger != true || (DurationIntegerValue &gt; 0)</test>
			<error>
				<message>Entry Duration with type Integer in MovieActivation does not satisfy special case: fn:Eval(@Duration &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28069"/>
			<description>Entry FWPosition with type Array in MovieActivation shall be object ArrayOf_2Numbers</description>
			<test>FWPositionHasTypeArray != true || FWPosition_size == 1</test>
			<error>
				<message>Entry FWPosition with type Array in MovieActivation is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28070"/>
			<description>Entry FWPosition in MovieActivation shall have type Array</description>
			<test>containsFWPosition == false || FWPositionHasTypeArray == true</test>
			<error>
				<message>Entry FWPosition in MovieActivation is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="28071"/>
			<description>Entry FWPosition with type Array in MovieActivation shall satisfy special case: fn:Eval((FWPosition::@0&gt;= 0.0) &amp;&amp; (FWPosition::@0&lt;= 1.0) &amp;&amp; (FWPosition::@1&gt;= 0.0) &amp;&amp; (FWPosition::@1&lt;= 1.0))</description>
			<test>FWPositionHasTypeArray != true || ((FWPosition0NumberValue &gt;= 0.0) &amp;&amp; (FWPosition0NumberValue &lt;= 1.0) &amp;&amp; (FWPosition1NumberValue &gt;= 0.0) &amp;&amp; (FWPosition1NumberValue &lt;= 1.0))</test>
			<error>
				<message>Entry FWPosition with type Array in MovieActivation does not satisfy special case: fn:Eval((FWPosition::@0&gt;= 0.0) &amp;&amp; (FWPosition::@0&lt;= 1.0) &amp;&amp; (FWPosition::@1&gt;= 0.0) &amp;&amp; (FWPosition::@1&lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28072"/>
			<description>Entry FWScale with type Array in MovieActivation shall be object ArrayOf_2Integers</description>
			<test>FWScaleHasTypeArray != true || FWScale_size == 1</test>
			<error>
				<message>Entry FWScale with type Array in MovieActivation is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28073"/>
			<description>Entry FWScale in MovieActivation shall have type Array</description>
			<test>containsFWScale == false || FWScaleHasTypeArray == true</test>
			<error>
				<message>Entry FWScale in MovieActivation is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="28074"/>
			<description>Entry FWScale with type Array in MovieActivation shall satisfy special case: fn:Eval((FWScale::@0&gt; 0) &amp;&amp; (FWScale::@1&gt; 0))</description>
			<test>FWScaleHasTypeArray != true || ((FWScale0IntegerValue &gt; 0) &amp;&amp; (FWScale1IntegerValue &gt; 0))</test>
			<error>
				<message>Entry FWScale with type Array in MovieActivation does not satisfy special case: fn:Eval((FWScale::@0&gt; 0) &amp;&amp; (FWScale::@1&gt; 0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28075"/>
			<description>Entry Mode in MovieActivation shall have type Name</description>
			<test>containsMode == false || ModeHasTypeName == true</test>
			<error>
				<message>Entry Mode in MovieActivation is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="6" testNumber="28076"/>
			<description>Entry Mode with type Name in MovieActivation shall have one of values: Palindrome, Once, Repeat, Open</description>
			<test>ModeHasTypeName != true || ModeNameValue == "Once" || ModeNameValue == "Open" || ModeNameValue == "Repeat" || ModeNameValue == "Palindrome"</test>
			<error>
				<message>Entry Mode with type Name in MovieActivation has incorrect value %2 instead of Palindrome, Once, Repeat, Open</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28077"/>
			<description>Entry Rate in MovieActivation shall have type Number</description>
			<test>containsRate == false || RateHasTypeNumber == true</test>
			<error>
				<message>Entry Rate in MovieActivation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28078"/>
			<description>Entry ShowControls in MovieActivation shall have type Boolean</description>
			<test>containsShowControls == false || ShowControlsHasTypeBoolean == true</test>
			<error>
				<message>Entry ShowControls in MovieActivation is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28079"/>
			<description>Entry Start with type Array in MovieActivation shall be object ArrayOfDuration</description>
			<test>StartHasTypeArray != true || Start_size == 1</test>
			<error>
				<message>Entry Start with type Array in MovieActivation is not object ArrayOfDuration</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28080"/>
			<description>Entry Start in MovieActivation shall have one of types: Array, StringByte, Integer</description>
			<test>containsStart == false || StartHasTypeArray == true || StartHasTypeStringByte == true || StartHasTypeInteger == true</test>
			<error>
				<message>Entry Start in MovieActivation is not one of types: Array, StringByte, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="28081"/>
			<description>Entry Start with type StringByte in MovieActivation shall satisfy special case: fn:Eval(fn:StringLength(Start) == 8)</description>
			<test>StartHasTypeStringByte != true || (StartStringSize == 8)</test>
			<error>
				<message>Entry Start with type StringByte in MovieActivation does not satisfy special case: fn:Eval(fn:StringLength(Start) == 8)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="28082"/>
			<description>Entry Start with type Integer in MovieActivation shall satisfy special case: fn:Eval(@Start &gt; 0)</description>
			<test>StartHasTypeInteger != true || (StartIntegerValue &gt; 0)</test>
			<error>
				<message>Entry Start with type Integer in MovieActivation does not satisfy special case: fn:Eval(@Start &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28083"/>
			<description>Entry Synchronous in MovieActivation shall have type Boolean</description>
			<test>containsSynchronous == false || SynchronousHasTypeBoolean == true</test>
			<error>
				<message>Entry Synchronous in MovieActivation is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28084"/>
			<description>Entry Volume in MovieActivation shall have type Number</description>
			<test>containsVolume == false || VolumeHasTypeNumber == true</test>
			<error>
				<message>Entry Volume in MovieActivation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_5" clause="14" testNumber="28085"/>
			<description>Entry Volume with type Number in MovieActivation shall satisfy possible value predicate: fn:Eval((@Volume &gt;= -1) &amp;&amp; (@Volume &lt;= 1))</description>
			<test>VolumeHasTypeNumber != true || (VolumeNumberValue &gt;= - 1) &amp;&amp; (VolumeNumberValue &lt;= 1)</test>
			<error>
				<message>Entry Volume with type Number in MovieActivation does not satisfy possible value predicate: fn:Eval((@Volume &gt;= -1) &amp;&amp; (@Volume &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="1" testNumber="28189"/>
			<description>Name shall not contain entries except AP, AlternatePresentations, Dests, EmbeddedFiles, IDS, JavaScript, Pages, Renditions, Templates, URLS</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AlternatePresentations' &amp;&amp; elem != 'Dests' &amp;&amp; elem != 'EmbeddedFiles' &amp;&amp; elem != 'IDS' &amp;&amp; elem != 'JavaScript' &amp;&amp; elem != 'Pages' &amp;&amp; elem != 'Renditions' &amp;&amp; elem != 'Templates' &amp;&amp; elem != 'URLS').length == 0</test>
			<error>
				<message>Name contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AlternatePresentations' &amp;&amp; elem != 'Dests' &amp;&amp; elem != 'EmbeddedFiles' &amp;&amp; elem != 'IDS' &amp;&amp; elem != 'JavaScript' &amp;&amp; elem != 'Pages' &amp;&amp; elem != 'Renditions' &amp;&amp; elem != 'Templates' &amp;&amp; elem != 'URLS').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28190"/>
			<description>Entry AP with type NameTree in Name shall be object NameNameTreeAP</description>
			<test>APHasTypeNameTree != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type NameTree in Name is not object NameNameTreeAP</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28191"/>
			<description>Entry AP in Name shall have type NameTree</description>
			<test>containsAP == false || APHasTypeNameTree == true</test>
			<error>
				<message>Entry AP in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28192"/>
			<description>Entry AlternatePresentations with type NameTree in Name shall be object NameNameTreeAlternatePresentations</description>
			<test>AlternatePresentationsHasTypeNameTree != true || AlternatePresentations_size == 1</test>
			<error>
				<message>Entry AlternatePresentations with type NameTree in Name is not object NameNameTreeAlternatePresentations</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28193"/>
			<description>Entry AlternatePresentations in Name shall have type NameTree</description>
			<test>containsAlternatePresentations == false || AlternatePresentationsHasTypeNameTree == true</test>
			<error>
				<message>Entry AlternatePresentations in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28194"/>
			<description>Entry Dests with type NameTree in Name shall be object NameNameTreeDests</description>
			<test>DestsHasTypeNameTree != true || Dests_size == 1</test>
			<error>
				<message>Entry Dests with type NameTree in Name is not object NameNameTreeDests</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28195"/>
			<description>Entry Dests in Name shall have type NameTree</description>
			<test>containsDests == false || DestsHasTypeNameTree == true</test>
			<error>
				<message>Entry Dests in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28196"/>
			<description>Entry EmbeddedFiles with type NameTree in Name shall be object NameNameTreeEmbeddedFiles</description>
			<test>EmbeddedFilesHasTypeNameTree != true || EmbeddedFiles_size == 1</test>
			<error>
				<message>Entry EmbeddedFiles with type NameTree in Name is not object NameNameTreeEmbeddedFiles</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28197"/>
			<description>Entry EmbeddedFiles in Name shall have type NameTree</description>
			<test>containsEmbeddedFiles == false || EmbeddedFilesHasTypeNameTree == true</test>
			<error>
				<message>Entry EmbeddedFiles in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28198"/>
			<description>Entry IDS with type NameTree in Name shall be object NameNameTreeIDS</description>
			<test>IDSHasTypeNameTree != true || IDS_size == 1</test>
			<error>
				<message>Entry IDS with type NameTree in Name is not object NameNameTreeIDS</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28199"/>
			<description>Entry IDS in Name shall have type NameTree</description>
			<test>containsIDS == false || IDSHasTypeNameTree == true</test>
			<error>
				<message>Entry IDS in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28200"/>
			<description>Entry JavaScript with type NameTree in Name shall be object NameNameTreeJavaScript</description>
			<test>JavaScriptHasTypeNameTree != true || JavaScript_size == 1</test>
			<error>
				<message>Entry JavaScript with type NameTree in Name is not object NameNameTreeJavaScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28201"/>
			<description>Entry JavaScript in Name shall have type NameTree</description>
			<test>containsJavaScript == false || JavaScriptHasTypeNameTree == true</test>
			<error>
				<message>Entry JavaScript in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28202"/>
			<description>Entry Pages with type NameTree in Name shall be object NameNameTreePages</description>
			<test>PagesHasTypeNameTree != true || Pages_size == 1</test>
			<error>
				<message>Entry Pages with type NameTree in Name is not object NameNameTreePages</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28203"/>
			<description>Entry Pages in Name shall have type NameTree</description>
			<test>containsPages == false || PagesHasTypeNameTree == true</test>
			<error>
				<message>Entry Pages in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28204"/>
			<description>Entry Renditions with type NameTree in Name shall be object NameNameTreeRenditions</description>
			<test>RenditionsHasTypeNameTree != true || Renditions_size == 1</test>
			<error>
				<message>Entry Renditions with type NameTree in Name is not object NameNameTreeRenditions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28205"/>
			<description>Entry Renditions in Name shall have type NameTree</description>
			<test>containsRenditions == false || RenditionsHasTypeNameTree == true</test>
			<error>
				<message>Entry Renditions in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28206"/>
			<description>Entry Templates with type NameTree in Name shall be object NameNameTreeTemplates</description>
			<test>TemplatesHasTypeNameTree != true || Templates_size == 1</test>
			<error>
				<message>Entry Templates with type NameTree in Name is not object NameNameTreeTemplates</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28207"/>
			<description>Entry Templates in Name shall have type NameTree</description>
			<test>containsTemplates == false || TemplatesHasTypeNameTree == true</test>
			<error>
				<message>Entry Templates in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28208"/>
			<description>Entry URLS with type NameTree in Name shall be object NameNameTreeURLS</description>
			<test>URLSHasTypeNameTree != true || URLS_size == 1</test>
			<error>
				<message>Entry URLS with type NameTree in Name is not object NameNameTreeURLS</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28209"/>
			<description>Entry URLS in Name shall have type NameTree</description>
			<test>containsURLS == false || URLSHasTypeNameTree == true</test>
			<error>
				<message>Entry URLS in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeAP">
			<id specification="ISO_32000_1_5" clause="18" testNumber="28279"/>
			<description>Entry * in NameNameTreeAP shall be object NameNameTreeAPEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeAP is not object NameNameTreeAPEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeAPEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28285"/>
			<description>Entry with type Stream in NameNameTreeAP shall be one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in NameNameTreeAP is not one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeAlternatePresentations">
			<id specification="ISO_32000_1_5" clause="18" testNumber="28290"/>
			<description>Entry * in NameNameTreeAlternatePresentations shall be object NameNameTreeAlternatePresentationsEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeAlternatePresentations is not object NameNameTreeAlternatePresentationsEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeAlternatePresentationsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28296"/>
			<description>Entry with type Dictionary in NameNameTreeAlternatePresentations shall be object SlideShow</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeAlternatePresentations is not object SlideShow</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeAlternatePresentationsEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28297"/>
			<description>Entry in NameNameTreeAlternatePresentations shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in NameNameTreeAlternatePresentations is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeDests">
			<id specification="ISO_32000_1_5" clause="18" testNumber="28307"/>
			<description>Entry * in NameNameTreeDests shall be object NameNameTreeDestsEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeDests is not object NameNameTreeDestsEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeDestsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28317"/>
			<description>Entry with type Array in NameNameTreeDests shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in NameNameTreeDests is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeDestsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28318"/>
			<description>Entry with type Dictionary in NameNameTreeDests shall be object DestDict</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeDests is not object DestDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeEmbeddedFiles">
			<id specification="ISO_32000_1_5" clause="18" testNumber="28326"/>
			<description>Entry * in NameNameTreeEmbeddedFiles shall be object NameNameTreeEmbeddedFilesEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeEmbeddedFiles is not object NameNameTreeEmbeddedFilesEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeEmbeddedFilesEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28332"/>
			<description>Entry with type Dictionary in NameNameTreeEmbeddedFiles shall be object FileSpecification</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeEmbeddedFiles is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeEmbeddedFilesEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28333"/>
			<description>Entry in NameNameTreeEmbeddedFiles shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in NameNameTreeEmbeddedFiles is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeIDS">
			<id specification="ISO_32000_1_5" clause="18" testNumber="28342"/>
			<description>Entry * in NameNameTreeIDS shall be object NameNameTreeIDSEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeIDS is not object NameNameTreeIDSEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeIDSEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28348"/>
			<description>Entry with type Dictionary in NameNameTreeIDS shall be one of objects WebCaptureImageSet, WebCapturePageSet</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeIDS is not one of objects WebCaptureImageSet, WebCapturePageSet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeJavaScript">
			<id specification="ISO_32000_1_5" clause="18" testNumber="28354"/>
			<description>Entry * in NameNameTreeJavaScript shall be object NameNameTreeJavaScriptEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeJavaScript is not object NameNameTreeJavaScriptEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeJavaScriptEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28362"/>
			<description>Entry with type Dictionary in NameNameTreeJavaScript shall be object ActionECMAScript</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeJavaScript is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeJavaScriptEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28363"/>
			<description>Entry in NameNameTreeJavaScript shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in NameNameTreeJavaScript is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreePages">
			<id specification="ISO_32000_1_5" clause="18" testNumber="28372"/>
			<description>Entry * in NameNameTreePages shall be object NameNameTreePagesEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreePages is not object NameNameTreePagesEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreePagesEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28380"/>
			<description>Entry with type Dictionary in NameNameTreePages shall be object PageObject</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreePages is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreePagesEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28381"/>
			<description>Entry in NameNameTreePages shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in NameNameTreePages is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeRenditions">
			<id specification="ISO_32000_1_5" clause="18" testNumber="28388"/>
			<description>Entry * in NameNameTreeRenditions shall be object NameNameTreeRenditionsEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeRenditions is not object NameNameTreeRenditionsEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeRenditionsEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28392"/>
			<description>Entry with type Dictionary in NameNameTreeRenditions shall be one of objects RenditionMedia, RenditionSelector</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeRenditions is not one of objects RenditionMedia, RenditionSelector</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeTemplates">
			<id specification="ISO_32000_1_5" clause="18" testNumber="28398"/>
			<description>Entry * in NameNameTreeTemplates shall be object NameNameTreeTemplatesEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeTemplates is not object NameNameTreeTemplatesEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeTemplatesEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28406"/>
			<description>Entry with type Dictionary in NameNameTreeTemplates shall be object PageObject</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeTemplates is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeTemplatesEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28407"/>
			<description>Entry in NameNameTreeTemplates shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in NameNameTreeTemplates is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeURLS">
			<id specification="ISO_32000_1_5" clause="18" testNumber="28416"/>
			<description>Entry * in NameNameTreeURLS shall be object NameNameTreeURLSEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeURLS is not object NameNameTreeURLSEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeURLSEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28422"/>
			<description>Entry with type Dictionary in NameNameTreeURLS shall be one of objects WebCaptureImageSet, WebCapturePageSet</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeURLS is not one of objects WebCaptureImageSet, WebCapturePageSet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_5" clause="1" testNumber="28441"/>
			<description>NavNode shall not contain entries except Dur, NA, Next, PA, Prev, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Dur' &amp;&amp; elem != 'NA' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'PA' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>NavNode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Dur' &amp;&amp; elem != 'NA' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'PA' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28442"/>
			<description>Entry Dur in NavNode shall have type Number</description>
			<test>containsDur == false || DurHasTypeNumber == true</test>
			<error>
				<message>Entry Dur in NavNode is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28443"/>
			<description>Entry NA with type Dictionary in NavNode shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>NAHasTypeDictionary != true || NA_size == 1</test>
			<error>
				<message>Entry NA with type Dictionary in NavNode is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28444"/>
			<description>Entry NA in NavNode shall have type Dictionary</description>
			<test>containsNA == false || NAHasTypeDictionary == true</test>
			<error>
				<message>Entry NA in NavNode is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28445"/>
			<description>Entry Next with type Dictionary in NavNode shall be object NavNode</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in NavNode is not object NavNode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28446"/>
			<description>Entry Next in NavNode shall have type Dictionary</description>
			<test>containsNext == false || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in NavNode is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28447"/>
			<description>Entry PA with type Dictionary in NavNode shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>PAHasTypeDictionary != true || PA_size == 1</test>
			<error>
				<message>Entry PA with type Dictionary in NavNode is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28448"/>
			<description>Entry PA in NavNode shall have type Dictionary</description>
			<test>containsPA == false || PAHasTypeDictionary == true</test>
			<error>
				<message>Entry PA in NavNode is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28449"/>
			<description>Entry Prev with type Dictionary in NavNode shall be object NavNode</description>
			<test>PrevHasTypeDictionary != true || Prev_size == 1</test>
			<error>
				<message>Entry Prev with type Dictionary in NavNode is not object NavNode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28450"/>
			<description>Entry Prev in NavNode shall have type Dictionary</description>
			<test>containsPrev == false || PrevHasTypeDictionary == true</test>
			<error>
				<message>Entry Prev in NavNode is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28451"/>
			<description>Entry Type in NavNode shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in NavNode is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_5" clause="6" testNumber="28452"/>
			<description>Entry Type with type Name in NavNode shall have value NavNode</description>
			<test>TypeHasTypeName != true || TypeNameValue == "NavNode"</test>
			<error>
				<message>Entry Type with type Name in NavNode has incorrect value %2 instead of NavNode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13">
			<id specification="ISO_32000_1_5" clause="1" testNumber="28609"/>
			<description>OPIVersion13 shall not contain entries except 1.3</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != '1.3').length == 0</test>
			<error>
				<message>OPIVersion13 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != '1.3').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28610"/>
			<description>Entry 1.3 with type Dictionary in OPIVersion13 shall be object OPIVersion13Dict</description>
			<test>entry13HasTypeDictionary != true || entry13_size == 1</test>
			<error>
				<message>Entry 1.3 with type Dictionary in OPIVersion13 is not object OPIVersion13Dict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28611"/>
			<description>Entry 1.3 in OPIVersion13 shall have type Dictionary</description>
			<test>contains13 == false || entry13HasTypeDictionary == true</test>
			<error>
				<message>Entry 1.3 in OPIVersion13 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="1" testNumber="28720"/>
			<description>OPIVersion13Dict shall not contain entries except Color, ColorType, Comments, CropFixed, CropRect, F, GrayMap, ID, ImageType, Overprint, Position, Resolution, Size, Tags, Tint, Transparency, Type, Version</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Color' &amp;&amp; elem != 'ColorType' &amp;&amp; elem != 'Comments' &amp;&amp; elem != 'CropFixed' &amp;&amp; elem != 'CropRect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'GrayMap' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageType' &amp;&amp; elem != 'Overprint' &amp;&amp; elem != 'Position' &amp;&amp; elem != 'Resolution' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Tags' &amp;&amp; elem != 'Tint' &amp;&amp; elem != 'Transparency' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version').length == 0</test>
			<error>
				<message>OPIVersion13Dict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Color' &amp;&amp; elem != 'ColorType' &amp;&amp; elem != 'Comments' &amp;&amp; elem != 'CropFixed' &amp;&amp; elem != 'CropRect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'GrayMap' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageType' &amp;&amp; elem != 'Overprint' &amp;&amp; elem != 'Position' &amp;&amp; elem != 'Resolution' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Tags' &amp;&amp; elem != 'Tint' &amp;&amp; elem != 'Transparency' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28721"/>
			<description>Entry Color with type Array in OPIVersion13Dict shall be object ArrayOfOPI13Color</description>
			<test>ColorHasTypeArray != true || Color_size == 1</test>
			<error>
				<message>Entry Color with type Array in OPIVersion13Dict is not object ArrayOfOPI13Color</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28722"/>
			<description>Entry Color in OPIVersion13Dict shall have type Array</description>
			<test>containsColor == false || ColorHasTypeArray == true</test>
			<error>
				<message>Entry Color in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28723"/>
			<description>Entry ColorType in OPIVersion13Dict shall have type Name</description>
			<test>containsColorType == false || ColorTypeHasTypeName == true</test>
			<error>
				<message>Entry ColorType in OPIVersion13Dict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28724"/>
			<description>Entry Comments in OPIVersion13Dict shall have type StringText</description>
			<test>containsComments == false || CommentsHasTypeStringText == true</test>
			<error>
				<message>Entry Comments in OPIVersion13Dict is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28725"/>
			<description>Entry CropFixed with type Array in OPIVersion13Dict shall be object ArrayOf_4Numbers</description>
			<test>CropFixedHasTypeArray != true || CropFixed_size == 1</test>
			<error>
				<message>Entry CropFixed with type Array in OPIVersion13Dict is not object ArrayOf_4Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28726"/>
			<description>Entry CropFixed in OPIVersion13Dict shall have type Array</description>
			<test>containsCropFixed == false || CropFixedHasTypeArray == true</test>
			<error>
				<message>Entry CropFixed in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28727"/>
			<description>Entry CropRect in OPIVersion13Dict shall have type Rectangle</description>
			<test>containsCropRect == false || CropRectHasTypeRectangle == true</test>
			<error>
				<message>Entry CropRect in OPIVersion13Dict is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28728"/>
			<description>Entry F with type Dictionary in OPIVersion13Dict shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in OPIVersion13Dict is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28729"/>
			<description>Entry F in OPIVersion13Dict shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in OPIVersion13Dict is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="7" testNumber="28730"/>
			<description>Entry F in OPIVersion13Dict is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in OPIVersion13Dict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28731"/>
			<description>Entry GrayMap with type Array in OPIVersion13Dict shall be object ArrayOfIntegersGeneral</description>
			<test>GrayMapHasTypeArray != true || GrayMap_size == 1</test>
			<error>
				<message>Entry GrayMap with type Array in OPIVersion13Dict is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28732"/>
			<description>Entry GrayMap in OPIVersion13Dict shall have type Array</description>
			<test>containsGrayMap == false || GrayMapHasTypeArray == true</test>
			<error>
				<message>Entry GrayMap in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="28733"/>
			<description>Entry GrayMap with type Array in OPIVersion13Dict shall satisfy special case: fn:Eval((fn:ArrayLength(GrayMap) mod 2) == 0)</description>
			<test>GrayMapHasTypeArray != true || ((GrayMapArraySize % 2) == 0)</test>
			<error>
				<message>Entry GrayMap with type Array in OPIVersion13Dict does not satisfy special case: fn:Eval((fn:ArrayLength(GrayMap) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28734"/>
			<description>Entry ID in OPIVersion13Dict shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in OPIVersion13Dict is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28735"/>
			<description>Entry ImageType with type Array in OPIVersion13Dict shall be object ArrayOf_2Integers</description>
			<test>ImageTypeHasTypeArray != true || ImageType_size == 1</test>
			<error>
				<message>Entry ImageType with type Array in OPIVersion13Dict is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28736"/>
			<description>Entry ImageType in OPIVersion13Dict shall have type Array</description>
			<test>containsImageType == false || ImageTypeHasTypeArray == true</test>
			<error>
				<message>Entry ImageType in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28737"/>
			<description>Entry Overprint in OPIVersion13Dict shall have type Boolean</description>
			<test>containsOverprint == false || OverprintHasTypeBoolean == true</test>
			<error>
				<message>Entry Overprint in OPIVersion13Dict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28738"/>
			<description>Entry Position with type Array in OPIVersion13Dict shall be object ArrayOf_8Numbers</description>
			<test>PositionHasTypeArray != true || Position_size == 1</test>
			<error>
				<message>Entry Position with type Array in OPIVersion13Dict is not object ArrayOf_8Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28739"/>
			<description>Entry Position in OPIVersion13Dict shall have type Array</description>
			<test>containsPosition == false || PositionHasTypeArray == true</test>
			<error>
				<message>Entry Position in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28740"/>
			<description>Entry Resolution with type Array in OPIVersion13Dict shall be object ArrayOf_2Numbers</description>
			<test>ResolutionHasTypeArray != true || Resolution_size == 1</test>
			<error>
				<message>Entry Resolution with type Array in OPIVersion13Dict is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28741"/>
			<description>Entry Resolution in OPIVersion13Dict shall have type Array</description>
			<test>containsResolution == false || ResolutionHasTypeArray == true</test>
			<error>
				<message>Entry Resolution in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28742"/>
			<description>Entry Size with type Array in OPIVersion13Dict shall be object ArrayOf_2Integers</description>
			<test>SizeHasTypeArray != true || Size_size == 1</test>
			<error>
				<message>Entry Size with type Array in OPIVersion13Dict is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28743"/>
			<description>Entry Size in OPIVersion13Dict shall have type Array</description>
			<test>containsSize == false || SizeHasTypeArray == true</test>
			<error>
				<message>Entry Size in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28744"/>
			<description>Entry Tags with type Array in OPIVersion13Dict shall be object ArrayOfTags</description>
			<test>TagsHasTypeArray != true || Tags_size == 1</test>
			<error>
				<message>Entry Tags with type Array in OPIVersion13Dict is not object ArrayOfTags</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28745"/>
			<description>Entry Tags in OPIVersion13Dict shall have type Array</description>
			<test>containsTags == false || TagsHasTypeArray == true</test>
			<error>
				<message>Entry Tags in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28746"/>
			<description>Entry Tint in OPIVersion13Dict shall have type Number</description>
			<test>containsTint == false || TintHasTypeNumber == true</test>
			<error>
				<message>Entry Tint in OPIVersion13Dict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28747"/>
			<description>Entry Transparency in OPIVersion13Dict shall have type Boolean</description>
			<test>containsTransparency == false || TransparencyHasTypeBoolean == true</test>
			<error>
				<message>Entry Transparency in OPIVersion13Dict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28748"/>
			<description>Entry Type in OPIVersion13Dict shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OPIVersion13Dict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="28749"/>
			<description>Entry Type with type Name in OPIVersion13Dict shall have value OPI</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OPI"</test>
			<error>
				<message>Entry Type with type Name in OPIVersion13Dict has incorrect value %2 instead of OPI</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28750"/>
			<description>Entry Version in OPIVersion13Dict shall have type Number</description>
			<test>containsVersion == false || VersionHasTypeNumber == true</test>
			<error>
				<message>Entry Version in OPIVersion13Dict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="7" testNumber="28751"/>
			<description>Entry Version in OPIVersion13Dict is required</description>
			<test>containsVersion == true</test>
			<error>
				<message>Entry Version in OPIVersion13Dict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="28752"/>
			<description>Entry Version with type Number in OPIVersion13Dict shall have value 1.3</description>
			<test>VersionHasTypeNumber != true || VersionNumberValue == 1.3</test>
			<error>
				<message>Entry Version with type Number in OPIVersion13Dict has incorrect value %2 instead of 1.3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VersionNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20">
			<id specification="ISO_32000_1_5" clause="1" testNumber="28861"/>
			<description>OPIVersion20 shall not contain entries except 2.0</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != '2.0').length == 0</test>
			<error>
				<message>OPIVersion20 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != '2.0').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28862"/>
			<description>Entry 2.0 with type Dictionary in OPIVersion20 shall be object OPIVersion20Dict</description>
			<test>entry20HasTypeDictionary != true || entry20_size == 1</test>
			<error>
				<message>Entry 2.0 with type Dictionary in OPIVersion20 is not object OPIVersion20Dict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28863"/>
			<description>Entry 2.0 in OPIVersion20 shall have type Dictionary</description>
			<test>contains20 == false || entry20HasTypeDictionary == true</test>
			<error>
				<message>Entry 2.0 in OPIVersion20 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="1" testNumber="28954"/>
			<description>OPIVersion20Dict shall not contain entries except CropRect, F, IncludedImageDimensions, IncludedImageQuality, Inks, MainImage, Overprint, Size, Tags, Type, Version</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CropRect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IncludedImageDimensions' &amp;&amp; elem != 'IncludedImageQuality' &amp;&amp; elem != 'Inks' &amp;&amp; elem != 'MainImage' &amp;&amp; elem != 'Overprint' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Tags' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version').length == 0</test>
			<error>
				<message>OPIVersion20Dict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CropRect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IncludedImageDimensions' &amp;&amp; elem != 'IncludedImageQuality' &amp;&amp; elem != 'Inks' &amp;&amp; elem != 'MainImage' &amp;&amp; elem != 'Overprint' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Tags' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28955"/>
			<description>Entry CropRect in OPIVersion20Dict shall have type Rectangle</description>
			<test>containsCropRect == false || CropRectHasTypeRectangle == true</test>
			<error>
				<message>Entry CropRect in OPIVersion20Dict is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="11" testNumber="28956"/>
			<description>Entry CropRect in OPIVersion20Dict is required, when fn:IsRequired(fn:IsPresent(Size))</description>
			<test>(containsCropRect == true || ((containsSize == true)) == false)</test>
			<error>
				<message>Entry CropRect in OPIVersion20Dict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28957"/>
			<description>Entry F with type Dictionary in OPIVersion20Dict shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in OPIVersion20Dict is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28958"/>
			<description>Entry F in OPIVersion20Dict shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in OPIVersion20Dict is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="7" testNumber="28959"/>
			<description>Entry F in OPIVersion20Dict is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in OPIVersion20Dict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28960"/>
			<description>Entry IncludedImageDimensions with type Array in OPIVersion20Dict shall be object ArrayOf_2Integers</description>
			<test>IncludedImageDimensionsHasTypeArray != true || IncludedImageDimensions_size == 1</test>
			<error>
				<message>Entry IncludedImageDimensions with type Array in OPIVersion20Dict is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28961"/>
			<description>Entry IncludedImageDimensions in OPIVersion20Dict shall have type Array</description>
			<test>containsIncludedImageDimensions == false || IncludedImageDimensionsHasTypeArray == true</test>
			<error>
				<message>Entry IncludedImageDimensions in OPIVersion20Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="28962"/>
			<description>Entry IncludedImageDimensions with type Array in OPIVersion20Dict shall satisfy special case: fn:Eval((IncludedImageDimensions::@0&gt; 0) &amp;&amp; (IncludedImageDimensions::@1&gt; 0))</description>
			<test>IncludedImageDimensionsHasTypeArray != true || ((IncludedImageDimensions0IntegerValue &gt; 0) &amp;&amp; (IncludedImageDimensions1IntegerValue &gt; 0))</test>
			<error>
				<message>Entry IncludedImageDimensions with type Array in OPIVersion20Dict does not satisfy special case: fn:Eval((IncludedImageDimensions::@0&gt; 0) &amp;&amp; (IncludedImageDimensions::@1&gt; 0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28963"/>
			<description>Entry IncludedImageQuality in OPIVersion20Dict shall have type Number</description>
			<test>containsIncludedImageQuality == false || IncludedImageQualityHasTypeNumber == true</test>
			<error>
				<message>Entry IncludedImageQuality in OPIVersion20Dict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="28964"/>
			<description>Entry IncludedImageQuality with type Number in OPIVersion20Dict shall have one of values: 1, 2, 3</description>
			<test>IncludedImageQualityHasTypeNumber != true || IncludedImageQualityNumberValue == 1 || IncludedImageQualityNumberValue == 2 || IncludedImageQualityNumberValue == 3</test>
			<error>
				<message>Entry IncludedImageQuality with type Number in OPIVersion20Dict has incorrect value %2 instead of 1, 2, 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>IncludedImageQualityNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28965"/>
			<description>Entry Inks with type Array in OPIVersion20Dict shall be object ArrayOfOPI2Inks</description>
			<test>InksHasTypeArray != true || Inks_size == 1</test>
			<error>
				<message>Entry Inks with type Array in OPIVersion20Dict is not object ArrayOfOPI2Inks</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28966"/>
			<description>Entry Inks in OPIVersion20Dict shall have one of types: Array, Name</description>
			<test>containsInks == false || InksHasTypeArray == true || InksHasTypeName == true</test>
			<error>
				<message>Entry Inks in OPIVersion20Dict is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="28967"/>
			<description>Entry Inks with type Name in OPIVersion20Dict shall have one of values: registration, full_color</description>
			<test>InksHasTypeName != true || InksNameValue == "full_color" || InksNameValue == "registration"</test>
			<error>
				<message>Entry Inks with type Name in OPIVersion20Dict has incorrect value %2 instead of registration, full_color</message>
				<arguments>
					<argument>keyName</argument>
					<argument>InksNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28968"/>
			<description>Entry MainImage in OPIVersion20Dict shall have type StringByte</description>
			<test>containsMainImage == false || MainImageHasTypeStringByte == true</test>
			<error>
				<message>Entry MainImage in OPIVersion20Dict is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28969"/>
			<description>Entry Overprint in OPIVersion20Dict shall have type Boolean</description>
			<test>containsOverprint == false || OverprintHasTypeBoolean == true</test>
			<error>
				<message>Entry Overprint in OPIVersion20Dict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28970"/>
			<description>Entry Size with type Array in OPIVersion20Dict shall be object ArrayOf_2Numbers</description>
			<test>SizeHasTypeArray != true || Size_size == 1</test>
			<error>
				<message>Entry Size with type Array in OPIVersion20Dict is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28971"/>
			<description>Entry Size in OPIVersion20Dict shall have type Array</description>
			<test>containsSize == false || SizeHasTypeArray == true</test>
			<error>
				<message>Entry Size in OPIVersion20Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="11" testNumber="28972"/>
			<description>Entry Size in OPIVersion20Dict is required, when fn:IsRequired(fn:IsPresent(CropRect))</description>
			<test>(containsSize == true || ((containsCropRect == true)) == false)</test>
			<error>
				<message>Entry Size in OPIVersion20Dict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="28973"/>
			<description>Entry Size with type Array in OPIVersion20Dict shall satisfy special case: fn:Eval((Size::@0&gt; 0) &amp;&amp; (Size::@1&gt; 0))</description>
			<test>SizeHasTypeArray != true || ((Size0NumberValue &gt; 0) &amp;&amp; (Size1NumberValue &gt; 0))</test>
			<error>
				<message>Entry Size with type Array in OPIVersion20Dict does not satisfy special case: fn:Eval((Size::@0&gt; 0) &amp;&amp; (Size::@1&gt; 0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="28974"/>
			<description>Entry Tags with type Array in OPIVersion20Dict shall be object ArrayOfTags</description>
			<test>TagsHasTypeArray != true || Tags_size == 1</test>
			<error>
				<message>Entry Tags with type Array in OPIVersion20Dict is not object ArrayOfTags</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28975"/>
			<description>Entry Tags in OPIVersion20Dict shall have type Array</description>
			<test>containsTags == false || TagsHasTypeArray == true</test>
			<error>
				<message>Entry Tags in OPIVersion20Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28976"/>
			<description>Entry Type in OPIVersion20Dict shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OPIVersion20Dict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="28977"/>
			<description>Entry Type with type Name in OPIVersion20Dict shall have value OPI</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OPI"</test>
			<error>
				<message>Entry Type with type Name in OPIVersion20Dict has incorrect value %2 instead of OPI</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="28978"/>
			<description>Entry Version in OPIVersion20Dict shall have type Number</description>
			<test>containsVersion == false || VersionHasTypeNumber == true</test>
			<error>
				<message>Entry Version in OPIVersion20Dict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="7" testNumber="28979"/>
			<description>Entry Version in OPIVersion20Dict is required</description>
			<test>containsVersion == true</test>
			<error>
				<message>Entry Version in OPIVersion20Dict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="28980"/>
			<description>Entry Version with type Number in OPIVersion20Dict shall have value 2.0</description>
			<test>VersionHasTypeNumber != true || VersionNumberValue == 2.0</test>
			<error>
				<message>Entry Version with type Number in OPIVersion20Dict has incorrect value %2 instead of 2.0</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VersionNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_5" clause="1" testNumber="29092"/>
			<description>ObjectReference shall not contain entries except Obj, Pg, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Obj' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ObjectReference contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Obj' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29093"/>
			<description>Entry Obj with type Array in ObjectReference shall be object _UniversalArray</description>
			<test>ObjHasTypeArray != true || Obj_size == 1</test>
			<error>
				<message>Entry Obj with type Array in ObjectReference is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29094"/>
			<description>Entry Obj with type Stream in ObjectReference shall be object XObjectFormType1</description>
			<test>ObjHasTypeStream != true || Obj_size == 1</test>
			<error>
				<message>Entry Obj with type Stream in ObjectReference is not object XObjectFormType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29095"/>
			<description>Entry Obj with type Dictionary in ObjectReference shall be object _UniversalDictionary</description>
			<test>ObjHasTypeDictionary != true || Obj_size == 1</test>
			<error>
				<message>Entry Obj with type Dictionary in ObjectReference is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29096"/>
			<description>Entry Obj in ObjectReference shall have one of types: Array, Stream, Dictionary</description>
			<test>containsObj == false || ObjHasTypeArray == true || ObjHasTypeStream == true || ObjHasTypeDictionary == true</test>
			<error>
				<message>Entry Obj in ObjectReference is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_5" clause="7" testNumber="29097"/>
			<description>Entry Obj in ObjectReference is required</description>
			<test>containsObj == true</test>
			<error>
				<message>Entry Obj in ObjectReference is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_5" clause="10" testNumber="29098"/>
			<description>Entry Obj with type Array in ObjectReference shall be indirect</description>
			<test>ObjHasTypeArray != true || isObjIndirect == true</test>
			<error>
				<message>Entry Obj with type Array in ObjectReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_5" clause="10" testNumber="29099"/>
			<description>Entry Obj with type Stream in ObjectReference shall be indirect</description>
			<test>ObjHasTypeStream != true || isObjIndirect == true</test>
			<error>
				<message>Entry Obj with type Stream in ObjectReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_5" clause="10" testNumber="29100"/>
			<description>Entry Obj with type Dictionary in ObjectReference shall be indirect</description>
			<test>ObjHasTypeDictionary != true || isObjIndirect == true</test>
			<error>
				<message>Entry Obj with type Dictionary in ObjectReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29101"/>
			<description>Entry Pg with type Dictionary in ObjectReference shall be object PageObject</description>
			<test>PgHasTypeDictionary != true || Pg_size == 1</test>
			<error>
				<message>Entry Pg with type Dictionary in ObjectReference is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29102"/>
			<description>Entry Pg in ObjectReference shall have type Dictionary</description>
			<test>containsPg == false || PgHasTypeDictionary == true</test>
			<error>
				<message>Entry Pg in ObjectReference is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_5" clause="10" testNumber="29103"/>
			<description>Entry Pg with type Dictionary in ObjectReference shall be indirect</description>
			<test>PgHasTypeDictionary != true || isPgIndirect == true</test>
			<error>
				<message>Entry Pg with type Dictionary in ObjectReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29104"/>
			<description>Entry Type in ObjectReference shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ObjectReference is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_5" clause="7" testNumber="29105"/>
			<description>Entry Type in ObjectReference is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in ObjectReference is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_5" clause="6" testNumber="29106"/>
			<description>Entry Type with type Name in ObjectReference shall have value OBJR</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OBJR"</test>
			<error>
				<message>Entry Type with type Name in ObjectReference has incorrect value %2 instead of OBJR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="1" testNumber="29152"/>
			<description>ObjectStream shall not contain entries except DL, DecodeParms, Extends, F, FDecodeParms, FFilter, Filter, First, Length, N, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Extends' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ObjectStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Extends' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29153"/>
			<description>Entry DL in ObjectStream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in ObjectStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="14" testNumber="29154"/>
			<description>Entry DL with type Integer in ObjectStream shall satisfy possible value predicate: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || DLIntegerValue &gt;= 0</test>
			<error>
				<message>Entry DL with type Integer in ObjectStream does not satisfy possible value predicate: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="29155"/>
			<description>Entry DL with type Integer in ObjectStream shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in ObjectStream does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29156"/>
			<description>Entry DecodeParms with type Array in ObjectStream shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in ObjectStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29157"/>
			<description>Entry DecodeParms with type Dictionary in ObjectStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ObjectStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29158"/>
			<description>Entry DecodeParms in ObjectStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ObjectStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="29159"/>
			<description>Entry DecodeParms with type Array in ObjectStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ObjectStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29160"/>
			<description>Entry Extends with type Stream in ObjectStream shall be object ObjectStream</description>
			<test>ExtendsHasTypeStream != true || Extends_size == 1</test>
			<error>
				<message>Entry Extends with type Stream in ObjectStream is not object ObjectStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29161"/>
			<description>Entry Extends in ObjectStream shall have type Stream</description>
			<test>containsExtends == false || ExtendsHasTypeStream == true</test>
			<error>
				<message>Entry Extends in ObjectStream is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="10" testNumber="29162"/>
			<description>Entry Extends with type Stream in ObjectStream shall be indirect</description>
			<test>ExtendsHasTypeStream != true || isExtendsIndirect == true</test>
			<error>
				<message>Entry Extends with type Stream in ObjectStream is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="29163"/>
			<description>Entry Extends with type Stream in ObjectStream shall satisfy special case: fn:NoCycle()</description>
			<test>ExtendsHasTypeStream != true || ((ExtendshasCycle == false))</test>
			<error>
				<message>Entry Extends with type Stream in ObjectStream does not satisfy special case: fn:NoCycle()</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29164"/>
			<description>Entry F with type Dictionary in ObjectStream shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ObjectStream is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29165"/>
			<description>Entry F in ObjectStream shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ObjectStream is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29166"/>
			<description>Entry FDecodeParms with type Array in ObjectStream shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in ObjectStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29167"/>
			<description>Entry FDecodeParms with type Dictionary in ObjectStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ObjectStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29168"/>
			<description>Entry FDecodeParms in ObjectStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ObjectStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="29169"/>
			<description>Entry FDecodeParms with type Array in ObjectStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ObjectStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29170"/>
			<description>Entry FFilter with type Array in ObjectStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in ObjectStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29171"/>
			<description>Entry FFilter in ObjectStream shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in ObjectStream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="29172"/>
			<description>Entry FFilter with type Array in ObjectStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ObjectStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="29173"/>
			<description>Entry FFilter with type Name in ObjectStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in ObjectStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29174"/>
			<description>Entry Filter with type Array in ObjectStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in ObjectStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29175"/>
			<description>Entry Filter in ObjectStream shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in ObjectStream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="29176"/>
			<description>Entry Filter with type Array in ObjectStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ObjectStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="29177"/>
			<description>Entry Filter with type Name in ObjectStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in ObjectStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29178"/>
			<description>Entry First in ObjectStream shall have type Integer</description>
			<test>containsFirst == false || FirstHasTypeInteger == true</test>
			<error>
				<message>Entry First in ObjectStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="7" testNumber="29179"/>
			<description>Entry First in ObjectStream is required</description>
			<test>containsFirst == true</test>
			<error>
				<message>Entry First in ObjectStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="14" testNumber="29180"/>
			<description>Entry First with type Integer in ObjectStream shall satisfy possible value predicate: fn:Eval(@First &gt;= 0)</description>
			<test>FirstHasTypeInteger != true || FirstIntegerValue &gt;= 0</test>
			<error>
				<message>Entry First with type Integer in ObjectStream does not satisfy possible value predicate: fn:Eval(@First &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29181"/>
			<description>Entry Length in ObjectStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ObjectStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="7" testNumber="29182"/>
			<description>Entry Length in ObjectStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ObjectStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29183"/>
			<description>Entry N in ObjectStream shall have type Integer</description>
			<test>containsN == false || NHasTypeInteger == true</test>
			<error>
				<message>Entry N in ObjectStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="7" testNumber="29184"/>
			<description>Entry N in ObjectStream is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in ObjectStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="14" testNumber="29185"/>
			<description>Entry N with type Integer in ObjectStream shall satisfy possible value predicate: fn:Eval(@N &gt;= 0)</description>
			<test>NHasTypeInteger != true || NIntegerValue &gt;= 0</test>
			<error>
				<message>Entry N with type Integer in ObjectStream does not satisfy possible value predicate: fn:Eval(@N &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29186"/>
			<description>Entry Type in ObjectStream shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ObjectStream is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="7" testNumber="29187"/>
			<description>Entry Type in ObjectStream is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in ObjectStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="29188"/>
			<description>Entry Type with type Name in ObjectStream shall have value ObjStm</description>
			<test>TypeHasTypeName != true || TypeNameValue == "ObjStm"</test>
			<error>
				<message>Entry Type with type Name in ObjectStream has incorrect value %2 instead of ObjStm</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="1" testNumber="29300"/>
			<description>OptContentConfig shall not contain entries except AS, BaseState, Creator, Intent, ListMode, Name, OFF, ON, Order, RBGroups</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AS' &amp;&amp; elem != 'BaseState' &amp;&amp; elem != 'Creator' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'ListMode' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OFF' &amp;&amp; elem != 'ON' &amp;&amp; elem != 'Order' &amp;&amp; elem != 'RBGroups').length == 0</test>
			<error>
				<message>OptContentConfig contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AS' &amp;&amp; elem != 'BaseState' &amp;&amp; elem != 'Creator' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'ListMode' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OFF' &amp;&amp; elem != 'ON' &amp;&amp; elem != 'Order' &amp;&amp; elem != 'RBGroups').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29301"/>
			<description>Entry AS with type Array in OptContentConfig shall be object ArrayOfOCUsage</description>
			<test>ASHasTypeArray != true || AS_size == 1</test>
			<error>
				<message>Entry AS with type Array in OptContentConfig is not object ArrayOfOCUsage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29302"/>
			<description>Entry AS in OptContentConfig shall have type Array</description>
			<test>containsAS == false || ASHasTypeArray == true</test>
			<error>
				<message>Entry AS in OptContentConfig is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29303"/>
			<description>Entry BaseState in OptContentConfig shall have type Name</description>
			<test>containsBaseState == false || BaseStateHasTypeName == true</test>
			<error>
				<message>Entry BaseState in OptContentConfig is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="6" testNumber="29304"/>
			<description>Entry BaseState with type Name in OptContentConfig shall have one of values: OFF, Unchanged, ON</description>
			<test>BaseStateHasTypeName != true || BaseStateNameValue == "ON" || BaseStateNameValue == "OFF" || BaseStateNameValue == "Unchanged"</test>
			<error>
				<message>Entry BaseState with type Name in OptContentConfig has incorrect value %2 instead of OFF, Unchanged, ON</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BaseStateNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29305"/>
			<description>Entry Creator in OptContentConfig shall have type StringText</description>
			<test>containsCreator == false || CreatorHasTypeStringText == true</test>
			<error>
				<message>Entry Creator in OptContentConfig is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29306"/>
			<description>Entry Intent with type Array in OptContentConfig shall be object ArrayOfNamesGeneral</description>
			<test>IntentHasTypeArray != true || Intent_size == 1</test>
			<error>
				<message>Entry Intent with type Array in OptContentConfig is not object ArrayOfNamesGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29307"/>
			<description>Entry Intent in OptContentConfig shall have one of types: Array, Name</description>
			<test>containsIntent == false || IntentHasTypeArray == true || IntentHasTypeName == true</test>
			<error>
				<message>Entry Intent in OptContentConfig is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="6" testNumber="29308"/>
			<description>Entry Intent with type Name in OptContentConfig shall have one of values: All, Design, View</description>
			<test>IntentHasTypeName != true || IntentNameValue == "All" || IntentNameValue == "Design" || IntentNameValue == "View"</test>
			<error>
				<message>Entry Intent with type Name in OptContentConfig has incorrect value %2 instead of All, Design, View</message>
				<arguments>
					<argument>keyName</argument>
					<argument>IntentNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29309"/>
			<description>Entry ListMode in OptContentConfig shall have type Name</description>
			<test>containsListMode == false || ListModeHasTypeName == true</test>
			<error>
				<message>Entry ListMode in OptContentConfig is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="6" testNumber="29310"/>
			<description>Entry ListMode with type Name in OptContentConfig shall have one of values: AllPages, VisiblePages</description>
			<test>ListModeHasTypeName != true || ListModeNameValue == "AllPages" || ListModeNameValue == "VisiblePages"</test>
			<error>
				<message>Entry ListMode with type Name in OptContentConfig has incorrect value %2 instead of AllPages, VisiblePages</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ListModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29311"/>
			<description>Entry Name in OptContentConfig shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in OptContentConfig is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29312"/>
			<description>Entry OFF with type Array in OptContentConfig shall be object ArrayOfOptContentGroups</description>
			<test>OFFHasTypeArray != true || OFF_size == 1</test>
			<error>
				<message>Entry OFF with type Array in OptContentConfig is not object ArrayOfOptContentGroups</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29313"/>
			<description>Entry OFF in OptContentConfig shall have type Array</description>
			<test>containsOFF == false || OFFHasTypeArray == true</test>
			<error>
				<message>Entry OFF in OptContentConfig is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29314"/>
			<description>Entry ON with type Array in OptContentConfig shall be object ArrayOfOptContentGroups</description>
			<test>ONHasTypeArray != true || ON_size == 1</test>
			<error>
				<message>Entry ON with type Array in OptContentConfig is not object ArrayOfOptContentGroups</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29315"/>
			<description>Entry ON in OptContentConfig shall have type Array</description>
			<test>containsON == false || ONHasTypeArray == true</test>
			<error>
				<message>Entry ON in OptContentConfig is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29316"/>
			<description>Entry Order with type Array in OptContentConfig shall be object ArrayOfOptContentOrderElements</description>
			<test>OrderHasTypeArray != true || Order_size == 1</test>
			<error>
				<message>Entry Order with type Array in OptContentConfig is not object ArrayOfOptContentOrderElements</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29317"/>
			<description>Entry Order in OptContentConfig shall have type Array</description>
			<test>containsOrder == false || OrderHasTypeArray == true</test>
			<error>
				<message>Entry Order in OptContentConfig is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29318"/>
			<description>Entry RBGroups with type Array in OptContentConfig shall be object ArrayOfArraysRBGroups</description>
			<test>RBGroupsHasTypeArray != true || RBGroups_size == 1</test>
			<error>
				<message>Entry RBGroups with type Array in OptContentConfig is not object ArrayOfArraysRBGroups</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29319"/>
			<description>Entry RBGroups in OptContentConfig shall have type Array</description>
			<test>containsRBGroups == false || RBGroupsHasTypeArray == true</test>
			<error>
				<message>Entry RBGroups in OptContentConfig is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_5" clause="1" testNumber="29386"/>
			<description>OptContentCreatorInfo shall not contain entries except Creator, SubType, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Creator' &amp;&amp; elem != 'SubType' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>OptContentCreatorInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Creator' &amp;&amp; elem != 'SubType' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29387"/>
			<description>Entry Creator in OptContentCreatorInfo shall have type StringText</description>
			<test>containsCreator == false || CreatorHasTypeStringText == true</test>
			<error>
				<message>Entry Creator in OptContentCreatorInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_5" clause="7" testNumber="29388"/>
			<description>Entry Creator in OptContentCreatorInfo is required</description>
			<test>containsCreator == true</test>
			<error>
				<message>Entry Creator in OptContentCreatorInfo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29389"/>
			<description>Entry SubType in OptContentCreatorInfo shall have type Name</description>
			<test>containsSubType == false || SubTypeHasTypeName == true</test>
			<error>
				<message>Entry SubType in OptContentCreatorInfo is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_5" clause="7" testNumber="29390"/>
			<description>Entry SubType in OptContentCreatorInfo is required</description>
			<test>containsSubType == true</test>
			<error>
				<message>Entry SubType in OptContentCreatorInfo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29391"/>
			<description>Entry Subtype in OptContentCreatorInfo shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in OptContentCreatorInfo is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_5" clause="7" testNumber="29392"/>
			<description>Entry Subtype in OptContentCreatorInfo is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in OptContentCreatorInfo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentExport">
			<id specification="ISO_32000_1_5" clause="1" testNumber="29414"/>
			<description>OptContentExport shall not contain entries except ExportState</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ExportState').length == 0</test>
			<error>
				<message>OptContentExport contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ExportState').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentExport">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29415"/>
			<description>Entry ExportState in OptContentExport shall have type Name</description>
			<test>containsExportState == false || ExportStateHasTypeName == true</test>
			<error>
				<message>Entry ExportState in OptContentExport is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentExport">
			<id specification="ISO_32000_1_5" clause="7" testNumber="29416"/>
			<description>Entry ExportState in OptContentExport is required</description>
			<test>containsExportState == true</test>
			<error>
				<message>Entry ExportState in OptContentExport is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentExport">
			<id specification="ISO_32000_1_5" clause="6" testNumber="29417"/>
			<description>Entry ExportState with type Name in OptContentExport shall have one of values: OFF, ON</description>
			<test>ExportStateHasTypeName != true || ExportStateNameValue == "ON" || ExportStateNameValue == "OFF"</test>
			<error>
				<message>Entry ExportState with type Name in OptContentExport has incorrect value %2 instead of OFF, ON</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ExportStateNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_5" clause="1" testNumber="29430"/>
			<description>OptContentGroup shall not contain entries except Intent, Name, Type, Usage</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Intent' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Usage').length == 0</test>
			<error>
				<message>OptContentGroup contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Intent' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Usage').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29431"/>
			<description>Entry Intent with type Array in OptContentGroup shall be object ArrayOfNamesGeneral</description>
			<test>IntentHasTypeArray != true || Intent_size == 1</test>
			<error>
				<message>Entry Intent with type Array in OptContentGroup is not object ArrayOfNamesGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29432"/>
			<description>Entry Intent in OptContentGroup shall have one of types: Array, Name</description>
			<test>containsIntent == false || IntentHasTypeArray == true || IntentHasTypeName == true</test>
			<error>
				<message>Entry Intent in OptContentGroup is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29433"/>
			<description>Entry Name in OptContentGroup shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in OptContentGroup is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_5" clause="7" testNumber="29434"/>
			<description>Entry Name in OptContentGroup is required</description>
			<test>containsName == true</test>
			<error>
				<message>Entry Name in OptContentGroup is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29435"/>
			<description>Entry Type in OptContentGroup shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OptContentGroup is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_5" clause="7" testNumber="29436"/>
			<description>Entry Type in OptContentGroup is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in OptContentGroup is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_5" clause="6" testNumber="29437"/>
			<description>Entry Type with type Name in OptContentGroup shall have value OCG</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OCG"</test>
			<error>
				<message>Entry Type with type Name in OptContentGroup has incorrect value %2 instead of OCG</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29438"/>
			<description>Entry Usage with type Dictionary in OptContentGroup shall be object OptContentUsage</description>
			<test>UsageHasTypeDictionary != true || Usage_size == 1</test>
			<error>
				<message>Entry Usage with type Dictionary in OptContentGroup is not object OptContentUsage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29439"/>
			<description>Entry Usage in OptContentGroup shall have type Dictionary</description>
			<test>containsUsage == false || UsageHasTypeDictionary == true</test>
			<error>
				<message>Entry Usage in OptContentGroup is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentLanguage">
			<id specification="ISO_32000_1_5" clause="1" testNumber="29470"/>
			<description>OptContentLanguage shall not contain entries except Lang, Preferred</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Lang' &amp;&amp; elem != 'Preferred').length == 0</test>
			<error>
				<message>OptContentLanguage contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Lang' &amp;&amp; elem != 'Preferred').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentLanguage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29471"/>
			<description>Entry Lang in OptContentLanguage shall have type String</description>
			<test>containsLang == false || LangHasTypeString == true</test>
			<error>
				<message>Entry Lang in OptContentLanguage is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentLanguage">
			<id specification="ISO_32000_1_5" clause="7" testNumber="29472"/>
			<description>Entry Lang in OptContentLanguage is required</description>
			<test>containsLang == true</test>
			<error>
				<message>Entry Lang in OptContentLanguage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentLanguage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29473"/>
			<description>Entry Preferred in OptContentLanguage shall have type Name</description>
			<test>containsPreferred == false || PreferredHasTypeName == true</test>
			<error>
				<message>Entry Preferred in OptContentLanguage is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentLanguage">
			<id specification="ISO_32000_1_5" clause="6" testNumber="29474"/>
			<description>Entry Preferred with type Name in OptContentLanguage shall have one of values: OFF, ON</description>
			<test>PreferredHasTypeName != true || PreferredNameValue == "ON" || PreferredNameValue == "OFF"</test>
			<error>
				<message>Entry Preferred with type Name in OptContentLanguage has incorrect value %2 instead of OFF, ON</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PreferredNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_5" clause="1" testNumber="29490"/>
			<description>OptContentMembership shall not contain entries except OCGs, P, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'OCGs' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>OptContentMembership contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'OCGs' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29491"/>
			<description>Entry OCGs with type Array in OptContentMembership shall be object ArrayOfOCG</description>
			<test>OCGsHasTypeArray != true || OCGs_size == 1</test>
			<error>
				<message>Entry OCGs with type Array in OptContentMembership is not object ArrayOfOCG</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29492"/>
			<description>Entry OCGs with type Dictionary in OptContentMembership shall be object OptContentGroup</description>
			<test>OCGsHasTypeDictionary != true || OCGs_size == 1</test>
			<error>
				<message>Entry OCGs with type Dictionary in OptContentMembership is not object OptContentGroup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29493"/>
			<description>Entry OCGs in OptContentMembership shall have one of types: Array, Null, Dictionary</description>
			<test>containsOCGs == false || OCGsHasTypeArray == true || OCGsHasTypeNull == true || OCGsHasTypeDictionary == true</test>
			<error>
				<message>Entry OCGs in OptContentMembership is not one of types: Array, Null, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29494"/>
			<description>Entry P in OptContentMembership shall have type Name</description>
			<test>containsP == false || PHasTypeName == true</test>
			<error>
				<message>Entry P in OptContentMembership is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_5" clause="6" testNumber="29495"/>
			<description>Entry P with type Name in OptContentMembership shall have one of values: AllOff, AnyOff, AllOn, AnyOn</description>
			<test>PHasTypeName != true || PNameValue == "AllOn" || PNameValue == "AnyOn" || PNameValue == "AnyOff" || PNameValue == "AllOff"</test>
			<error>
				<message>Entry P with type Name in OptContentMembership has incorrect value %2 instead of AllOff, AnyOff, AllOn, AnyOn</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29496"/>
			<description>Entry Type in OptContentMembership shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OptContentMembership is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_5" clause="7" testNumber="29497"/>
			<description>Entry Type in OptContentMembership is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in OptContentMembership is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_5" clause="6" testNumber="29498"/>
			<description>Entry Type with type Name in OptContentMembership shall have value OCMD</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OCMD"</test>
			<error>
				<message>Entry Type with type Name in OptContentMembership has incorrect value %2 instead of OCMD</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPageElement">
			<id specification="ISO_32000_1_5" clause="1" testNumber="29532"/>
			<description>OptContentPageElement shall not contain entries except Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Subtype').length == 0</test>
			<error>
				<message>OptContentPageElement contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPageElement">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29533"/>
			<description>Entry Subtype in OptContentPageElement shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in OptContentPageElement is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPageElement">
			<id specification="ISO_32000_1_5" clause="6" testNumber="29534"/>
			<description>Entry Subtype with type Name in OptContentPageElement shall have one of values: FG, BG, L, HF</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "HF" || SubtypeNameValue == "FG" || SubtypeNameValue == "BG" || SubtypeNameValue == "L"</test>
			<error>
				<message>Entry Subtype with type Name in OptContentPageElement has incorrect value %2 instead of FG, BG, L, HF</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPrint">
			<id specification="ISO_32000_1_5" clause="1" testNumber="29544"/>
			<description>OptContentPrint shall not contain entries except PrintState, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'PrintState' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>OptContentPrint contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'PrintState' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPrint">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29545"/>
			<description>Entry PrintState in OptContentPrint shall have type Name</description>
			<test>containsPrintState == false || PrintStateHasTypeName == true</test>
			<error>
				<message>Entry PrintState in OptContentPrint is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPrint">
			<id specification="ISO_32000_1_5" clause="6" testNumber="29546"/>
			<description>Entry PrintState with type Name in OptContentPrint shall have one of values: OFF, ON</description>
			<test>PrintStateHasTypeName != true || PrintStateNameValue == "ON" || PrintStateNameValue == "OFF"</test>
			<error>
				<message>Entry PrintState with type Name in OptContentPrint has incorrect value %2 instead of OFF, ON</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PrintStateNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPrint">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29547"/>
			<description>Entry Subtype in OptContentPrint shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in OptContentPrint is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_5" clause="1" testNumber="29560"/>
			<description>OptContentProperties shall not contain entries except Configs, D, OCGs</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Configs' &amp;&amp; elem != 'D' &amp;&amp; elem != 'OCGs').length == 0</test>
			<error>
				<message>OptContentProperties contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Configs' &amp;&amp; elem != 'D' &amp;&amp; elem != 'OCGs').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29561"/>
			<description>Entry Configs with type Array in OptContentProperties shall be object ArrayOfOCConfig</description>
			<test>ConfigsHasTypeArray != true || Configs_size == 1</test>
			<error>
				<message>Entry Configs with type Array in OptContentProperties is not object ArrayOfOCConfig</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29562"/>
			<description>Entry Configs in OptContentProperties shall have type Array</description>
			<test>containsConfigs == false || ConfigsHasTypeArray == true</test>
			<error>
				<message>Entry Configs in OptContentProperties is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29563"/>
			<description>Entry D with type Dictionary in OptContentProperties shall be object OptContentConfig</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in OptContentProperties is not object OptContentConfig</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29564"/>
			<description>Entry D in OptContentProperties shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in OptContentProperties is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_5" clause="7" testNumber="29565"/>
			<description>Entry D in OptContentProperties is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in OptContentProperties is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29566"/>
			<description>Entry OCGs with type Array in OptContentProperties shall be object ArrayOfOCGindirect</description>
			<test>OCGsHasTypeArray != true || OCGs_size == 1</test>
			<error>
				<message>Entry OCGs with type Array in OptContentProperties is not object ArrayOfOCGindirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29567"/>
			<description>Entry OCGs in OptContentProperties shall have type Array</description>
			<test>containsOCGs == false || OCGsHasTypeArray == true</test>
			<error>
				<message>Entry OCGs in OptContentProperties is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_5" clause="7" testNumber="29568"/>
			<description>Entry OCGs in OptContentProperties is required</description>
			<test>containsOCGs == true</test>
			<error>
				<message>Entry OCGs in OptContentProperties is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_5" clause="1" testNumber="29596"/>
			<description>OptContentUsage shall not contain entries except CreatorInfo, Export, Language, PageElement, Print, User, View, Zoom</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CreatorInfo' &amp;&amp; elem != 'Export' &amp;&amp; elem != 'Language' &amp;&amp; elem != 'PageElement' &amp;&amp; elem != 'Print' &amp;&amp; elem != 'User' &amp;&amp; elem != 'View' &amp;&amp; elem != 'Zoom').length == 0</test>
			<error>
				<message>OptContentUsage contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CreatorInfo' &amp;&amp; elem != 'Export' &amp;&amp; elem != 'Language' &amp;&amp; elem != 'PageElement' &amp;&amp; elem != 'Print' &amp;&amp; elem != 'User' &amp;&amp; elem != 'View' &amp;&amp; elem != 'Zoom').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29597"/>
			<description>Entry CreatorInfo with type Dictionary in OptContentUsage shall be object OptContentCreatorInfo</description>
			<test>CreatorInfoHasTypeDictionary != true || CreatorInfo_size == 1</test>
			<error>
				<message>Entry CreatorInfo with type Dictionary in OptContentUsage is not object OptContentCreatorInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29598"/>
			<description>Entry CreatorInfo in OptContentUsage shall have type Dictionary</description>
			<test>containsCreatorInfo == false || CreatorInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry CreatorInfo in OptContentUsage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29599"/>
			<description>Entry Export with type Dictionary in OptContentUsage shall be object OptContentExport</description>
			<test>ExportHasTypeDictionary != true || Export_size == 1</test>
			<error>
				<message>Entry Export with type Dictionary in OptContentUsage is not object OptContentExport</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29600"/>
			<description>Entry Export in OptContentUsage shall have type Dictionary</description>
			<test>containsExport == false || ExportHasTypeDictionary == true</test>
			<error>
				<message>Entry Export in OptContentUsage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29601"/>
			<description>Entry Language with type Dictionary in OptContentUsage shall be object OptContentLanguage</description>
			<test>LanguageHasTypeDictionary != true || Language_size == 1</test>
			<error>
				<message>Entry Language with type Dictionary in OptContentUsage is not object OptContentLanguage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29602"/>
			<description>Entry Language in OptContentUsage shall have type Dictionary</description>
			<test>containsLanguage == false || LanguageHasTypeDictionary == true</test>
			<error>
				<message>Entry Language in OptContentUsage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29603"/>
			<description>Entry PageElement with type Dictionary in OptContentUsage shall be object OptContentPageElement</description>
			<test>PageElementHasTypeDictionary != true || PageElement_size == 1</test>
			<error>
				<message>Entry PageElement with type Dictionary in OptContentUsage is not object OptContentPageElement</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29604"/>
			<description>Entry PageElement in OptContentUsage shall have type Dictionary</description>
			<test>containsPageElement == false || PageElementHasTypeDictionary == true</test>
			<error>
				<message>Entry PageElement in OptContentUsage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29605"/>
			<description>Entry Print with type Dictionary in OptContentUsage shall be object OptContentPrint</description>
			<test>PrintHasTypeDictionary != true || Print_size == 1</test>
			<error>
				<message>Entry Print with type Dictionary in OptContentUsage is not object OptContentPrint</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29606"/>
			<description>Entry Print in OptContentUsage shall have type Dictionary</description>
			<test>containsPrint == false || PrintHasTypeDictionary == true</test>
			<error>
				<message>Entry Print in OptContentUsage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29607"/>
			<description>Entry User with type Dictionary in OptContentUsage shall be object OptContentUser</description>
			<test>UserHasTypeDictionary != true || User_size == 1</test>
			<error>
				<message>Entry User with type Dictionary in OptContentUsage is not object OptContentUser</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29608"/>
			<description>Entry User in OptContentUsage shall have type Dictionary</description>
			<test>containsUser == false || UserHasTypeDictionary == true</test>
			<error>
				<message>Entry User in OptContentUsage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29609"/>
			<description>Entry View with type Dictionary in OptContentUsage shall be object OptContentView</description>
			<test>ViewHasTypeDictionary != true || View_size == 1</test>
			<error>
				<message>Entry View with type Dictionary in OptContentUsage is not object OptContentView</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29610"/>
			<description>Entry View in OptContentUsage shall have type Dictionary</description>
			<test>containsView == false || ViewHasTypeDictionary == true</test>
			<error>
				<message>Entry View in OptContentUsage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29611"/>
			<description>Entry Zoom with type Dictionary in OptContentUsage shall be object OptContentZoom</description>
			<test>ZoomHasTypeDictionary != true || Zoom_size == 1</test>
			<error>
				<message>Entry Zoom with type Dictionary in OptContentUsage is not object OptContentZoom</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29612"/>
			<description>Entry Zoom in OptContentUsage shall have type Dictionary</description>
			<test>containsZoom == false || ZoomHasTypeDictionary == true</test>
			<error>
				<message>Entry Zoom in OptContentUsage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_5" clause="1" testNumber="29664"/>
			<description>OptContentUsageApplication shall not contain entries except Category, Event, OCGs</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Category' &amp;&amp; elem != 'Event' &amp;&amp; elem != 'OCGs').length == 0</test>
			<error>
				<message>OptContentUsageApplication contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Category' &amp;&amp; elem != 'Event' &amp;&amp; elem != 'OCGs').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29665"/>
			<description>Entry Category with type Array in OptContentUsageApplication shall be object ArrayOfNamesGeneral</description>
			<test>CategoryHasTypeArray != true || Category_size == 1</test>
			<error>
				<message>Entry Category with type Array in OptContentUsageApplication is not object ArrayOfNamesGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29666"/>
			<description>Entry Category in OptContentUsageApplication shall have type Array</description>
			<test>containsCategory == false || CategoryHasTypeArray == true</test>
			<error>
				<message>Entry Category in OptContentUsageApplication is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_5" clause="7" testNumber="29667"/>
			<description>Entry Category in OptContentUsageApplication is required</description>
			<test>containsCategory == true</test>
			<error>
				<message>Entry Category in OptContentUsageApplication is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29668"/>
			<description>Entry Event in OptContentUsageApplication shall have type Name</description>
			<test>containsEvent == false || EventHasTypeName == true</test>
			<error>
				<message>Entry Event in OptContentUsageApplication is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_5" clause="7" testNumber="29669"/>
			<description>Entry Event in OptContentUsageApplication is required</description>
			<test>containsEvent == true</test>
			<error>
				<message>Entry Event in OptContentUsageApplication is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_5" clause="6" testNumber="29670"/>
			<description>Entry Event with type Name in OptContentUsageApplication shall have one of values: Print, Export, View</description>
			<test>EventHasTypeName != true || EventNameValue == "View" || EventNameValue == "Print" || EventNameValue == "Export"</test>
			<error>
				<message>Entry Event with type Name in OptContentUsageApplication has incorrect value %2 instead of Print, Export, View</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EventNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29671"/>
			<description>Entry OCGs with type Array in OptContentUsageApplication shall be object ArrayOfOCG</description>
			<test>OCGsHasTypeArray != true || OCGs_size == 1</test>
			<error>
				<message>Entry OCGs with type Array in OptContentUsageApplication is not object ArrayOfOCG</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29672"/>
			<description>Entry OCGs in OptContentUsageApplication shall have type Array</description>
			<test>containsOCGs == false || OCGsHasTypeArray == true</test>
			<error>
				<message>Entry OCGs in OptContentUsageApplication is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUser">
			<id specification="ISO_32000_1_5" clause="1" testNumber="29700"/>
			<description>OptContentUser shall not contain entries except Name, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>OptContentUser contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUser">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29701"/>
			<description>Entry Name with type Array in OptContentUser shall be object ArrayOfStringsText</description>
			<test>NameHasTypeArray != true || Name_size == 1</test>
			<error>
				<message>Entry Name with type Array in OptContentUser is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUser">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29702"/>
			<description>Entry Name in OptContentUser shall have one of types: Array, StringText</description>
			<test>containsName == false || NameHasTypeArray == true || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in OptContentUser is not one of types: Array, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUser">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29703"/>
			<description>Entry Type in OptContentUser shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OptContentUser is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUser">
			<id specification="ISO_32000_1_5" clause="7" testNumber="29704"/>
			<description>Entry Type in OptContentUser is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in OptContentUser is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUser">
			<id specification="ISO_32000_1_5" clause="6" testNumber="29705"/>
			<description>Entry Type with type Name in OptContentUser shall have one of values: Org, Ttl, Ind</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Ind" || TypeNameValue == "Ttl" || TypeNameValue == "Org"</test>
			<error>
				<message>Entry Type with type Name in OptContentUser has incorrect value %2 instead of Org, Ttl, Ind</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentView">
			<id specification="ISO_32000_1_5" clause="1" testNumber="29724"/>
			<description>OptContentView shall not contain entries except ViewState</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ViewState').length == 0</test>
			<error>
				<message>OptContentView contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ViewState').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentView">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29725"/>
			<description>Entry ViewState in OptContentView shall have type Name</description>
			<test>containsViewState == false || ViewStateHasTypeName == true</test>
			<error>
				<message>Entry ViewState in OptContentView is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentView">
			<id specification="ISO_32000_1_5" clause="6" testNumber="29726"/>
			<description>Entry ViewState with type Name in OptContentView shall have one of values: OFF, ON</description>
			<test>ViewStateHasTypeName != true || ViewStateNameValue == "ON" || ViewStateNameValue == "OFF"</test>
			<error>
				<message>Entry ViewState with type Name in OptContentView has incorrect value %2 instead of OFF, ON</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ViewStateNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_5" clause="1" testNumber="29736"/>
			<description>OptContentZoom shall not contain entries except max, min</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'max' &amp;&amp; elem != 'min').length == 0</test>
			<error>
				<message>OptContentZoom contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'max' &amp;&amp; elem != 'min').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29737"/>
			<description>Entry max in OptContentZoom shall have type Number</description>
			<test>containsmax == false || maxHasTypeNumber == true</test>
			<error>
				<message>Entry max in OptContentZoom is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_5" clause="11" testNumber="29738"/>
			<description>Entry max in OptContentZoom is required, when fn:IsRequired(fn:Not(fn:IsPresent(min)))</description>
			<test>(containsmax == true || (((containsmin == true)) != true) == false)</test>
			<error>
				<message>Entry max in OptContentZoom is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_5" clause="14" testNumber="29739"/>
			<description>Entry max with type Number in OptContentZoom shall satisfy possible value predicate: fn:Eval((@max &gt;= 0.0) &amp;&amp; (@max &gt;= @min))</description>
			<test>maxHasTypeNumber != true || (maxNumberValue &gt;= 0.0) &amp;&amp; (maxNumberValue &gt;= minNumberValue)</test>
			<error>
				<message>Entry max with type Number in OptContentZoom does not satisfy possible value predicate: fn:Eval((@max &gt;= 0.0) &amp;&amp; (@max &gt;= @min))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29740"/>
			<description>Entry min in OptContentZoom shall have type Number</description>
			<test>containsmin == false || minHasTypeNumber == true</test>
			<error>
				<message>Entry min in OptContentZoom is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_5" clause="11" testNumber="29741"/>
			<description>Entry min in OptContentZoom is required, when fn:IsRequired(fn:Not(fn:IsPresent(max)))</description>
			<test>(containsmin == true || (((containsmax == true)) != true) == false)</test>
			<error>
				<message>Entry min in OptContentZoom is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_5" clause="14" testNumber="29742"/>
			<description>Entry min with type Number in OptContentZoom shall satisfy possible value predicate: fn:Eval((@min &gt;= 0.0) &amp;&amp; (@min &lt;= @max))</description>
			<test>minHasTypeNumber != true || (minNumberValue &gt;= 0.0) &amp;&amp; (minNumberValue &lt;= maxNumberValue)</test>
			<error>
				<message>Entry min with type Number in OptContentZoom does not satisfy possible value predicate: fn:Eval((@min &gt;= 0.0) &amp;&amp; (@min &lt;= @max))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_5" clause="1" testNumber="29819"/>
			<description>Outline shall not contain entries except Count, First, Last, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>Outline contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29820"/>
			<description>Entry Count in Outline shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in Outline is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_5" clause="14" testNumber="29821"/>
			<description>Entry Count with type Integer in Outline shall satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</description>
			<test>CountHasTypeInteger != true || CountIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Count with type Integer in Outline does not satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29822"/>
			<description>Entry First with type Dictionary in Outline shall be object OutlineItem</description>
			<test>FirstHasTypeDictionary != true || First_size == 1</test>
			<error>
				<message>Entry First with type Dictionary in Outline is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29823"/>
			<description>Entry First in Outline shall have type Dictionary</description>
			<test>containsFirst == false || FirstHasTypeDictionary == true</test>
			<error>
				<message>Entry First in Outline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_5" clause="10" testNumber="29824"/>
			<description>Entry First with type Dictionary in Outline shall be indirect</description>
			<test>FirstHasTypeDictionary != true || isFirstIndirect == true</test>
			<error>
				<message>Entry First with type Dictionary in Outline is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_5" clause="17" testNumber="29825"/>
			<description>Entry Last with type Dictionary in Outline shall be object OutlineItem</description>
			<test>LastHasTypeDictionary != true || Last_size == 1</test>
			<error>
				<message>Entry Last with type Dictionary in Outline is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29826"/>
			<description>Entry Last in Outline shall have type Dictionary</description>
			<test>containsLast == false || LastHasTypeDictionary == true</test>
			<error>
				<message>Entry Last in Outline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_5" clause="10" testNumber="29827"/>
			<description>Entry Last with type Dictionary in Outline shall be indirect</description>
			<test>LastHasTypeDictionary != true || isLastIndirect == true</test>
			<error>
				<message>Entry Last with type Dictionary in Outline is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_5" clause="8" testNumber="29828"/>
			<description>Entry Type in Outline shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Outline is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_5" clause="6" testNumber="29829"/>
			<description>Entry Type with type Name in Outline shall have value Outlines</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Outlines"</test>
			<error>
				<message>Entry Type with type Name in Outline has incorrect value %2 instead of Outlines</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="1" testNumber="30010"/>
			<description>OutlineItem shall not contain entries except A, C, Count, Dest, F, First, Last, Next, Parent, Prev, SE, Title</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'F' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'SE' &amp;&amp; elem != 'Title').length == 0</test>
			<error>
				<message>OutlineItem contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'F' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'SE' &amp;&amp; elem != 'Title').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30011"/>
			<description>Entry A with type Dictionary in OutlineItem shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in OutlineItem is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30012"/>
			<description>Entry A in OutlineItem shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="9" testNumber="30013"/>
			<description>Entry A with type Dictionary in OutlineItem shall satisfy special case: fn:Not(fn:IsPresent(Dest))</description>
			<test>AHasTypeDictionary != true || (((containsDest == true)) != true)</test>
			<error>
				<message>Entry A with type Dictionary in OutlineItem does not satisfy special case: fn:Not(fn:IsPresent(Dest))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30014"/>
			<description>Entry C with type Array in OutlineItem shall be object ArrayOf_3RGBNumbers</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in OutlineItem is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30015"/>
			<description>Entry C in OutlineItem shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in OutlineItem is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30016"/>
			<description>Entry Count in OutlineItem shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in OutlineItem is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30017"/>
			<description>Entry Dest with type Array in OutlineItem shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DestHasTypeArray != true || Dest_size == 1</test>
			<error>
				<message>Entry Dest with type Array in OutlineItem is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30018"/>
			<description>Entry Dest in OutlineItem shall have one of types: Array, StringByte, Name</description>
			<test>containsDest == false || DestHasTypeArray == true || DestHasTypeStringByte == true || DestHasTypeName == true</test>
			<error>
				<message>Entry Dest in OutlineItem is not one of types: Array, StringByte, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="9" testNumber="30019"/>
			<description>Entry Dest with type Array in OutlineItem shall satisfy special case: fn:Not(fn:IsPresent(A))</description>
			<test>DestHasTypeArray != true || (((containsA == true)) != true)</test>
			<error>
				<message>Entry Dest with type Array in OutlineItem does not satisfy special case: fn:Not(fn:IsPresent(A))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="9" testNumber="30020"/>
			<description>Entry Dest with type StringByte in OutlineItem shall satisfy special case: fn:Not(fn:IsPresent(A))</description>
			<test>DestHasTypeStringByte != true || (((containsA == true)) != true)</test>
			<error>
				<message>Entry Dest with type StringByte in OutlineItem does not satisfy special case: fn:Not(fn:IsPresent(A))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="9" testNumber="30021"/>
			<description>Entry Dest with type Name in OutlineItem shall satisfy special case: fn:Not(fn:IsPresent(A))</description>
			<test>DestHasTypeName != true || (((containsA == true)) != true)</test>
			<error>
				<message>Entry Dest with type Name in OutlineItem does not satisfy special case: fn:Not(fn:IsPresent(A))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30022"/>
			<description>Entry F in OutlineItem shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in OutlineItem is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="9" testNumber="30023"/>
			<description>Entry F with type Bitmask in OutlineItem shall satisfy special case: fn:Eval(fn:BitsClear(3 , 32))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 2 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in OutlineItem does not satisfy special case: fn:Eval(fn:BitsClear(3 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30024"/>
			<description>Entry First with type Dictionary in OutlineItem shall be object OutlineItem</description>
			<test>FirstHasTypeDictionary != true || First_size == 1</test>
			<error>
				<message>Entry First with type Dictionary in OutlineItem is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30025"/>
			<description>Entry First in OutlineItem shall have type Dictionary</description>
			<test>containsFirst == false || FirstHasTypeDictionary == true</test>
			<error>
				<message>Entry First in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="10" testNumber="30026"/>
			<description>Entry First with type Dictionary in OutlineItem shall be indirect</description>
			<test>FirstHasTypeDictionary != true || isFirstIndirect == true</test>
			<error>
				<message>Entry First with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30027"/>
			<description>Entry Last with type Dictionary in OutlineItem shall be object OutlineItem</description>
			<test>LastHasTypeDictionary != true || Last_size == 1</test>
			<error>
				<message>Entry Last with type Dictionary in OutlineItem is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30028"/>
			<description>Entry Last in OutlineItem shall have type Dictionary</description>
			<test>containsLast == false || LastHasTypeDictionary == true</test>
			<error>
				<message>Entry Last in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="10" testNumber="30029"/>
			<description>Entry Last with type Dictionary in OutlineItem shall be indirect</description>
			<test>LastHasTypeDictionary != true || isLastIndirect == true</test>
			<error>
				<message>Entry Last with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30030"/>
			<description>Entry Next with type Dictionary in OutlineItem shall be object OutlineItem</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in OutlineItem is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30031"/>
			<description>Entry Next in OutlineItem shall have type Dictionary</description>
			<test>containsNext == false || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="10" testNumber="30032"/>
			<description>Entry Next with type Dictionary in OutlineItem shall be indirect</description>
			<test>NextHasTypeDictionary != true || isNextIndirect == true</test>
			<error>
				<message>Entry Next with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30033"/>
			<description>Entry Parent with type Dictionary in OutlineItem shall be one of objects OutlineItem, Outline</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in OutlineItem is not one of objects OutlineItem, Outline</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30034"/>
			<description>Entry Parent in OutlineItem shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="7" testNumber="30035"/>
			<description>Entry Parent in OutlineItem is required</description>
			<test>containsParent == true</test>
			<error>
				<message>Entry Parent in OutlineItem is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="10" testNumber="30036"/>
			<description>Entry Parent with type Dictionary in OutlineItem shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30037"/>
			<description>Entry Prev with type Dictionary in OutlineItem shall be object OutlineItem</description>
			<test>PrevHasTypeDictionary != true || Prev_size == 1</test>
			<error>
				<message>Entry Prev with type Dictionary in OutlineItem is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30038"/>
			<description>Entry Prev in OutlineItem shall have type Dictionary</description>
			<test>containsPrev == false || PrevHasTypeDictionary == true</test>
			<error>
				<message>Entry Prev in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="10" testNumber="30039"/>
			<description>Entry Prev with type Dictionary in OutlineItem shall be indirect</description>
			<test>PrevHasTypeDictionary != true || isPrevIndirect == true</test>
			<error>
				<message>Entry Prev with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30040"/>
			<description>Entry SE with type Dictionary in OutlineItem shall be object StructElem</description>
			<test>SEHasTypeDictionary != true || SE_size == 1</test>
			<error>
				<message>Entry SE with type Dictionary in OutlineItem is not object StructElem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30041"/>
			<description>Entry SE in OutlineItem shall have type Dictionary</description>
			<test>containsSE == false || SEHasTypeDictionary == true</test>
			<error>
				<message>Entry SE in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="10" testNumber="30042"/>
			<description>Entry SE with type Dictionary in OutlineItem shall be indirect</description>
			<test>SEHasTypeDictionary != true || isSEIndirect == true</test>
			<error>
				<message>Entry SE with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30043"/>
			<description>Entry Title in OutlineItem shall have type StringText</description>
			<test>containsTitle == false || TitleHasTypeStringText == true</test>
			<error>
				<message>Entry Title in OutlineItem is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_5" clause="7" testNumber="30044"/>
			<description>Entry Title in OutlineItem is required</description>
			<test>containsTitle == true</test>
			<error>
				<message>Entry Title in OutlineItem is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_5" clause="1" testNumber="30164"/>
			<description>OutputIntents shall not contain entries except DestOutputProfile, Info, OutputCondition, OutputConditionIdentifier, RegistryName, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DestOutputProfile' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'OutputCondition' &amp;&amp; elem != 'OutputConditionIdentifier' &amp;&amp; elem != 'RegistryName' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>OutputIntents contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DestOutputProfile' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'OutputCondition' &amp;&amp; elem != 'OutputConditionIdentifier' &amp;&amp; elem != 'RegistryName' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30165"/>
			<description>Entry DestOutputProfile with type Stream in OutputIntents shall be object ICCProfileStream</description>
			<test>DestOutputProfileHasTypeStream != true || DestOutputProfile_size == 1</test>
			<error>
				<message>Entry DestOutputProfile with type Stream in OutputIntents is not object ICCProfileStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30166"/>
			<description>Entry DestOutputProfile in OutputIntents shall have type Stream</description>
			<test>containsDestOutputProfile == false || DestOutputProfileHasTypeStream == true</test>
			<error>
				<message>Entry DestOutputProfile in OutputIntents is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_5" clause="10" testNumber="30167"/>
			<description>Entry DestOutputProfile with type Stream in OutputIntents shall be indirect</description>
			<test>DestOutputProfileHasTypeStream != true || isDestOutputProfileIndirect == true</test>
			<error>
				<message>Entry DestOutputProfile with type Stream in OutputIntents is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30168"/>
			<description>Entry Info in OutputIntents shall have type StringText</description>
			<test>containsInfo == false || InfoHasTypeStringText == true</test>
			<error>
				<message>Entry Info in OutputIntents is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30169"/>
			<description>Entry OutputCondition in OutputIntents shall have type StringText</description>
			<test>containsOutputCondition == false || OutputConditionHasTypeStringText == true</test>
			<error>
				<message>Entry OutputCondition in OutputIntents is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30170"/>
			<description>Entry OutputConditionIdentifier in OutputIntents shall have type StringText</description>
			<test>containsOutputConditionIdentifier == false || OutputConditionIdentifierHasTypeStringText == true</test>
			<error>
				<message>Entry OutputConditionIdentifier in OutputIntents is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_5" clause="7" testNumber="30171"/>
			<description>Entry OutputConditionIdentifier in OutputIntents is required</description>
			<test>containsOutputConditionIdentifier == true</test>
			<error>
				<message>Entry OutputConditionIdentifier in OutputIntents is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30172"/>
			<description>Entry RegistryName in OutputIntents shall have type StringText</description>
			<test>containsRegistryName == false || RegistryNameHasTypeStringText == true</test>
			<error>
				<message>Entry RegistryName in OutputIntents is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30173"/>
			<description>Entry S in OutputIntents shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in OutputIntents is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_5" clause="7" testNumber="30174"/>
			<description>Entry S in OutputIntents is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in OutputIntents is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_5" clause="6" testNumber="30175"/>
			<description>Entry S with type Name in OutputIntents shall have one of values: ISO_PDFE1, GTS_PDFX, GTS_PDFA1</description>
			<test>SHasTypeName != true || SNameValue == "GTS_PDFX" || SNameValue == "GTS_PDFA1" || SNameValue == "ISO_PDFE1"</test>
			<error>
				<message>Entry S with type Name in OutputIntents has incorrect value %2 instead of ISO_PDFE1, GTS_PDFX, GTS_PDFA1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30176"/>
			<description>Entry Type in OutputIntents shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OutputIntents is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_5" clause="6" testNumber="30177"/>
			<description>Entry Type with type Name in OutputIntents shall have value OutputIntent</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OutputIntent"</test>
			<error>
				<message>Entry Type with type Name in OutputIntents has incorrect value %2 instead of OutputIntent</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_5" clause="1" testNumber="30242"/>
			<description>PageLabel shall not contain entries except P, S, St, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'St' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>PageLabel contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'St' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30243"/>
			<description>Entry P in PageLabel shall have type StringText</description>
			<test>containsP == false || PHasTypeStringText == true</test>
			<error>
				<message>Entry P in PageLabel is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30244"/>
			<description>Entry S in PageLabel shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in PageLabel is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_5" clause="6" testNumber="30245"/>
			<description>Entry S with type Name in PageLabel shall have one of values: A, a, R, r, D</description>
			<test>SHasTypeName != true || SNameValue == "D" || SNameValue == "R" || SNameValue == "r" || SNameValue == "A" || SNameValue == "a"</test>
			<error>
				<message>Entry S with type Name in PageLabel has incorrect value %2 instead of A, a, R, r, D</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30246"/>
			<description>Entry St in PageLabel shall have type Integer</description>
			<test>containsSt == false || StHasTypeInteger == true</test>
			<error>
				<message>Entry St in PageLabel is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_5" clause="14" testNumber="30247"/>
			<description>Entry St with type Integer in PageLabel shall satisfy possible value predicate: fn:Eval(@St &gt;= 1)</description>
			<test>StHasTypeInteger != true || StIntegerValue &gt;= 1</test>
			<error>
				<message>Entry St with type Integer in PageLabel does not satisfy possible value predicate: fn:Eval(@St &gt;= 1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30248"/>
			<description>Entry Type in PageLabel shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageLabel is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_5" clause="6" testNumber="30249"/>
			<description>Entry Type with type Name in PageLabel shall have value PageLabel</description>
			<test>TypeHasTypeName != true || TypeNameValue == "PageLabel"</test>
			<error>
				<message>Entry Type with type Name in PageLabel has incorrect value %2 instead of PageLabel</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="1" testNumber="30472"/>
			<description>PageObject shall not contain entries except AA, Annots, ArtBox, B, BleedBox, BoxColorInfo, Contents, CropBox, Dur, Group, Hid, ID, LastModified, MediaBox, Metadata, PZ, Parent, PieceInfo, PresSteps, Resources, Rotate, SeparationInfo, StructParents, Tabs, TemplateInstantiated, Thumb, Trans, TrimBox, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'Annots' &amp;&amp; elem != 'ArtBox' &amp;&amp; elem != 'B' &amp;&amp; elem != 'BleedBox' &amp;&amp; elem != 'BoxColorInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Dur' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'Hid' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'PZ' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'PresSteps' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'SeparationInfo' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Tabs' &amp;&amp; elem != 'TemplateInstantiated' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'Trans' &amp;&amp; elem != 'TrimBox' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>PageObject contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'Annots' &amp;&amp; elem != 'ArtBox' &amp;&amp; elem != 'B' &amp;&amp; elem != 'BleedBox' &amp;&amp; elem != 'BoxColorInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Dur' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'Hid' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'PZ' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'PresSteps' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'SeparationInfo' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Tabs' &amp;&amp; elem != 'TemplateInstantiated' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'Trans' &amp;&amp; elem != 'TrimBox' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30473"/>
			<description>Entry AA with type Dictionary in PageObject shall be object AddActionPageObject</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in PageObject is not object AddActionPageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30474"/>
			<description>Entry AA in PageObject shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30475"/>
			<description>Entry Annots with type Array in PageObject shall be object ArrayOfAnnots</description>
			<test>AnnotsHasTypeArray != true || Annots_size == 1</test>
			<error>
				<message>Entry Annots with type Array in PageObject is not object ArrayOfAnnots</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30476"/>
			<description>Entry Annots in PageObject shall have type Array</description>
			<test>containsAnnots == false || AnnotsHasTypeArray == true</test>
			<error>
				<message>Entry Annots in PageObject is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30477"/>
			<description>Entry ArtBox in PageObject shall have type Rectangle</description>
			<test>containsArtBox == false || ArtBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry ArtBox in PageObject is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30478"/>
			<description>Entry B with type Array in PageObject shall be object ArrayOfBeads</description>
			<test>BHasTypeArray != true || B_size == 1</test>
			<error>
				<message>Entry B with type Array in PageObject is not object ArrayOfBeads</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30479"/>
			<description>Entry B in PageObject shall have type Array</description>
			<test>containsB == false || BHasTypeArray == true</test>
			<error>
				<message>Entry B in PageObject is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="9" testNumber="30480"/>
			<description>Entry B with type Array in PageObject shall satisfy special case: fn:Not(fn:IsPresent(@Type == Template))</description>
			<test>BHasTypeArray != true || ((((TypeNameValue == "Template") == true &amp;&amp; containsB == true)) != true)</test>
			<error>
				<message>Entry B with type Array in PageObject does not satisfy special case: fn:Not(fn:IsPresent(@Type == Template))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30481"/>
			<description>Entry BleedBox in PageObject shall have type Rectangle</description>
			<test>containsBleedBox == false || BleedBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BleedBox in PageObject is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30482"/>
			<description>Entry BoxColorInfo with type Dictionary in PageObject shall be object BoxColorInfo</description>
			<test>BoxColorInfoHasTypeDictionary != true || BoxColorInfo_size == 1</test>
			<error>
				<message>Entry BoxColorInfo with type Dictionary in PageObject is not object BoxColorInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30483"/>
			<description>Entry BoxColorInfo in PageObject shall have type Dictionary</description>
			<test>containsBoxColorInfo == false || BoxColorInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry BoxColorInfo in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30484"/>
			<description>Entry Contents with type Array in PageObject shall be object ArrayOfStreamsGeneral</description>
			<test>ContentsHasTypeArray != true || Contents_size == 1</test>
			<error>
				<message>Entry Contents with type Array in PageObject is not object ArrayOfStreamsGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30485"/>
			<description>Entry Contents with type Stream in PageObject shall be object Stream</description>
			<test>ContentsHasTypeStream != true || Contents_size == 1</test>
			<error>
				<message>Entry Contents with type Stream in PageObject is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30486"/>
			<description>Entry Contents in PageObject shall have one of types: Array, Stream</description>
			<test>containsContents == false || ContentsHasTypeArray == true || ContentsHasTypeStream == true</test>
			<error>
				<message>Entry Contents in PageObject is not one of types: Array, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="10" testNumber="30487"/>
			<description>Entry Contents with type Stream in PageObject shall be indirect</description>
			<test>ContentsHasTypeStream != true || isContentsIndirect == true</test>
			<error>
				<message>Entry Contents with type Stream in PageObject is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30488"/>
			<description>Entry CropBox in PageObject shall have type Rectangle</description>
			<test>containsCropBox == false || CropBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry CropBox in PageObject is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30489"/>
			<description>Entry Dur in PageObject shall have type Number</description>
			<test>containsDur == false || DurHasTypeNumber == true</test>
			<error>
				<message>Entry Dur in PageObject is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30490"/>
			<description>Entry Group with type Dictionary in PageObject shall be object GroupAttributes</description>
			<test>GroupHasTypeDictionary != true || Group_size == 1</test>
			<error>
				<message>Entry Group with type Dictionary in PageObject is not object GroupAttributes</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30491"/>
			<description>Entry Group in PageObject shall have type Dictionary</description>
			<test>containsGroup == false || GroupHasTypeDictionary == true</test>
			<error>
				<message>Entry Group in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30492"/>
			<description>Entry Hid in PageObject shall have type Boolean</description>
			<test>containsHid == false || HidHasTypeBoolean == true</test>
			<error>
				<message>Entry Hid in PageObject is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="5" testNumber="30493"/>
			<description>Entry Hid in PageObject is deprecated since PDF 1.3</description>
			<test>containsHid == false</test>
			<error>
				<message>Entry Hid in PageObject is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30494"/>
			<description>Entry ID in PageObject shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in PageObject is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30495"/>
			<description>Entry LastModified in PageObject shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in PageObject is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="11" testNumber="30496"/>
			<description>Entry LastModified in PageObject is required, when fn:IsRequired(fn:IsPresent(PieceInfo))</description>
			<test>(containsLastModified == true || ((containsPieceInfo == true)) == false)</test>
			<error>
				<message>Entry LastModified in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30497"/>
			<description>Entry MediaBox in PageObject shall have type Rectangle</description>
			<test>containsMediaBox == false || MediaBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry MediaBox in PageObject is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="7" testNumber="30498"/>
			<description>Entry MediaBox in PageObject is required</description>
			<test>containsMediaBox == true</test>
			<error>
				<message>Entry MediaBox in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30499"/>
			<description>Entry Metadata with type Stream in PageObject shall be object Metadata</description>
			<test>MetadataHasTypeStream != true || Metadata_size == 1</test>
			<error>
				<message>Entry Metadata with type Stream in PageObject is not object Metadata</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30500"/>
			<description>Entry Metadata in PageObject shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in PageObject is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="10" testNumber="30501"/>
			<description>Entry Metadata with type Stream in PageObject shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in PageObject is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30502"/>
			<description>Entry PZ in PageObject shall have type Number</description>
			<test>containsPZ == false || PZHasTypeNumber == true</test>
			<error>
				<message>Entry PZ in PageObject is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30503"/>
			<description>Entry Parent with type Dictionary in PageObject shall be one of objects PageTreeNode, PageTreeNodeRoot</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in PageObject is not one of objects PageTreeNode, PageTreeNodeRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30504"/>
			<description>Entry Parent in PageObject shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="11" testNumber="30505"/>
			<description>Entry Parent in PageObject is required, when fn:IsRequired(@Type != Template)</description>
			<test>(containsParent == true || (TypeNameValue != "Template") == false)</test>
			<error>
				<message>Entry Parent in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="10" testNumber="30506"/>
			<description>Entry Parent with type Dictionary in PageObject shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in PageObject is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="9" testNumber="30507"/>
			<description>Entry Parent with type Dictionary in PageObject shall satisfy special case: fn:Not(fn:IsPresent(@Type == Template))</description>
			<test>ParentHasTypeDictionary != true || ((((TypeNameValue == "Template") == true &amp;&amp; containsParent == true)) != true)</test>
			<error>
				<message>Entry Parent with type Dictionary in PageObject does not satisfy special case: fn:Not(fn:IsPresent(@Type == Template))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30508"/>
			<description>Entry PieceInfo with type Dictionary in PageObject shall be object PagePiece</description>
			<test>PieceInfoHasTypeDictionary != true || PieceInfo_size == 1</test>
			<error>
				<message>Entry PieceInfo with type Dictionary in PageObject is not object PagePiece</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30509"/>
			<description>Entry PieceInfo in PageObject shall have type Dictionary</description>
			<test>containsPieceInfo == false || PieceInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry PieceInfo in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30510"/>
			<description>Entry PresSteps with type Dictionary in PageObject shall be object NavNode</description>
			<test>PresStepsHasTypeDictionary != true || PresSteps_size == 1</test>
			<error>
				<message>Entry PresSteps with type Dictionary in PageObject is not object NavNode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30511"/>
			<description>Entry PresSteps in PageObject shall have type Dictionary</description>
			<test>containsPresSteps == false || PresStepsHasTypeDictionary == true</test>
			<error>
				<message>Entry PresSteps in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30512"/>
			<description>Entry Resources with type Dictionary in PageObject shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in PageObject is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30513"/>
			<description>Entry Resources in PageObject shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="7" testNumber="30514"/>
			<description>Entry Resources in PageObject is required</description>
			<test>containsResources == true</test>
			<error>
				<message>Entry Resources in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30515"/>
			<description>Entry Rotate in PageObject shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in PageObject is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="14" testNumber="30516"/>
			<description>Entry Rotate with type Integer in PageObject shall satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in PageObject does not satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30517"/>
			<description>Entry SeparationInfo with type Dictionary in PageObject shall be object Separation</description>
			<test>SeparationInfoHasTypeDictionary != true || SeparationInfo_size == 1</test>
			<error>
				<message>Entry SeparationInfo with type Dictionary in PageObject is not object Separation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30518"/>
			<description>Entry SeparationInfo in PageObject shall have type Dictionary</description>
			<test>containsSeparationInfo == false || SeparationInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry SeparationInfo in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30519"/>
			<description>Entry StructParents in PageObject shall have type Integer</description>
			<test>containsStructParents == false || StructParentsHasTypeInteger == true</test>
			<error>
				<message>Entry StructParents in PageObject is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="11" testNumber="30520"/>
			<description>Entry StructParents in PageObject is required, when fn:IsRequired(fn:PageContainsStructContentItems())</description>
			<test>(containsStructParents == true || ((pageContainsStructContentItems == true)) == false)</test>
			<error>
				<message>Entry StructParents in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30521"/>
			<description>Entry Tabs in PageObject shall have type Name</description>
			<test>containsTabs == false || TabsHasTypeName == true</test>
			<error>
				<message>Entry Tabs in PageObject is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="6" testNumber="30522"/>
			<description>Entry Tabs with type Name in PageObject shall have one of values: R, C, S</description>
			<test>TabsHasTypeName != true || TabsNameValue == "R" || TabsNameValue == "C" || TabsNameValue == "S"</test>
			<error>
				<message>Entry Tabs with type Name in PageObject has incorrect value %2 instead of R, C, S</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TabsNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30523"/>
			<description>Entry TemplateInstantiated in PageObject shall have type Name</description>
			<test>containsTemplateInstantiated == false || TemplateInstantiatedHasTypeName == true</test>
			<error>
				<message>Entry TemplateInstantiated in PageObject is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="11" testNumber="30524"/>
			<description>Entry TemplateInstantiated in PageObject is required, when fn:IsRequired(fn:InNameTree(trailer::Catalog::Names::Pages) || fn:InNameTree(trailer::Catalog::Names::Templates))</description>
			<test>(containsTemplateInstantiated == true || ((nameTreetrailerCatalogNamesPagesContainsTemplateInstantiatedString == true) || (nameTreetrailerCatalogNamesTemplatesContainsTemplateInstantiatedString == true)) == false)</test>
			<error>
				<message>Entry TemplateInstantiated in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30525"/>
			<description>Entry Thumb with type Stream in PageObject shall be object Thumbnail</description>
			<test>ThumbHasTypeStream != true || Thumb_size == 1</test>
			<error>
				<message>Entry Thumb with type Stream in PageObject is not object Thumbnail</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30526"/>
			<description>Entry Thumb in PageObject shall have type Stream</description>
			<test>containsThumb == false || ThumbHasTypeStream == true</test>
			<error>
				<message>Entry Thumb in PageObject is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="10" testNumber="30527"/>
			<description>Entry Thumb with type Stream in PageObject shall be indirect</description>
			<test>ThumbHasTypeStream != true || isThumbIndirect == true</test>
			<error>
				<message>Entry Thumb with type Stream in PageObject is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30528"/>
			<description>Entry Trans with type Dictionary in PageObject shall be object Transition</description>
			<test>TransHasTypeDictionary != true || Trans_size == 1</test>
			<error>
				<message>Entry Trans with type Dictionary in PageObject is not object Transition</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30529"/>
			<description>Entry Trans in PageObject shall have type Dictionary</description>
			<test>containsTrans == false || TransHasTypeDictionary == true</test>
			<error>
				<message>Entry Trans in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30530"/>
			<description>Entry TrimBox in PageObject shall have type Rectangle</description>
			<test>containsTrimBox == false || TrimBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry TrimBox in PageObject is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30531"/>
			<description>Entry Type in PageObject shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageObject is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="7" testNumber="30532"/>
			<description>Entry Type in PageObject is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_5" clause="6" testNumber="30533"/>
			<description>Entry Type with type Name in PageObject shall have one of values: Page, Template</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Page" || TypeNameValue == "Template"</test>
			<error>
				<message>Entry Type with type Name in PageObject has incorrect value %2 instead of Page, Template</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APagePieceEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30744"/>
			<description>Entry with type Dictionary in PagePiece shall be object Data</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in PagePiece is not object Data</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APagePieceEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30745"/>
			<description>Entry in PagePiece shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in PagePiece is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="1" testNumber="30852"/>
			<description>PageTreeNode shall not contain entries except Count, CropBox, Kids, MediaBox, Parent, Resources, Rotate, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>PageTreeNode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30853"/>
			<description>Entry Count in PageTreeNode shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in PageTreeNode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="7" testNumber="30854"/>
			<description>Entry Count in PageTreeNode is required</description>
			<test>containsCount == true</test>
			<error>
				<message>Entry Count in PageTreeNode is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="14" testNumber="30855"/>
			<description>Entry Count with type Integer in PageTreeNode shall satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</description>
			<test>CountHasTypeInteger != true || CountIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Count with type Integer in PageTreeNode does not satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30856"/>
			<description>Entry CropBox in PageTreeNode shall have type Rectangle</description>
			<test>containsCropBox == false || CropBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry CropBox in PageTreeNode is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30857"/>
			<description>Entry Kids with type Array in PageTreeNode shall be object ArrayOfPageTreeNodeKids</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in PageTreeNode is not object ArrayOfPageTreeNodeKids</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30858"/>
			<description>Entry Kids in PageTreeNode shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in PageTreeNode is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="7" testNumber="30859"/>
			<description>Entry Kids in PageTreeNode is required</description>
			<test>containsKids == true</test>
			<error>
				<message>Entry Kids in PageTreeNode is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30860"/>
			<description>Entry MediaBox in PageTreeNode shall have type Rectangle</description>
			<test>containsMediaBox == false || MediaBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry MediaBox in PageTreeNode is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30861"/>
			<description>Entry Parent with type Dictionary in PageTreeNode shall be one of objects PageTreeNode, PageTreeNodeRoot</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in PageTreeNode is not one of objects PageTreeNode, PageTreeNodeRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30862"/>
			<description>Entry Parent in PageTreeNode shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in PageTreeNode is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="7" testNumber="30863"/>
			<description>Entry Parent in PageTreeNode is required</description>
			<test>containsParent == true</test>
			<error>
				<message>Entry Parent in PageTreeNode is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="10" testNumber="30864"/>
			<description>Entry Parent with type Dictionary in PageTreeNode shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in PageTreeNode is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="17" testNumber="30865"/>
			<description>Entry Resources with type Dictionary in PageTreeNode shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in PageTreeNode is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30866"/>
			<description>Entry Resources in PageTreeNode shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PageTreeNode is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30867"/>
			<description>Entry Rotate in PageTreeNode shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in PageTreeNode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="14" testNumber="30868"/>
			<description>Entry Rotate with type Integer in PageTreeNode shall satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in PageTreeNode does not satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="8" testNumber="30869"/>
			<description>Entry Type in PageTreeNode shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageTreeNode is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="7" testNumber="30870"/>
			<description>Entry Type in PageTreeNode is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PageTreeNode is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_5" clause="6" testNumber="30871"/>
			<description>Entry Type with type Name in PageTreeNode shall have value Pages</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pages"</test>
			<error>
				<message>Entry Type with type Name in PageTreeNode has incorrect value %2 instead of Pages</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_5" clause="1" testNumber="31012"/>
			<description>PageTreeNodeRoot shall not contain entries except Count, CropBox, Kids, MediaBox, Resources, Rotate, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>PageTreeNodeRoot contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31013"/>
			<description>Entry Count in PageTreeNodeRoot shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in PageTreeNodeRoot is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_5" clause="7" testNumber="31014"/>
			<description>Entry Count in PageTreeNodeRoot is required</description>
			<test>containsCount == true</test>
			<error>
				<message>Entry Count in PageTreeNodeRoot is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_5" clause="14" testNumber="31015"/>
			<description>Entry Count with type Integer in PageTreeNodeRoot shall satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</description>
			<test>CountHasTypeInteger != true || CountIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Count with type Integer in PageTreeNodeRoot does not satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31016"/>
			<description>Entry CropBox in PageTreeNodeRoot shall have type Rectangle</description>
			<test>containsCropBox == false || CropBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry CropBox in PageTreeNodeRoot is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31017"/>
			<description>Entry Kids with type Array in PageTreeNodeRoot shall be object ArrayOfPageTreeNodeKids</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in PageTreeNodeRoot is not object ArrayOfPageTreeNodeKids</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31018"/>
			<description>Entry Kids in PageTreeNodeRoot shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in PageTreeNodeRoot is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_5" clause="7" testNumber="31019"/>
			<description>Entry Kids in PageTreeNodeRoot is required</description>
			<test>containsKids == true</test>
			<error>
				<message>Entry Kids in PageTreeNodeRoot is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31020"/>
			<description>Entry MediaBox in PageTreeNodeRoot shall have type Rectangle</description>
			<test>containsMediaBox == false || MediaBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry MediaBox in PageTreeNodeRoot is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31021"/>
			<description>Entry Resources with type Dictionary in PageTreeNodeRoot shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in PageTreeNodeRoot is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31022"/>
			<description>Entry Resources in PageTreeNodeRoot shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PageTreeNodeRoot is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31023"/>
			<description>Entry Rotate in PageTreeNodeRoot shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in PageTreeNodeRoot is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_5" clause="14" testNumber="31024"/>
			<description>Entry Rotate with type Integer in PageTreeNodeRoot shall satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in PageTreeNodeRoot does not satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31025"/>
			<description>Entry Type in PageTreeNodeRoot shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageTreeNodeRoot is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_5" clause="7" testNumber="31026"/>
			<description>Entry Type in PageTreeNodeRoot is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PageTreeNodeRoot is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_5" clause="6" testNumber="31027"/>
			<description>Entry Type with type Name in PageTreeNodeRoot shall have value Pages</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pages"</test>
			<error>
				<message>Entry Type with type Name in PageTreeNodeRoot has incorrect value %2 instead of Pages</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_5" clause="2" testNumber="31156"/>
			<description>PatternColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>PatternColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31157"/>
			<description>Entry 0 in PatternColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in PatternColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_5" clause="6" testNumber="31158"/>
			<description>Entry 0 with type Name in PatternColorSpace shall have value Pattern</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Pattern"</test>
			<error>
				<message>Entry 0 with type Name in PatternColorSpace has incorrect value %2 instead of Pattern</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31159"/>
			<description>Entry 1 with type Array in PatternColorSpace shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>entry1HasTypeArray != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Array in PatternColorSpace is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31160"/>
			<description>Entry 1 in PatternColorSpace shall have one of types: Array, Name</description>
			<test>size &lt;= 1 || entry1HasTypeArray == true || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in PatternColorSpace is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_5" clause="6" testNumber="31161"/>
			<description>Entry 1 with type Name in PatternColorSpace shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>entry1HasTypeName != true || entry1NameValue == "DeviceCMYK" || entry1NameValue == "DeviceRGB" || entry1NameValue == "DeviceGray"</test>
			<error>
				<message>Entry 1 with type Name in PatternColorSpace has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternMapEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31191"/>
			<description>Entry with type Stream in PatternMap shall be object PatternType1</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in PatternMap is not object PatternType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternMapEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31192"/>
			<description>Entry with type Dictionary in PatternMap shall be object PatternType2</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in PatternMap is not object PatternType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternMapEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31193"/>
			<description>Entry in PatternMap shall have one of types: Stream, Dictionary</description>
			<test>HasTypeStream == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in PatternMap is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternMapEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="31194"/>
			<description>Entry with type Stream in PatternMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in PatternMap is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="1" testNumber="31340"/>
			<description>PatternType1 shall not contain entries except BBox, DL, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Matrix, PaintType, PatternType, Resources, TilingType, Type, XStep, XUID, YStep</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PaintType' &amp;&amp; elem != 'PatternType' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'TilingType' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XStep' &amp;&amp; elem != 'XUID' &amp;&amp; elem != 'YStep').length == 0</test>
			<error>
				<message>PatternType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PaintType' &amp;&amp; elem != 'PatternType' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'TilingType' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XStep' &amp;&amp; elem != 'XUID' &amp;&amp; elem != 'YStep').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31341"/>
			<description>Entry BBox in PatternType1 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in PatternType1 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="31342"/>
			<description>Entry BBox in PatternType1 is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31343"/>
			<description>Entry DL in PatternType1 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in PatternType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="31344"/>
			<description>Entry DL with type Integer in PatternType1 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in PatternType1 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31345"/>
			<description>Entry DecodeParms with type Array in PatternType1 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in PatternType1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31346"/>
			<description>Entry DecodeParms with type Dictionary in PatternType1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in PatternType1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31347"/>
			<description>Entry DecodeParms in PatternType1 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in PatternType1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="31348"/>
			<description>Entry DecodeParms with type Array in PatternType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in PatternType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31349"/>
			<description>Entry F with type Dictionary in PatternType1 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in PatternType1 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31350"/>
			<description>Entry F in PatternType1 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in PatternType1 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31351"/>
			<description>Entry FDecodeParms with type Array in PatternType1 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in PatternType1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31352"/>
			<description>Entry FDecodeParms with type Dictionary in PatternType1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in PatternType1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31353"/>
			<description>Entry FDecodeParms in PatternType1 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in PatternType1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="31354"/>
			<description>Entry FDecodeParms with type Array in PatternType1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in PatternType1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31355"/>
			<description>Entry FFilter with type Array in PatternType1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in PatternType1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31356"/>
			<description>Entry FFilter in PatternType1 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in PatternType1 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="31357"/>
			<description>Entry FFilter with type Array in PatternType1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in PatternType1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="31358"/>
			<description>Entry FFilter with type Name in PatternType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in PatternType1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31359"/>
			<description>Entry Filter with type Array in PatternType1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in PatternType1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31360"/>
			<description>Entry Filter in PatternType1 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in PatternType1 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="31361"/>
			<description>Entry Filter with type Array in PatternType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in PatternType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="31362"/>
			<description>Entry Filter with type Name in PatternType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in PatternType1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31363"/>
			<description>Entry Length in PatternType1 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in PatternType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="31364"/>
			<description>Entry Length in PatternType1 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31365"/>
			<description>Entry Matrix in PatternType1 shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in PatternType1 is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31366"/>
			<description>Entry PaintType in PatternType1 shall have type Integer</description>
			<test>containsPaintType == false || PaintTypeHasTypeInteger == true</test>
			<error>
				<message>Entry PaintType in PatternType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="31367"/>
			<description>Entry PaintType in PatternType1 is required</description>
			<test>containsPaintType == true</test>
			<error>
				<message>Entry PaintType in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="31368"/>
			<description>Entry PaintType with type Integer in PatternType1 shall have one of values: 1, 2</description>
			<test>PaintTypeHasTypeInteger != true || PaintTypeIntegerValue == 1 || PaintTypeIntegerValue == 2</test>
			<error>
				<message>Entry PaintType with type Integer in PatternType1 has incorrect value %2 instead of 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PaintTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31369"/>
			<description>Entry PatternType in PatternType1 shall have type Integer</description>
			<test>containsPatternType == false || PatternTypeHasTypeInteger == true</test>
			<error>
				<message>Entry PatternType in PatternType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="31370"/>
			<description>Entry PatternType in PatternType1 is required</description>
			<test>containsPatternType == true</test>
			<error>
				<message>Entry PatternType in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="31371"/>
			<description>Entry PatternType with type Integer in PatternType1 shall have value 1</description>
			<test>PatternTypeHasTypeInteger != true || PatternTypeIntegerValue == 1</test>
			<error>
				<message>Entry PatternType with type Integer in PatternType1 has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PatternTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31372"/>
			<description>Entry Resources with type Dictionary in PatternType1 shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in PatternType1 is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31373"/>
			<description>Entry Resources in PatternType1 shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PatternType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="31374"/>
			<description>Entry Resources in PatternType1 is required</description>
			<test>containsResources == true</test>
			<error>
				<message>Entry Resources in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31375"/>
			<description>Entry TilingType in PatternType1 shall have type Integer</description>
			<test>containsTilingType == false || TilingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry TilingType in PatternType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="31376"/>
			<description>Entry TilingType in PatternType1 is required</description>
			<test>containsTilingType == true</test>
			<error>
				<message>Entry TilingType in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="31377"/>
			<description>Entry TilingType with type Integer in PatternType1 shall have one of values: 1, 2, 3</description>
			<test>TilingTypeHasTypeInteger != true || TilingTypeIntegerValue == 1 || TilingTypeIntegerValue == 2 || TilingTypeIntegerValue == 3</test>
			<error>
				<message>Entry TilingType with type Integer in PatternType1 has incorrect value %2 instead of 1, 2, 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TilingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31378"/>
			<description>Entry Type in PatternType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PatternType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="31379"/>
			<description>Entry Type with type Name in PatternType1 shall have value Pattern</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pattern"</test>
			<error>
				<message>Entry Type with type Name in PatternType1 has incorrect value %2 instead of Pattern</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31380"/>
			<description>Entry XStep in PatternType1 shall have type Number</description>
			<test>containsXStep == false || XStepHasTypeNumber == true</test>
			<error>
				<message>Entry XStep in PatternType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="31381"/>
			<description>Entry XStep in PatternType1 is required</description>
			<test>containsXStep == true</test>
			<error>
				<message>Entry XStep in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31382"/>
			<description>Entry XUID with type Array in PatternType1 shall be object ArrayOfIntegersGeneral</description>
			<test>XUIDHasTypeArray != true || XUID_size == 1</test>
			<error>
				<message>Entry XUID with type Array in PatternType1 is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31383"/>
			<description>Entry XUID in PatternType1 shall have type Array</description>
			<test>containsXUID == false || XUIDHasTypeArray == true</test>
			<error>
				<message>Entry XUID in PatternType1 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="5" testNumber="31384"/>
			<description>Entry XUID in PatternType1 is deprecated since PDF 1.3</description>
			<test>containsXUID == false</test>
			<error>
				<message>Entry XUID in PatternType1 is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31385"/>
			<description>Entry YStep in PatternType1 shall have type Number</description>
			<test>containsYStep == false || YStepHasTypeNumber == true</test>
			<error>
				<message>Entry YStep in PatternType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="31386"/>
			<description>Entry YStep in PatternType1 is required</description>
			<test>containsYStep == true</test>
			<error>
				<message>Entry YStep in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_5" clause="1" testNumber="31556"/>
			<description>PatternType2 shall not contain entries except ExtGState, Matrix, PatternType, Shading, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ExtGState' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PatternType' &amp;&amp; elem != 'Shading' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>PatternType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ExtGState' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PatternType' &amp;&amp; elem != 'Shading' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31557"/>
			<description>Entry ExtGState with type Dictionary in PatternType2 shall be object GraphicsStateParameter</description>
			<test>ExtGStateHasTypeDictionary != true || ExtGState_size == 1</test>
			<error>
				<message>Entry ExtGState with type Dictionary in PatternType2 is not object GraphicsStateParameter</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31558"/>
			<description>Entry ExtGState in PatternType2 shall have type Dictionary</description>
			<test>containsExtGState == false || ExtGStateHasTypeDictionary == true</test>
			<error>
				<message>Entry ExtGState in PatternType2 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31559"/>
			<description>Entry Matrix in PatternType2 shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in PatternType2 is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31560"/>
			<description>Entry PatternType in PatternType2 shall have type Integer</description>
			<test>containsPatternType == false || PatternTypeHasTypeInteger == true</test>
			<error>
				<message>Entry PatternType in PatternType2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="31561"/>
			<description>Entry PatternType in PatternType2 is required</description>
			<test>containsPatternType == true</test>
			<error>
				<message>Entry PatternType in PatternType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_5" clause="6" testNumber="31562"/>
			<description>Entry PatternType with type Integer in PatternType2 shall have value 2</description>
			<test>PatternTypeHasTypeInteger != true || PatternTypeIntegerValue == 2</test>
			<error>
				<message>Entry PatternType with type Integer in PatternType2 has incorrect value %2 instead of 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PatternTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31563"/>
			<description>Entry Shading with type Stream in PatternType2 shall be one of objects ShadingType4, ShadingType5, ShadingType6, ShadingType7</description>
			<test>ShadingHasTypeStream != true || Shading_size == 1</test>
			<error>
				<message>Entry Shading with type Stream in PatternType2 is not one of objects ShadingType4, ShadingType5, ShadingType6, ShadingType7</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31564"/>
			<description>Entry Shading with type Dictionary in PatternType2 shall be one of objects ShadingType1, ShadingType2, ShadingType3</description>
			<test>ShadingHasTypeDictionary != true || Shading_size == 1</test>
			<error>
				<message>Entry Shading with type Dictionary in PatternType2 is not one of objects ShadingType1, ShadingType2, ShadingType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31565"/>
			<description>Entry Shading in PatternType2 shall have one of types: Stream, Dictionary</description>
			<test>containsShading == false || ShadingHasTypeStream == true || ShadingHasTypeDictionary == true</test>
			<error>
				<message>Entry Shading in PatternType2 is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="31566"/>
			<description>Entry Shading in PatternType2 is required</description>
			<test>containsShading == true</test>
			<error>
				<message>Entry Shading in PatternType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_5" clause="10" testNumber="31567"/>
			<description>Entry Shading with type Stream in PatternType2 shall be indirect</description>
			<test>ShadingHasTypeStream != true || isShadingIndirect == true</test>
			<error>
				<message>Entry Shading with type Stream in PatternType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31568"/>
			<description>Entry Type in PatternType2 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PatternType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_5" clause="6" testNumber="31569"/>
			<description>Entry Type with type Name in PatternType2 shall have value Pattern</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pattern"</test>
			<error>
				<message>Entry Type with type Name in PatternType2 has incorrect value %2 instead of Pattern</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_5" clause="1" testNumber="31612"/>
			<description>Permissions shall not contain entries except DocMDP, UR3</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DocMDP' &amp;&amp; elem != 'UR3').length == 0</test>
			<error>
				<message>Permissions contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DocMDP' &amp;&amp; elem != 'UR3').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31613"/>
			<description>Entry DocMDP with type Dictionary in Permissions shall be object Signature</description>
			<test>DocMDPHasTypeDictionary != true || DocMDP_size == 1</test>
			<error>
				<message>Entry DocMDP with type Dictionary in Permissions is not object Signature</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31614"/>
			<description>Entry DocMDP in Permissions shall have type Dictionary</description>
			<test>containsDocMDP == false || DocMDPHasTypeDictionary == true</test>
			<error>
				<message>Entry DocMDP in Permissions is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_5" clause="10" testNumber="31615"/>
			<description>Entry DocMDP with type Dictionary in Permissions shall be indirect</description>
			<test>DocMDPHasTypeDictionary != true || isDocMDPIndirect == true</test>
			<error>
				<message>Entry DocMDP with type Dictionary in Permissions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_5" clause="9" testNumber="31616"/>
			<description>Entry DocMDP with type Dictionary in Permissions shall satisfy special case: fn:Eval(fn:ArrayLength(DocMDP::Reference) &gt;= 1)</description>
			<test>DocMDPHasTypeDictionary != true || (DocMDPReferenceArraySize &gt;= 1)</test>
			<error>
				<message>Entry DocMDP with type Dictionary in Permissions does not satisfy special case: fn:Eval(fn:ArrayLength(DocMDP::Reference) &gt;= 1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31617"/>
			<description>Entry UR3 with type Dictionary in Permissions shall be object Signature</description>
			<test>UR3HasTypeDictionary != true || UR3_size == 1</test>
			<error>
				<message>Entry UR3 with type Dictionary in Permissions is not object Signature</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31618"/>
			<description>Entry UR3 in Permissions shall have type Dictionary</description>
			<test>containsUR3 == false || UR3HasTypeDictionary == true</test>
			<error>
				<message>Entry UR3 in Permissions is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_5" clause="1" testNumber="31743"/>
			<description>Reference shall not contain entries except F, ID, Page</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Page').length == 0</test>
			<error>
				<message>Reference contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Page').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31744"/>
			<description>Entry F with type Dictionary in Reference shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in Reference is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31745"/>
			<description>Entry F in Reference shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in Reference is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_5" clause="7" testNumber="31746"/>
			<description>Entry F in Reference is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in Reference is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31747"/>
			<description>Entry ID with type Array in Reference shall be object ArrayOf_2StringsByte</description>
			<test>entryIDHasTypeArray != true || entryID_size == 1</test>
			<error>
				<message>Entry ID with type Array in Reference is not object ArrayOf_2StringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31748"/>
			<description>Entry ID in Reference shall have type Array</description>
			<test>containsID == false || entryIDHasTypeArray == true</test>
			<error>
				<message>Entry ID in Reference is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31749"/>
			<description>Entry Page in Reference shall have one of types: StringText, Integer</description>
			<test>containsPage == false || PageHasTypeStringText == true || PageHasTypeInteger == true</test>
			<error>
				<message>Entry Page in Reference is not one of types: StringText, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_5" clause="7" testNumber="31750"/>
			<description>Entry Page in Reference is required</description>
			<test>containsPage == true</test>
			<error>
				<message>Entry Page in Reference is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_5" clause="14" testNumber="31751"/>
			<description>Entry Page with type Integer in Reference shall satisfy possible value predicate: fn:Eval(@Page &gt;= 0)</description>
			<test>PageHasTypeInteger != true || PageIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Page with type Integer in Reference does not satisfy possible value predicate: fn:Eval(@Page &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArray">
			<id specification="ISO_32000_1_5" clause="3" testNumber="31781"/>
			<description>RelatedFilesArray shall contain 2*n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 0</test>
			<error>
				<message>RelatedFilesArray contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArraySubArray">
			<id specification="ISO_32000_1_5" clause="2" testNumber="31795"/>
			<description>RelatedFilesArraySubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>RelatedFilesArraySubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArraySubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31796"/>
			<description>Entry 0 in RelatedFilesArraySubArray shall have type String</description>
			<test>size &lt;= 0 || entry0HasTypeString == true</test>
			<error>
				<message>Entry 0 in RelatedFilesArraySubArray is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArraySubArray">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31797"/>
			<description>Entry 1 with type Stream in RelatedFilesArraySubArray shall be object EmbeddedFileStream</description>
			<test>entry1HasTypeStream != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Stream in RelatedFilesArraySubArray is not object EmbeddedFileStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArraySubArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31798"/>
			<description>Entry 1 in RelatedFilesArraySubArray shall have type Stream</description>
			<test>size &lt;= 1 || entry1HasTypeStream == true</test>
			<error>
				<message>Entry 1 in RelatedFilesArraySubArray is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArraySubArray">
			<id specification="ISO_32000_1_5" clause="10" testNumber="31799"/>
			<description>Entry 1 with type Stream in RelatedFilesArraySubArray shall be indirect</description>
			<test>entry1HasTypeStream != true || isentry1Indirect == true</test>
			<error>
				<message>Entry 1 with type Stream in RelatedFilesArraySubArray is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionBE">
			<id specification="ISO_32000_1_5" clause="1" testNumber="31815"/>
			<description>RenditionBE shall not contain entries except C</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C').length == 0</test>
			<error>
				<message>RenditionBE contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionBE">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31816"/>
			<description>Entry C with type Dictionary in RenditionBE shall be object MediaCriteria</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in RenditionBE is not object MediaCriteria</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionBE">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31817"/>
			<description>Entry C in RenditionBE shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in RenditionBE is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMH">
			<id specification="ISO_32000_1_5" clause="1" testNumber="31827"/>
			<description>RenditionMH shall not contain entries except C</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C').length == 0</test>
			<error>
				<message>RenditionMH contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMH">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31828"/>
			<description>Entry C with type Dictionary in RenditionMH shall be object MediaCriteria</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in RenditionMH is not object MediaCriteria</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMH">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31829"/>
			<description>Entry C in RenditionMH shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in RenditionMH is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_5" clause="1" testNumber="31839"/>
			<description>RenditionMedia shall not contain entries except BE, C, MH, N, P, S, SP, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'C' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SP' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>RenditionMedia contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'C' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SP' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31840"/>
			<description>Entry BE with type Dictionary in RenditionMedia shall be object RenditionBE</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in RenditionMedia is not object RenditionBE</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31841"/>
			<description>Entry BE in RenditionMedia shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in RenditionMedia is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31842"/>
			<description>Entry C with type Dictionary in RenditionMedia shall be one of objects MediaClipSection, MediaClipData</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in RenditionMedia is not one of objects MediaClipSection, MediaClipData</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31843"/>
			<description>Entry C in RenditionMedia shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in RenditionMedia is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31844"/>
			<description>Entry MH with type Dictionary in RenditionMedia shall be object RenditionMH</description>
			<test>MHHasTypeDictionary != true || MH_size == 1</test>
			<error>
				<message>Entry MH with type Dictionary in RenditionMedia is not object RenditionMH</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31845"/>
			<description>Entry MH in RenditionMedia shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in RenditionMedia is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31846"/>
			<description>Entry N in RenditionMedia shall have type StringText</description>
			<test>containsN == false || NHasTypeStringText == true</test>
			<error>
				<message>Entry N in RenditionMedia is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31847"/>
			<description>Entry P with type Dictionary in RenditionMedia shall be object MediaPlayParameters</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in RenditionMedia is not object MediaPlayParameters</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31848"/>
			<description>Entry P in RenditionMedia shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in RenditionMedia is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_5" clause="11" testNumber="31849"/>
			<description>Entry P in RenditionMedia is required, when fn:IsRequired(fn:Not(fn:IsPresent(C)))</description>
			<test>(containsP == true || (((containsC == true)) != true) == false)</test>
			<error>
				<message>Entry P in RenditionMedia is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31850"/>
			<description>Entry S in RenditionMedia shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in RenditionMedia is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_5" clause="7" testNumber="31851"/>
			<description>Entry S in RenditionMedia is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in RenditionMedia is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_5" clause="6" testNumber="31852"/>
			<description>Entry S with type Name in RenditionMedia shall have value MR</description>
			<test>SHasTypeName != true || SNameValue == "MR"</test>
			<error>
				<message>Entry S with type Name in RenditionMedia has incorrect value %2 instead of MR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31853"/>
			<description>Entry SP with type Dictionary in RenditionMedia shall be object MediaScreenParameters</description>
			<test>SPHasTypeDictionary != true || SP_size == 1</test>
			<error>
				<message>Entry SP with type Dictionary in RenditionMedia is not object MediaScreenParameters</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31854"/>
			<description>Entry SP in RenditionMedia shall have type Dictionary</description>
			<test>containsSP == false || SPHasTypeDictionary == true</test>
			<error>
				<message>Entry SP in RenditionMedia is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31855"/>
			<description>Entry Type in RenditionMedia shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RenditionMedia is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_5" clause="6" testNumber="31856"/>
			<description>Entry Type with type Name in RenditionMedia shall have value Rendition</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Rendition"</test>
			<error>
				<message>Entry Type with type Name in RenditionMedia has incorrect value %2 instead of Rendition</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_5" clause="1" testNumber="31911"/>
			<description>RenditionSelector shall not contain entries except BE, MH, N, R, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>RenditionSelector contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31912"/>
			<description>Entry BE with type Dictionary in RenditionSelector shall be object RenditionBE</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in RenditionSelector is not object RenditionBE</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31913"/>
			<description>Entry BE in RenditionSelector shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in RenditionSelector is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31914"/>
			<description>Entry MH with type Dictionary in RenditionSelector shall be object RenditionMH</description>
			<test>MHHasTypeDictionary != true || MH_size == 1</test>
			<error>
				<message>Entry MH with type Dictionary in RenditionSelector is not object RenditionMH</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31915"/>
			<description>Entry MH in RenditionSelector shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in RenditionSelector is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31916"/>
			<description>Entry N in RenditionSelector shall have type StringText</description>
			<test>containsN == false || NHasTypeStringText == true</test>
			<error>
				<message>Entry N in RenditionSelector is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_5" clause="17" testNumber="31917"/>
			<description>Entry R with type Array in RenditionSelector shall be object ArrayOfRenditions</description>
			<test>RHasTypeArray != true || R_size == 1</test>
			<error>
				<message>Entry R with type Array in RenditionSelector is not object ArrayOfRenditions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31918"/>
			<description>Entry R in RenditionSelector shall have type Array</description>
			<test>containsR == false || RHasTypeArray == true</test>
			<error>
				<message>Entry R in RenditionSelector is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_5" clause="7" testNumber="31919"/>
			<description>Entry R in RenditionSelector is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in RenditionSelector is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31920"/>
			<description>Entry S in RenditionSelector shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in RenditionSelector is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_5" clause="7" testNumber="31921"/>
			<description>Entry S in RenditionSelector is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in RenditionSelector is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_5" clause="6" testNumber="31922"/>
			<description>Entry S with type Name in RenditionSelector shall have value SR</description>
			<test>SHasTypeName != true || SNameValue == "SR"</test>
			<error>
				<message>Entry S with type Name in RenditionSelector has incorrect value %2 instead of SR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_5" clause="8" testNumber="31923"/>
			<description>Entry Type in RenditionSelector shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RenditionSelector is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_5" clause="6" testNumber="31924"/>
			<description>Entry Type with type Name in RenditionSelector shall have value Rendition</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Rendition"</test>
			<error>
				<message>Entry Type with type Name in RenditionSelector has incorrect value %2 instead of Rendition</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_5" clause="1" testNumber="32417"/>
			<description>Resource shall not contain entries except ColorSpace, ExtGState, Font, Pattern, ProcSet, Properties, Shading, XObject</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ColorSpace' &amp;&amp; elem != 'ExtGState' &amp;&amp; elem != 'Font' &amp;&amp; elem != 'Pattern' &amp;&amp; elem != 'ProcSet' &amp;&amp; elem != 'Properties' &amp;&amp; elem != 'Shading' &amp;&amp; elem != 'XObject').length == 0</test>
			<error>
				<message>Resource contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ColorSpace' &amp;&amp; elem != 'ExtGState' &amp;&amp; elem != 'Font' &amp;&amp; elem != 'Pattern' &amp;&amp; elem != 'ProcSet' &amp;&amp; elem != 'Properties' &amp;&amp; elem != 'Shading' &amp;&amp; elem != 'XObject').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32418"/>
			<description>Entry ColorSpace with type Dictionary in Resource shall be object ColorSpaceMap</description>
			<test>ColorSpaceHasTypeDictionary != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Dictionary in Resource is not object ColorSpaceMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32419"/>
			<description>Entry ColorSpace in Resource shall have type Dictionary</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeDictionary == true</test>
			<error>
				<message>Entry ColorSpace in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32420"/>
			<description>Entry ExtGState with type Dictionary in Resource shall be object GraphicsStateParameterMap</description>
			<test>ExtGStateHasTypeDictionary != true || ExtGState_size == 1</test>
			<error>
				<message>Entry ExtGState with type Dictionary in Resource is not object GraphicsStateParameterMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32421"/>
			<description>Entry ExtGState in Resource shall have type Dictionary</description>
			<test>containsExtGState == false || ExtGStateHasTypeDictionary == true</test>
			<error>
				<message>Entry ExtGState in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32422"/>
			<description>Entry Font with type Dictionary in Resource shall be object FontMap</description>
			<test>FontHasTypeDictionary != true || Font_size == 1</test>
			<error>
				<message>Entry Font with type Dictionary in Resource is not object FontMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32423"/>
			<description>Entry Font in Resource shall have type Dictionary</description>
			<test>containsFont == false || FontHasTypeDictionary == true</test>
			<error>
				<message>Entry Font in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32424"/>
			<description>Entry Pattern with type Dictionary in Resource shall be object PatternMap</description>
			<test>PatternHasTypeDictionary != true || Pattern_size == 1</test>
			<error>
				<message>Entry Pattern with type Dictionary in Resource is not object PatternMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32425"/>
			<description>Entry Pattern in Resource shall have type Dictionary</description>
			<test>containsPattern == false || PatternHasTypeDictionary == true</test>
			<error>
				<message>Entry Pattern in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32426"/>
			<description>Entry ProcSet with type Array in Resource shall be object ArrayOfNamesForProcSet</description>
			<test>ProcSetHasTypeArray != true || ProcSet_size == 1</test>
			<error>
				<message>Entry ProcSet with type Array in Resource is not object ArrayOfNamesForProcSet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32427"/>
			<description>Entry ProcSet in Resource shall have type Array</description>
			<test>containsProcSet == false || ProcSetHasTypeArray == true</test>
			<error>
				<message>Entry ProcSet in Resource is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32428"/>
			<description>Entry Properties with type Dictionary in Resource shall be object _UniversalDictionary</description>
			<test>entryPropertiesHasTypeDictionary != true || entryProperties_size == 1</test>
			<error>
				<message>Entry Properties with type Dictionary in Resource is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32429"/>
			<description>Entry Properties in Resource shall have type Dictionary</description>
			<test>containsProperties == false || entryPropertiesHasTypeDictionary == true</test>
			<error>
				<message>Entry Properties in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32430"/>
			<description>Entry Shading with type Dictionary in Resource shall be object ShadingMap</description>
			<test>ShadingHasTypeDictionary != true || Shading_size == 1</test>
			<error>
				<message>Entry Shading with type Dictionary in Resource is not object ShadingMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32431"/>
			<description>Entry Shading in Resource shall have type Dictionary</description>
			<test>containsShading == false || ShadingHasTypeDictionary == true</test>
			<error>
				<message>Entry Shading in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32432"/>
			<description>Entry XObject with type Dictionary in Resource shall be object XObjectMap</description>
			<test>XObjectHasTypeDictionary != true || XObject_size == 1</test>
			<error>
				<message>Entry XObject with type Dictionary in Resource is not object XObjectMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32433"/>
			<description>Entry XObject in Resource shall have type Dictionary</description>
			<test>containsXObject == false || XObjectHasTypeDictionary == true</test>
			<error>
				<message>Entry XObject in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARoleMapEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32789"/>
			<description>Entry in RoleMap shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in RoleMap is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_5" clause="1" testNumber="32811"/>
			<description>Separation shall not contain entries except ColorSpace, DeviceColorant, Pages</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ColorSpace' &amp;&amp; elem != 'DeviceColorant' &amp;&amp; elem != 'Pages').length == 0</test>
			<error>
				<message>Separation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ColorSpace' &amp;&amp; elem != 'DeviceColorant' &amp;&amp; elem != 'Pages').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32812"/>
			<description>Entry ColorSpace with type Array in Separation shall be one of objects SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in Separation is not one of objects SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32813"/>
			<description>Entry ColorSpace in Separation shall have type Array</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true</test>
			<error>
				<message>Entry ColorSpace in Separation is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32814"/>
			<description>Entry DeviceColorant in Separation shall have one of types: String, Name</description>
			<test>containsDeviceColorant == false || DeviceColorantHasTypeString == true || DeviceColorantHasTypeName == true</test>
			<error>
				<message>Entry DeviceColorant in Separation is not one of types: String, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_5" clause="7" testNumber="32815"/>
			<description>Entry DeviceColorant in Separation is required</description>
			<test>containsDeviceColorant == true</test>
			<error>
				<message>Entry DeviceColorant in Separation is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32816"/>
			<description>Entry Pages with type Array in Separation shall be object ArrayOfPages</description>
			<test>PagesHasTypeArray != true || Pages_size == 1</test>
			<error>
				<message>Entry Pages with type Array in Separation is not object ArrayOfPages</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32817"/>
			<description>Entry Pages in Separation shall have type Array</description>
			<test>containsPages == false || PagesHasTypeArray == true</test>
			<error>
				<message>Entry Pages in Separation is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_5" clause="7" testNumber="32818"/>
			<description>Entry Pages in Separation is required</description>
			<test>containsPages == true</test>
			<error>
				<message>Entry Pages in Separation is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_5" clause="2" testNumber="32875"/>
			<description>SeparationColorSpace shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>SeparationColorSpace contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32876"/>
			<description>Entry 0 in SeparationColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in SeparationColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_5" clause="6" testNumber="32877"/>
			<description>Entry 0 with type Name in SeparationColorSpace shall have value Separation</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Separation"</test>
			<error>
				<message>Entry 0 with type Name in SeparationColorSpace has incorrect value %2 instead of Separation</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32878"/>
			<description>Entry 1 in SeparationColorSpace shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in SeparationColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32879"/>
			<description>Entry 2 with type Array in SeparationColorSpace shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace</description>
			<test>entry2HasTypeArray != true || entry2_size == 1</test>
			<error>
				<message>Entry 2 with type Array in SeparationColorSpace is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32880"/>
			<description>Entry 2 in SeparationColorSpace shall have one of types: Array, Name</description>
			<test>size &lt;= 2 || entry2HasTypeArray == true || entry2HasTypeName == true</test>
			<error>
				<message>Entry 2 in SeparationColorSpace is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_5" clause="6" testNumber="32881"/>
			<description>Entry 2 with type Name in SeparationColorSpace shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>entry2HasTypeName != true || entry2NameValue == "DeviceCMYK" || entry2NameValue == "DeviceRGB" || entry2NameValue == "DeviceGray"</test>
			<error>
				<message>Entry 2 with type Name in SeparationColorSpace has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry2NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32882"/>
			<description>Entry 3 with type Stream in SeparationColorSpace shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry3HasTypeStream != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Stream in SeparationColorSpace is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32883"/>
			<description>Entry 3 with type Dictionary in SeparationColorSpace shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry3HasTypeDictionary != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Dictionary in SeparationColorSpace is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32884"/>
			<description>Entry 3 in SeparationColorSpace shall have one of types: Stream, Dictionary</description>
			<test>size &lt;= 3 || entry3HasTypeStream == true || entry3HasTypeDictionary == true</test>
			<error>
				<message>Entry 3 in SeparationColorSpace is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_5" clause="10" testNumber="32885"/>
			<description>Entry 3 with type Stream in SeparationColorSpace shall be indirect</description>
			<test>entry3HasTypeStream != true || isentry3Indirect == true</test>
			<error>
				<message>Entry 3 with type Stream in SeparationColorSpace is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingMapEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32927"/>
			<description>Entry with type Stream in ShadingMap shall be one of objects ShadingType4, ShadingType5, ShadingType6, ShadingType7</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in ShadingMap is not one of objects ShadingType4, ShadingType5, ShadingType6, ShadingType7</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingMapEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32928"/>
			<description>Entry with type Dictionary in ShadingMap shall be one of objects ShadingType1, ShadingType2, ShadingType3</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ShadingMap is not one of objects ShadingType1, ShadingType2, ShadingType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingMapEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32929"/>
			<description>Entry in ShadingMap shall have one of types: Stream, Dictionary</description>
			<test>HasTypeStream == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ShadingMap is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingMapEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="32930"/>
			<description>Entry with type Stream in ShadingMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in ShadingMap is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="1" testNumber="32985"/>
			<description>ShadingType1 shall not contain entries except AntiAlias, BBox, Background, ColorSpace, Domain, Function, Matrix, ShadingType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'ShadingType').length == 0</test>
			<error>
				<message>ShadingType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'ShadingType').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32986"/>
			<description>Entry AntiAlias in ShadingType1 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType1 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32987"/>
			<description>Entry BBox in ShadingType1 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType1 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32988"/>
			<description>Entry Background with type Array in ShadingType1 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType1 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32989"/>
			<description>Entry Background in ShadingType1 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType1 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32990"/>
			<description>Entry ColorSpace with type Array in ShadingType1 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType1 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32991"/>
			<description>Entry ColorSpace in ShadingType1 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType1 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="32992"/>
			<description>Entry ColorSpace in ShadingType1 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="32993"/>
			<description>Entry ColorSpace with type Name in ShadingType1 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType1 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32994"/>
			<description>Entry Domain with type Array in ShadingType1 shall be object ArrayOf_4Numbers</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in ShadingType1 is not object ArrayOf_4Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32995"/>
			<description>Entry Domain in ShadingType1 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in ShadingType1 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32996"/>
			<description>Entry Function with type Array in ShadingType1 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType1 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32997"/>
			<description>Entry Function with type Stream in ShadingType1 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType1 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="32998"/>
			<description>Entry Function with type Dictionary in ShadingType1 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType1 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="32999"/>
			<description>Entry Function in ShadingType1 shall have one of types: Array, Stream, Dictionary</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeStream == true || FunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry Function in ShadingType1 is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33000"/>
			<description>Entry Function in ShadingType1 is required</description>
			<test>containsFunction == true</test>
			<error>
				<message>Entry Function in ShadingType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="10" testNumber="33001"/>
			<description>Entry Function with type Stream in ShadingType1 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33002"/>
			<description>Entry Matrix in ShadingType1 shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in ShadingType1 is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33003"/>
			<description>Entry ShadingType in ShadingType1 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33004"/>
			<description>Entry ShadingType in ShadingType1 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="33005"/>
			<description>Entry ShadingType with type Integer in ShadingType1 shall have value 1</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 1</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType1 has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="1" testNumber="33119"/>
			<description>ShadingType2 shall not contain entries except AntiAlias, BBox, Background, ColorSpace, Coords, Domain, Extend, Function, ShadingType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Coords' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Extend' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'ShadingType').length == 0</test>
			<error>
				<message>ShadingType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Coords' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Extend' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'ShadingType').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33120"/>
			<description>Entry AntiAlias in ShadingType2 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType2 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33121"/>
			<description>Entry BBox in ShadingType2 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType2 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33122"/>
			<description>Entry Background with type Array in ShadingType2 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType2 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33123"/>
			<description>Entry Background in ShadingType2 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33124"/>
			<description>Entry ColorSpace with type Array in ShadingType2 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType2 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33125"/>
			<description>Entry ColorSpace in ShadingType2 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType2 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33126"/>
			<description>Entry ColorSpace in ShadingType2 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="6" testNumber="33127"/>
			<description>Entry ColorSpace with type Name in ShadingType2 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType2 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33128"/>
			<description>Entry Coords with type Array in ShadingType2 shall be object ArrayOf_4Numbers</description>
			<test>CoordsHasTypeArray != true || Coords_size == 1</test>
			<error>
				<message>Entry Coords with type Array in ShadingType2 is not object ArrayOf_4Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33129"/>
			<description>Entry Coords in ShadingType2 shall have type Array</description>
			<test>containsCoords == false || CoordsHasTypeArray == true</test>
			<error>
				<message>Entry Coords in ShadingType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33130"/>
			<description>Entry Coords in ShadingType2 is required</description>
			<test>containsCoords == true</test>
			<error>
				<message>Entry Coords in ShadingType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33131"/>
			<description>Entry Domain with type Array in ShadingType2 shall be object ArrayOf_2Numbers</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in ShadingType2 is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33132"/>
			<description>Entry Domain in ShadingType2 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in ShadingType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33133"/>
			<description>Entry Extend with type Array in ShadingType2 shall be object ArrayOf_2Booleans</description>
			<test>ExtendHasTypeArray != true || Extend_size == 1</test>
			<error>
				<message>Entry Extend with type Array in ShadingType2 is not object ArrayOf_2Booleans</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33134"/>
			<description>Entry Extend in ShadingType2 shall have type Array</description>
			<test>containsExtend == false || ExtendHasTypeArray == true</test>
			<error>
				<message>Entry Extend in ShadingType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33135"/>
			<description>Entry Function with type Array in ShadingType2 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType2 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33136"/>
			<description>Entry Function with type Stream in ShadingType2 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType2 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33137"/>
			<description>Entry Function with type Dictionary in ShadingType2 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType2 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33138"/>
			<description>Entry Function in ShadingType2 shall have one of types: Array, Stream, Dictionary</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeStream == true || FunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry Function in ShadingType2 is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33139"/>
			<description>Entry Function in ShadingType2 is required</description>
			<test>containsFunction == true</test>
			<error>
				<message>Entry Function in ShadingType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="10" testNumber="33140"/>
			<description>Entry Function with type Stream in ShadingType2 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33141"/>
			<description>Entry ShadingType in ShadingType2 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33142"/>
			<description>Entry ShadingType in ShadingType2 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_5" clause="6" testNumber="33143"/>
			<description>Entry ShadingType with type Integer in ShadingType2 shall have value 2</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 2</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType2 has incorrect value %2 instead of 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="1" testNumber="33269"/>
			<description>ShadingType3 shall not contain entries except AntiAlias, BBox, Background, ColorSpace, Coords, Domain, Extend, Function, ShadingType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Coords' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Extend' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'ShadingType').length == 0</test>
			<error>
				<message>ShadingType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Coords' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Extend' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'ShadingType').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33270"/>
			<description>Entry AntiAlias in ShadingType3 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType3 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33271"/>
			<description>Entry BBox in ShadingType3 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType3 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33272"/>
			<description>Entry Background with type Array in ShadingType3 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType3 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33273"/>
			<description>Entry Background in ShadingType3 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33274"/>
			<description>Entry ColorSpace with type Array in ShadingType3 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType3 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33275"/>
			<description>Entry ColorSpace in ShadingType3 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType3 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33276"/>
			<description>Entry ColorSpace in ShadingType3 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="6" testNumber="33277"/>
			<description>Entry ColorSpace with type Name in ShadingType3 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType3 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33278"/>
			<description>Entry Coords with type Array in ShadingType3 shall be object ArrayOf_6Numbers</description>
			<test>CoordsHasTypeArray != true || Coords_size == 1</test>
			<error>
				<message>Entry Coords with type Array in ShadingType3 is not object ArrayOf_6Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33279"/>
			<description>Entry Coords in ShadingType3 shall have type Array</description>
			<test>containsCoords == false || CoordsHasTypeArray == true</test>
			<error>
				<message>Entry Coords in ShadingType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33280"/>
			<description>Entry Coords in ShadingType3 is required</description>
			<test>containsCoords == true</test>
			<error>
				<message>Entry Coords in ShadingType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33281"/>
			<description>Entry Domain with type Array in ShadingType3 shall be object ArrayOf_2Numbers</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in ShadingType3 is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33282"/>
			<description>Entry Domain in ShadingType3 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in ShadingType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33283"/>
			<description>Entry Extend with type Array in ShadingType3 shall be object ArrayOf_2Booleans</description>
			<test>ExtendHasTypeArray != true || Extend_size == 1</test>
			<error>
				<message>Entry Extend with type Array in ShadingType3 is not object ArrayOf_2Booleans</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33284"/>
			<description>Entry Extend in ShadingType3 shall have type Array</description>
			<test>containsExtend == false || ExtendHasTypeArray == true</test>
			<error>
				<message>Entry Extend in ShadingType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33285"/>
			<description>Entry Function with type Array in ShadingType3 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType3 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33286"/>
			<description>Entry Function with type Stream in ShadingType3 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType3 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33287"/>
			<description>Entry Function with type Dictionary in ShadingType3 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType3 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33288"/>
			<description>Entry Function in ShadingType3 shall have one of types: Array, Stream, Dictionary</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeStream == true || FunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry Function in ShadingType3 is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33289"/>
			<description>Entry Function in ShadingType3 is required</description>
			<test>containsFunction == true</test>
			<error>
				<message>Entry Function in ShadingType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="10" testNumber="33290"/>
			<description>Entry Function with type Stream in ShadingType3 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType3 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33291"/>
			<description>Entry ShadingType in ShadingType3 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33292"/>
			<description>Entry ShadingType in ShadingType3 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_5" clause="6" testNumber="33293"/>
			<description>Entry ShadingType with type Integer in ShadingType3 shall have value 3</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 3</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType3 has incorrect value %2 instead of 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="1" testNumber="33465"/>
			<description>ShadingType4 shall not contain entries except AntiAlias, BBox, Background, BitsPerComponent, BitsPerCoordinate, BitsPerFlag, ColorSpace, DL, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Function, Length, ShadingType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType').length == 0</test>
			<error>
				<message>ShadingType4 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33466"/>
			<description>Entry AntiAlias in ShadingType4 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType4 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33467"/>
			<description>Entry BBox in ShadingType4 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType4 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33468"/>
			<description>Entry Background with type Array in ShadingType4 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType4 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33469"/>
			<description>Entry Background in ShadingType4 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType4 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33470"/>
			<description>Entry BitsPerComponent in ShadingType4 shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33471"/>
			<description>Entry BitsPerComponent in ShadingType4 is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="6" testNumber="33472"/>
			<description>Entry BitsPerComponent with type Integer in ShadingType4 shall have one of values: 1, 12, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 12 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in ShadingType4 has incorrect value %2 instead of 1, 12, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33473"/>
			<description>Entry BitsPerCoordinate in ShadingType4 shall have type Integer</description>
			<test>containsBitsPerCoordinate == false || BitsPerCoordinateHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33474"/>
			<description>Entry BitsPerCoordinate in ShadingType4 is required</description>
			<test>containsBitsPerCoordinate == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="6" testNumber="33475"/>
			<description>Entry BitsPerCoordinate with type Integer in ShadingType4 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerCoordinateHasTypeInteger != true || BitsPerCoordinateIntegerValue == 1 || BitsPerCoordinateIntegerValue == 2 || BitsPerCoordinateIntegerValue == 4 || BitsPerCoordinateIntegerValue == 8 || BitsPerCoordinateIntegerValue == 12 || BitsPerCoordinateIntegerValue == 16 || BitsPerCoordinateIntegerValue == 24 || BitsPerCoordinateIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerCoordinate with type Integer in ShadingType4 has incorrect value %2 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerCoordinateIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33476"/>
			<description>Entry BitsPerFlag in ShadingType4 shall have type Integer</description>
			<test>containsBitsPerFlag == false || BitsPerFlagHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33477"/>
			<description>Entry BitsPerFlag in ShadingType4 is required</description>
			<test>containsBitsPerFlag == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="6" testNumber="33478"/>
			<description>Entry BitsPerFlag with type Integer in ShadingType4 shall have one of values: 2, 4, 8</description>
			<test>BitsPerFlagHasTypeInteger != true || BitsPerFlagIntegerValue == 2 || BitsPerFlagIntegerValue == 4 || BitsPerFlagIntegerValue == 8</test>
			<error>
				<message>Entry BitsPerFlag with type Integer in ShadingType4 has incorrect value %2 instead of 2, 4, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerFlagIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33479"/>
			<description>Entry ColorSpace with type Array in ShadingType4 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType4 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33480"/>
			<description>Entry ColorSpace in ShadingType4 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType4 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33481"/>
			<description>Entry ColorSpace in ShadingType4 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="6" testNumber="33482"/>
			<description>Entry ColorSpace with type Name in ShadingType4 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType4 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33483"/>
			<description>Entry DL in ShadingType4 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in ShadingType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="9" testNumber="33484"/>
			<description>Entry DL with type Integer in ShadingType4 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in ShadingType4 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33485"/>
			<description>Entry Decode with type Array in ShadingType4 shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in ShadingType4 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33486"/>
			<description>Entry Decode in ShadingType4 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in ShadingType4 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33487"/>
			<description>Entry DecodeParms with type Array in ShadingType4 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType4 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33488"/>
			<description>Entry DecodeParms with type Dictionary in ShadingType4 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ShadingType4 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33489"/>
			<description>Entry DecodeParms in ShadingType4 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ShadingType4 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="9" testNumber="33490"/>
			<description>Entry DecodeParms with type Array in ShadingType4 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType4 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33491"/>
			<description>Entry F with type Dictionary in ShadingType4 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ShadingType4 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33492"/>
			<description>Entry F in ShadingType4 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ShadingType4 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33493"/>
			<description>Entry FDecodeParms with type Array in ShadingType4 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType4 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33494"/>
			<description>Entry FDecodeParms with type Dictionary in ShadingType4 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ShadingType4 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33495"/>
			<description>Entry FDecodeParms in ShadingType4 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ShadingType4 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="9" testNumber="33496"/>
			<description>Entry FDecodeParms with type Array in ShadingType4 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType4 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33497"/>
			<description>Entry FFilter with type Array in ShadingType4 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType4 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33498"/>
			<description>Entry FFilter in ShadingType4 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in ShadingType4 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="9" testNumber="33499"/>
			<description>Entry FFilter with type Array in ShadingType4 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType4 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="6" testNumber="33500"/>
			<description>Entry FFilter with type Name in ShadingType4 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in ShadingType4 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33501"/>
			<description>Entry Filter with type Array in ShadingType4 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in ShadingType4 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33502"/>
			<description>Entry Filter in ShadingType4 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in ShadingType4 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="9" testNumber="33503"/>
			<description>Entry Filter with type Array in ShadingType4 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ShadingType4 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="6" testNumber="33504"/>
			<description>Entry Filter with type Name in ShadingType4 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in ShadingType4 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33505"/>
			<description>Entry Function with type Array in ShadingType4 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType4 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33506"/>
			<description>Entry Function with type Stream in ShadingType4 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType4 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33507"/>
			<description>Entry Function with type Dictionary in ShadingType4 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType4 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33508"/>
			<description>Entry Function in ShadingType4 shall have one of types: Array, Stream, Dictionary</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeStream == true || FunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry Function in ShadingType4 is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="10" testNumber="33509"/>
			<description>Entry Function with type Stream in ShadingType4 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType4 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33510"/>
			<description>Entry Length in ShadingType4 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ShadingType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33511"/>
			<description>Entry Length in ShadingType4 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ShadingType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33512"/>
			<description>Entry ShadingType in ShadingType4 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33513"/>
			<description>Entry ShadingType in ShadingType4 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_5" clause="6" testNumber="33514"/>
			<description>Entry ShadingType with type Integer in ShadingType4 shall have value 4</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 4</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType4 has incorrect value %2 instead of 4</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="1" testNumber="33761"/>
			<description>ShadingType5 shall not contain entries except AntiAlias, BBox, Background, BitsPerComponent, BitsPerCoordinate, ColorSpace, DL, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Function, Length, ShadingType, VerticesPerRow</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType' &amp;&amp; elem != 'VerticesPerRow').length == 0</test>
			<error>
				<message>ShadingType5 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType' &amp;&amp; elem != 'VerticesPerRow').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33762"/>
			<description>Entry AntiAlias in ShadingType5 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType5 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33763"/>
			<description>Entry BBox in ShadingType5 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType5 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33764"/>
			<description>Entry Background with type Array in ShadingType5 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType5 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33765"/>
			<description>Entry Background in ShadingType5 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType5 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33766"/>
			<description>Entry BitsPerComponent in ShadingType5 shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33767"/>
			<description>Entry BitsPerComponent in ShadingType5 is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="6" testNumber="33768"/>
			<description>Entry BitsPerComponent with type Integer in ShadingType5 shall have one of values: 1, 12, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 12 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in ShadingType5 has incorrect value %2 instead of 1, 12, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33769"/>
			<description>Entry BitsPerCoordinate in ShadingType5 shall have type Integer</description>
			<test>containsBitsPerCoordinate == false || BitsPerCoordinateHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33770"/>
			<description>Entry BitsPerCoordinate in ShadingType5 is required</description>
			<test>containsBitsPerCoordinate == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="6" testNumber="33771"/>
			<description>Entry BitsPerCoordinate with type Integer in ShadingType5 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerCoordinateHasTypeInteger != true || BitsPerCoordinateIntegerValue == 1 || BitsPerCoordinateIntegerValue == 2 || BitsPerCoordinateIntegerValue == 4 || BitsPerCoordinateIntegerValue == 8 || BitsPerCoordinateIntegerValue == 12 || BitsPerCoordinateIntegerValue == 16 || BitsPerCoordinateIntegerValue == 24 || BitsPerCoordinateIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerCoordinate with type Integer in ShadingType5 has incorrect value %2 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerCoordinateIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33772"/>
			<description>Entry ColorSpace with type Array in ShadingType5 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType5 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33773"/>
			<description>Entry ColorSpace in ShadingType5 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType5 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33774"/>
			<description>Entry ColorSpace in ShadingType5 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="6" testNumber="33775"/>
			<description>Entry ColorSpace with type Name in ShadingType5 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType5 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33776"/>
			<description>Entry DL in ShadingType5 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in ShadingType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="9" testNumber="33777"/>
			<description>Entry DL with type Integer in ShadingType5 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in ShadingType5 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33778"/>
			<description>Entry Decode with type Array in ShadingType5 shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in ShadingType5 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33779"/>
			<description>Entry Decode in ShadingType5 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in ShadingType5 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33780"/>
			<description>Entry DecodeParms with type Array in ShadingType5 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType5 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33781"/>
			<description>Entry DecodeParms with type Dictionary in ShadingType5 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ShadingType5 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33782"/>
			<description>Entry DecodeParms in ShadingType5 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ShadingType5 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="9" testNumber="33783"/>
			<description>Entry DecodeParms with type Array in ShadingType5 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType5 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33784"/>
			<description>Entry F with type Dictionary in ShadingType5 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ShadingType5 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33785"/>
			<description>Entry F in ShadingType5 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ShadingType5 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33786"/>
			<description>Entry FDecodeParms with type Array in ShadingType5 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType5 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33787"/>
			<description>Entry FDecodeParms with type Dictionary in ShadingType5 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ShadingType5 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33788"/>
			<description>Entry FDecodeParms in ShadingType5 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ShadingType5 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="9" testNumber="33789"/>
			<description>Entry FDecodeParms with type Array in ShadingType5 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType5 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33790"/>
			<description>Entry FFilter with type Array in ShadingType5 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType5 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33791"/>
			<description>Entry FFilter in ShadingType5 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in ShadingType5 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="9" testNumber="33792"/>
			<description>Entry FFilter with type Array in ShadingType5 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType5 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="6" testNumber="33793"/>
			<description>Entry FFilter with type Name in ShadingType5 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in ShadingType5 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33794"/>
			<description>Entry Filter with type Array in ShadingType5 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in ShadingType5 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33795"/>
			<description>Entry Filter in ShadingType5 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in ShadingType5 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="9" testNumber="33796"/>
			<description>Entry Filter with type Array in ShadingType5 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ShadingType5 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="6" testNumber="33797"/>
			<description>Entry Filter with type Name in ShadingType5 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in ShadingType5 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33798"/>
			<description>Entry Function with type Array in ShadingType5 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType5 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33799"/>
			<description>Entry Function with type Stream in ShadingType5 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType5 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="17" testNumber="33800"/>
			<description>Entry Function with type Dictionary in ShadingType5 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType5 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33801"/>
			<description>Entry Function in ShadingType5 shall have one of types: Array, Stream, Dictionary</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeStream == true || FunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry Function in ShadingType5 is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="10" testNumber="33802"/>
			<description>Entry Function with type Stream in ShadingType5 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType5 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33803"/>
			<description>Entry Length in ShadingType5 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ShadingType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33804"/>
			<description>Entry Length in ShadingType5 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ShadingType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33805"/>
			<description>Entry ShadingType in ShadingType5 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33806"/>
			<description>Entry ShadingType in ShadingType5 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="6" testNumber="33807"/>
			<description>Entry ShadingType with type Integer in ShadingType5 shall have value 5</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 5</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType5 has incorrect value %2 instead of 5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="8" testNumber="33808"/>
			<description>Entry VerticesPerRow in ShadingType5 shall have type Integer</description>
			<test>containsVerticesPerRow == false || VerticesPerRowHasTypeInteger == true</test>
			<error>
				<message>Entry VerticesPerRow in ShadingType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="7" testNumber="33809"/>
			<description>Entry VerticesPerRow in ShadingType5 is required</description>
			<test>containsVerticesPerRow == true</test>
			<error>
				<message>Entry VerticesPerRow in ShadingType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_5" clause="14" testNumber="33810"/>
			<description>Entry VerticesPerRow with type Integer in ShadingType5 shall satisfy possible value predicate: fn:Eval(@VerticesPerRow &gt;= 2)</description>
			<test>VerticesPerRowHasTypeInteger != true || VerticesPerRowIntegerValue &gt;= 2</test>
			<error>
				<message>Entry VerticesPerRow with type Integer in ShadingType5 does not satisfy possible value predicate: fn:Eval(@VerticesPerRow &gt;= 2)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="1" testNumber="34055"/>
			<description>ShadingType6 shall not contain entries except AntiAlias, BBox, Background, BitsPerComponent, BitsPerCoordinate, BitsPerFlag, ColorSpace, DL, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Function, Length, ShadingType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType').length == 0</test>
			<error>
				<message>ShadingType6 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34056"/>
			<description>Entry AntiAlias in ShadingType6 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType6 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34057"/>
			<description>Entry BBox in ShadingType6 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType6 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34058"/>
			<description>Entry Background with type Array in ShadingType6 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType6 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34059"/>
			<description>Entry Background in ShadingType6 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType6 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34060"/>
			<description>Entry BitsPerComponent in ShadingType6 shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="7" testNumber="34061"/>
			<description>Entry BitsPerComponent in ShadingType6 is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="6" testNumber="34062"/>
			<description>Entry BitsPerComponent with type Integer in ShadingType6 shall have one of values: 1, 12, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 12 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in ShadingType6 has incorrect value %2 instead of 1, 12, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34063"/>
			<description>Entry BitsPerCoordinate in ShadingType6 shall have type Integer</description>
			<test>containsBitsPerCoordinate == false || BitsPerCoordinateHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="7" testNumber="34064"/>
			<description>Entry BitsPerCoordinate in ShadingType6 is required</description>
			<test>containsBitsPerCoordinate == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="6" testNumber="34065"/>
			<description>Entry BitsPerCoordinate with type Integer in ShadingType6 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerCoordinateHasTypeInteger != true || BitsPerCoordinateIntegerValue == 1 || BitsPerCoordinateIntegerValue == 2 || BitsPerCoordinateIntegerValue == 4 || BitsPerCoordinateIntegerValue == 8 || BitsPerCoordinateIntegerValue == 12 || BitsPerCoordinateIntegerValue == 16 || BitsPerCoordinateIntegerValue == 24 || BitsPerCoordinateIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerCoordinate with type Integer in ShadingType6 has incorrect value %2 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerCoordinateIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34066"/>
			<description>Entry BitsPerFlag in ShadingType6 shall have type Integer</description>
			<test>containsBitsPerFlag == false || BitsPerFlagHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="7" testNumber="34067"/>
			<description>Entry BitsPerFlag in ShadingType6 is required</description>
			<test>containsBitsPerFlag == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34068"/>
			<description>Entry ColorSpace with type Array in ShadingType6 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType6 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34069"/>
			<description>Entry ColorSpace in ShadingType6 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType6 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="7" testNumber="34070"/>
			<description>Entry ColorSpace in ShadingType6 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="6" testNumber="34071"/>
			<description>Entry ColorSpace with type Name in ShadingType6 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType6 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34072"/>
			<description>Entry DL in ShadingType6 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in ShadingType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="9" testNumber="34073"/>
			<description>Entry DL with type Integer in ShadingType6 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in ShadingType6 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34074"/>
			<description>Entry Decode with type Array in ShadingType6 shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in ShadingType6 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34075"/>
			<description>Entry Decode in ShadingType6 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in ShadingType6 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34076"/>
			<description>Entry DecodeParms with type Array in ShadingType6 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType6 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34077"/>
			<description>Entry DecodeParms with type Dictionary in ShadingType6 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ShadingType6 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34078"/>
			<description>Entry DecodeParms in ShadingType6 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ShadingType6 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="9" testNumber="34079"/>
			<description>Entry DecodeParms with type Array in ShadingType6 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType6 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34080"/>
			<description>Entry F with type Dictionary in ShadingType6 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ShadingType6 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34081"/>
			<description>Entry F in ShadingType6 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ShadingType6 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34082"/>
			<description>Entry FDecodeParms with type Array in ShadingType6 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType6 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34083"/>
			<description>Entry FDecodeParms with type Dictionary in ShadingType6 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ShadingType6 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34084"/>
			<description>Entry FDecodeParms in ShadingType6 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ShadingType6 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="9" testNumber="34085"/>
			<description>Entry FDecodeParms with type Array in ShadingType6 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType6 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34086"/>
			<description>Entry FFilter with type Array in ShadingType6 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType6 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34087"/>
			<description>Entry FFilter in ShadingType6 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in ShadingType6 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="9" testNumber="34088"/>
			<description>Entry FFilter with type Array in ShadingType6 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType6 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="6" testNumber="34089"/>
			<description>Entry FFilter with type Name in ShadingType6 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in ShadingType6 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34090"/>
			<description>Entry Filter with type Array in ShadingType6 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in ShadingType6 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34091"/>
			<description>Entry Filter in ShadingType6 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in ShadingType6 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="9" testNumber="34092"/>
			<description>Entry Filter with type Array in ShadingType6 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ShadingType6 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="6" testNumber="34093"/>
			<description>Entry Filter with type Name in ShadingType6 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in ShadingType6 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34094"/>
			<description>Entry Function with type Array in ShadingType6 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType6 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34095"/>
			<description>Entry Function with type Stream in ShadingType6 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType6 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34096"/>
			<description>Entry Function with type Dictionary in ShadingType6 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType6 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34097"/>
			<description>Entry Function in ShadingType6 shall have one of types: Array, Stream, Dictionary</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeStream == true || FunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry Function in ShadingType6 is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="10" testNumber="34098"/>
			<description>Entry Function with type Stream in ShadingType6 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType6 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34099"/>
			<description>Entry Length in ShadingType6 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ShadingType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="7" testNumber="34100"/>
			<description>Entry Length in ShadingType6 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ShadingType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34101"/>
			<description>Entry ShadingType in ShadingType6 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="7" testNumber="34102"/>
			<description>Entry ShadingType in ShadingType6 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_5" clause="6" testNumber="34103"/>
			<description>Entry ShadingType with type Integer in ShadingType6 shall have value 6</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 6</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType6 has incorrect value %2 instead of 6</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="1" testNumber="34345"/>
			<description>ShadingType7 shall not contain entries except AntiAlias, BBox, Background, BitsPerComponent, BitsPerCoordinate, BitsPerFlag, ColorSpace, DL, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Function, Length, ShadingType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType').length == 0</test>
			<error>
				<message>ShadingType7 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34346"/>
			<description>Entry AntiAlias in ShadingType7 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType7 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34347"/>
			<description>Entry BBox in ShadingType7 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType7 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34348"/>
			<description>Entry Background with type Array in ShadingType7 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType7 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34349"/>
			<description>Entry Background in ShadingType7 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType7 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34350"/>
			<description>Entry BitsPerComponent in ShadingType7 shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType7 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="7" testNumber="34351"/>
			<description>Entry BitsPerComponent in ShadingType7 is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType7 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="6" testNumber="34352"/>
			<description>Entry BitsPerComponent with type Integer in ShadingType7 shall have one of values: 1, 12, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 12 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in ShadingType7 has incorrect value %2 instead of 1, 12, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34353"/>
			<description>Entry BitsPerCoordinate in ShadingType7 shall have type Integer</description>
			<test>containsBitsPerCoordinate == false || BitsPerCoordinateHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType7 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="7" testNumber="34354"/>
			<description>Entry BitsPerCoordinate in ShadingType7 is required</description>
			<test>containsBitsPerCoordinate == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType7 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="6" testNumber="34355"/>
			<description>Entry BitsPerCoordinate with type Integer in ShadingType7 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerCoordinateHasTypeInteger != true || BitsPerCoordinateIntegerValue == 1 || BitsPerCoordinateIntegerValue == 2 || BitsPerCoordinateIntegerValue == 4 || BitsPerCoordinateIntegerValue == 8 || BitsPerCoordinateIntegerValue == 12 || BitsPerCoordinateIntegerValue == 16 || BitsPerCoordinateIntegerValue == 24 || BitsPerCoordinateIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerCoordinate with type Integer in ShadingType7 has incorrect value %2 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerCoordinateIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34356"/>
			<description>Entry BitsPerFlag in ShadingType7 shall have type Integer</description>
			<test>containsBitsPerFlag == false || BitsPerFlagHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType7 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="7" testNumber="34357"/>
			<description>Entry BitsPerFlag in ShadingType7 is required</description>
			<test>containsBitsPerFlag == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType7 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34358"/>
			<description>Entry ColorSpace with type Array in ShadingType7 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType7 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34359"/>
			<description>Entry ColorSpace in ShadingType7 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType7 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="7" testNumber="34360"/>
			<description>Entry ColorSpace in ShadingType7 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType7 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="6" testNumber="34361"/>
			<description>Entry ColorSpace with type Name in ShadingType7 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType7 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34362"/>
			<description>Entry DL in ShadingType7 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in ShadingType7 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="9" testNumber="34363"/>
			<description>Entry DL with type Integer in ShadingType7 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in ShadingType7 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34364"/>
			<description>Entry Decode with type Array in ShadingType7 shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in ShadingType7 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34365"/>
			<description>Entry Decode in ShadingType7 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in ShadingType7 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34366"/>
			<description>Entry DecodeParms with type Array in ShadingType7 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType7 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34367"/>
			<description>Entry DecodeParms with type Dictionary in ShadingType7 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ShadingType7 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34368"/>
			<description>Entry DecodeParms in ShadingType7 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ShadingType7 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="9" testNumber="34369"/>
			<description>Entry DecodeParms with type Array in ShadingType7 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType7 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34370"/>
			<description>Entry F with type Dictionary in ShadingType7 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ShadingType7 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34371"/>
			<description>Entry F in ShadingType7 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ShadingType7 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34372"/>
			<description>Entry FDecodeParms with type Array in ShadingType7 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType7 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34373"/>
			<description>Entry FDecodeParms with type Dictionary in ShadingType7 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ShadingType7 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34374"/>
			<description>Entry FDecodeParms in ShadingType7 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ShadingType7 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="9" testNumber="34375"/>
			<description>Entry FDecodeParms with type Array in ShadingType7 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType7 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34376"/>
			<description>Entry FFilter with type Array in ShadingType7 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType7 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34377"/>
			<description>Entry FFilter in ShadingType7 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in ShadingType7 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="9" testNumber="34378"/>
			<description>Entry FFilter with type Array in ShadingType7 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType7 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="6" testNumber="34379"/>
			<description>Entry FFilter with type Name in ShadingType7 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in ShadingType7 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34380"/>
			<description>Entry Filter with type Array in ShadingType7 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in ShadingType7 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34381"/>
			<description>Entry Filter in ShadingType7 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in ShadingType7 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="9" testNumber="34382"/>
			<description>Entry Filter with type Array in ShadingType7 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ShadingType7 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="6" testNumber="34383"/>
			<description>Entry Filter with type Name in ShadingType7 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in ShadingType7 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34384"/>
			<description>Entry Function with type Array in ShadingType7 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType7 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34385"/>
			<description>Entry Function with type Stream in ShadingType7 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType7 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34386"/>
			<description>Entry Function with type Dictionary in ShadingType7 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType7 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34387"/>
			<description>Entry Function in ShadingType7 shall have one of types: Array, Stream, Dictionary</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeStream == true || FunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry Function in ShadingType7 is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="10" testNumber="34388"/>
			<description>Entry Function with type Stream in ShadingType7 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType7 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34389"/>
			<description>Entry Length in ShadingType7 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ShadingType7 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="7" testNumber="34390"/>
			<description>Entry Length in ShadingType7 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ShadingType7 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34391"/>
			<description>Entry ShadingType in ShadingType7 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType7 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="7" testNumber="34392"/>
			<description>Entry ShadingType in ShadingType7 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType7 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_5" clause="6" testNumber="34393"/>
			<description>Entry ShadingType with type Integer in ShadingType7 shall have value 7</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 7</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType7 has incorrect value %2 instead of 7</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_5" clause="1" testNumber="34541"/>
			<description>SigFieldLock shall not contain entries except Action, Fields, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Action' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>SigFieldLock contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Action' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34542"/>
			<description>Entry Action in SigFieldLock shall have type Name</description>
			<test>containsAction == false || ActionHasTypeName == true</test>
			<error>
				<message>Entry Action in SigFieldLock is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_5" clause="7" testNumber="34543"/>
			<description>Entry Action in SigFieldLock is required</description>
			<test>containsAction == true</test>
			<error>
				<message>Entry Action in SigFieldLock is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_5" clause="6" testNumber="34544"/>
			<description>Entry Action with type Name in SigFieldLock shall have one of values: All, Exclude, Include</description>
			<test>ActionHasTypeName != true || ActionNameValue == "All" || ActionNameValue == "Include" || ActionNameValue == "Exclude"</test>
			<error>
				<message>Entry Action with type Name in SigFieldLock has incorrect value %2 instead of All, Exclude, Include</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ActionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34545"/>
			<description>Entry Fields with type Array in SigFieldLock shall be object ArrayOfStringsText</description>
			<test>FieldsHasTypeArray != true || Fields_size == 1</test>
			<error>
				<message>Entry Fields with type Array in SigFieldLock is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34546"/>
			<description>Entry Fields in SigFieldLock shall have type Array</description>
			<test>containsFields == false || FieldsHasTypeArray == true</test>
			<error>
				<message>Entry Fields in SigFieldLock is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_5" clause="11" testNumber="34547"/>
			<description>Entry Fields in SigFieldLock is required, when fn:IsRequired((@Action == Include) || (@Action == Exclude))</description>
			<test>(containsFields == true || ((ActionNameValue == "Include") || (ActionNameValue == "Exclude")) == false)</test>
			<error>
				<message>Entry Fields in SigFieldLock is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34548"/>
			<description>Entry Type in SigFieldLock shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SigFieldLock is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_5" clause="6" testNumber="34549"/>
			<description>Entry Type with type Name in SigFieldLock shall have value SigFieldLock</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SigFieldLock"</test>
			<error>
				<message>Entry Type with type Name in SigFieldLock has incorrect value %2 instead of SigFieldLock</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_5" clause="1" testNumber="34581"/>
			<description>SigFieldSeedValue shall not contain entries except Cert, Filter, Reasons, SubFilter, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Cert' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Reasons' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>SigFieldSeedValue contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Cert' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Reasons' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34582"/>
			<description>Entry Cert with type Dictionary in SigFieldSeedValue shall be object CertSeedValue</description>
			<test>CertHasTypeDictionary != true || Cert_size == 1</test>
			<error>
				<message>Entry Cert with type Dictionary in SigFieldSeedValue is not object CertSeedValue</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34583"/>
			<description>Entry Cert in SigFieldSeedValue shall have type Dictionary</description>
			<test>containsCert == false || CertHasTypeDictionary == true</test>
			<error>
				<message>Entry Cert in SigFieldSeedValue is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34584"/>
			<description>Entry Filter in SigFieldSeedValue shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in SigFieldSeedValue is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34585"/>
			<description>Entry Reasons with type Array in SigFieldSeedValue shall be object ArrayOfStringsText</description>
			<test>ReasonsHasTypeArray != true || Reasons_size == 1</test>
			<error>
				<message>Entry Reasons with type Array in SigFieldSeedValue is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34586"/>
			<description>Entry Reasons in SigFieldSeedValue shall have type Array</description>
			<test>containsReasons == false || ReasonsHasTypeArray == true</test>
			<error>
				<message>Entry Reasons in SigFieldSeedValue is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34587"/>
			<description>Entry SubFilter with type Array in SigFieldSeedValue shall be object ArrayOfSignatureSubFilterNames</description>
			<test>SubFilterHasTypeArray != true || SubFilter_size == 1</test>
			<error>
				<message>Entry SubFilter with type Array in SigFieldSeedValue is not object ArrayOfSignatureSubFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34588"/>
			<description>Entry SubFilter in SigFieldSeedValue shall have type Array</description>
			<test>containsSubFilter == false || SubFilterHasTypeArray == true</test>
			<error>
				<message>Entry SubFilter in SigFieldSeedValue is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34589"/>
			<description>Entry Type in SigFieldSeedValue shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SigFieldSeedValue is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_5" clause="6" testNumber="34590"/>
			<description>Entry Type with type Name in SigFieldSeedValue shall have value SV</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SV"</test>
			<error>
				<message>Entry Type with type Name in SigFieldSeedValue has incorrect value %2 instead of SV</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34591"/>
			<description>Entry V in SigFieldSeedValue shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in SigFieldSeedValue is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_5" clause="6" testNumber="34592"/>
			<description>Entry V with type Integer in SigFieldSeedValue shall have one of values: 0, 1, 2, 3</description>
			<test>VHasTypeInteger != true || VIntegerValue == 0 || VIntegerValue == 1 || VIntegerValue == 2 || VIntegerValue == 3</test>
			<error>
				<message>Entry V with type Integer in SigFieldSeedValue has incorrect value %2 instead of 0, 1, 2, 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="1" testNumber="34709"/>
			<description>Signature shall not contain entries except ByteRange, Cert, Changes, ContactInfo, Contents, Filter, Location, M, Name, Prop_AuthTime, Prop_AuthType, Prop_Build, R, Reason, Reference, SubFilter, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ByteRange' &amp;&amp; elem != 'Cert' &amp;&amp; elem != 'Changes' &amp;&amp; elem != 'ContactInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Location' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Prop_AuthTime' &amp;&amp; elem != 'Prop_AuthType' &amp;&amp; elem != 'Prop_Build' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Reason' &amp;&amp; elem != 'Reference' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>Signature contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ByteRange' &amp;&amp; elem != 'Cert' &amp;&amp; elem != 'Changes' &amp;&amp; elem != 'ContactInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Location' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Prop_AuthTime' &amp;&amp; elem != 'Prop_AuthType' &amp;&amp; elem != 'Prop_Build' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Reason' &amp;&amp; elem != 'Reference' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34710"/>
			<description>Entry ByteRange with type Array in Signature shall be object ArrayOfIntegersGeneral</description>
			<test>ByteRangeHasTypeArray != true || ByteRange_size == 1</test>
			<error>
				<message>Entry ByteRange with type Array in Signature is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34711"/>
			<description>Entry ByteRange in Signature shall have type Array</description>
			<test>containsByteRange == false || ByteRangeHasTypeArray == true</test>
			<error>
				<message>Entry ByteRange in Signature is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34712"/>
			<description>Entry Cert with type Array in Signature shall be object ArrayOfStringsByte</description>
			<test>CertHasTypeArray != true || Cert_size == 1</test>
			<error>
				<message>Entry Cert with type Array in Signature is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34713"/>
			<description>Entry Cert in Signature shall have one of types: Array, StringByte</description>
			<test>containsCert == false || CertHasTypeArray == true || CertHasTypeStringByte == true</test>
			<error>
				<message>Entry Cert in Signature is not one of types: Array, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="11" testNumber="34714"/>
			<description>Entry Cert in Signature is required, when fn:IsRequired(@SubFilter == adbe.x509.rsa_sha1)</description>
			<test>(containsCert == true || (SubFilterNameValue == "adbe.x509.rsa_sha1") == false)</test>
			<error>
				<message>Entry Cert in Signature is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34715"/>
			<description>Entry Changes with type Array in Signature shall be object ArrayOf_3Integers</description>
			<test>ChangesHasTypeArray != true || Changes_size == 1</test>
			<error>
				<message>Entry Changes with type Array in Signature is not object ArrayOf_3Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34716"/>
			<description>Entry Changes in Signature shall have type Array</description>
			<test>containsChanges == false || ChangesHasTypeArray == true</test>
			<error>
				<message>Entry Changes in Signature is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34717"/>
			<description>Entry ContactInfo in Signature shall have type StringText</description>
			<test>containsContactInfo == false || ContactInfoHasTypeStringText == true</test>
			<error>
				<message>Entry ContactInfo in Signature is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34718"/>
			<description>Entry Contents in Signature shall have type StringByte</description>
			<test>containsContents == false || ContentsHasTypeStringByte == true</test>
			<error>
				<message>Entry Contents in Signature is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="7" testNumber="34719"/>
			<description>Entry Contents in Signature is required</description>
			<test>containsContents == true</test>
			<error>
				<message>Entry Contents in Signature is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34720"/>
			<description>Entry Filter in Signature shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in Signature is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="7" testNumber="34721"/>
			<description>Entry Filter in Signature is required</description>
			<test>containsFilter == true</test>
			<error>
				<message>Entry Filter in Signature is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="6" testNumber="34722"/>
			<description>Entry Filter with type Name in Signature shall have one of values: VeriSign.PPKVS, CICI.SignIt, Entrust.PPKEF, Adobe.PPKLite</description>
			<test>FilterHasTypeName != true || FilterNameValue == "Adobe.PPKLite" || FilterNameValue == "Entrust.PPKEF" || FilterNameValue == "CICI.SignIt" || FilterNameValue == "VeriSign.PPKVS"</test>
			<error>
				<message>Entry Filter with type Name in Signature has incorrect value %2 instead of VeriSign.PPKVS, CICI.SignIt, Entrust.PPKEF, Adobe.PPKLite</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34723"/>
			<description>Entry Location in Signature shall have type StringText</description>
			<test>containsLocation == false || LocationHasTypeStringText == true</test>
			<error>
				<message>Entry Location in Signature is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34724"/>
			<description>Entry M in Signature shall have type Date</description>
			<test>containsM == false || MHasTypeDate == true</test>
			<error>
				<message>Entry M in Signature is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34725"/>
			<description>Entry Name in Signature shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in Signature is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34726"/>
			<description>Entry Prop_AuthTime in Signature shall have type Integer</description>
			<test>containsProp_AuthTime == false || Prop_AuthTimeHasTypeInteger == true</test>
			<error>
				<message>Entry Prop_AuthTime in Signature is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="14" testNumber="34727"/>
			<description>Entry Prop_AuthTime with type Integer in Signature shall satisfy possible value predicate: fn:Eval(@Prop_AuthTime &gt;= 0)</description>
			<test>Prop_AuthTimeHasTypeInteger != true || Prop_AuthTimeIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Prop_AuthTime with type Integer in Signature does not satisfy possible value predicate: fn:Eval(@Prop_AuthTime &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34728"/>
			<description>Entry Prop_AuthType in Signature shall have type Name</description>
			<test>containsProp_AuthType == false || Prop_AuthTypeHasTypeName == true</test>
			<error>
				<message>Entry Prop_AuthType in Signature is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34729"/>
			<description>Entry Prop_Build with type Dictionary in Signature shall be object _UniversalDictionary</description>
			<test>Prop_BuildHasTypeDictionary != true || Prop_Build_size == 1</test>
			<error>
				<message>Entry Prop_Build with type Dictionary in Signature is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34730"/>
			<description>Entry Prop_Build in Signature shall have type Dictionary</description>
			<test>containsProp_Build == false || Prop_BuildHasTypeDictionary == true</test>
			<error>
				<message>Entry Prop_Build in Signature is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34731"/>
			<description>Entry R in Signature shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in Signature is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34732"/>
			<description>Entry Reason in Signature shall have type StringText</description>
			<test>containsReason == false || ReasonHasTypeStringText == true</test>
			<error>
				<message>Entry Reason in Signature is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34733"/>
			<description>Entry Reference with type Array in Signature shall be object ArrayOfSignatureReferences</description>
			<test>ReferenceHasTypeArray != true || Reference_size == 1</test>
			<error>
				<message>Entry Reference with type Array in Signature is not object ArrayOfSignatureReferences</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34734"/>
			<description>Entry Reference in Signature shall have type Array</description>
			<test>containsReference == false || ReferenceHasTypeArray == true</test>
			<error>
				<message>Entry Reference in Signature is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34735"/>
			<description>Entry SubFilter in Signature shall have type Name</description>
			<test>containsSubFilter == false || SubFilterHasTypeName == true</test>
			<error>
				<message>Entry SubFilter in Signature is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="13" testNumber="34736"/>
			<description>Entry SubFilter with type Name in Signature shall have one of values: adbe.pkcs7.detached, adbe.x509.rsa_sha1, adbe.pkcs7.sha1</description>
			<test>SubFilterHasTypeName != true || SubFilterNameValue == "adbe.pkcs7.detached" || SubFilterNameValue == "adbe.pkcs7.sha1" || SubFilterNameValue == "adbe.x509.rsa_sha1"</test>
			<error>
				<message>Entry SubFilter with type Name in Signature has incorrect value %2 instead of adbe.pkcs7.detached, adbe.x509.rsa_sha1, adbe.pkcs7.sha1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34737"/>
			<description>Entry Type in Signature shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Signature is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="6" testNumber="34738"/>
			<description>Entry Type with type Name in Signature shall have value Sig</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Sig"</test>
			<error>
				<message>Entry Type with type Name in Signature has incorrect value %2 instead of Sig</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34739"/>
			<description>Entry V in Signature shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in Signature is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_5" clause="1" testNumber="34833"/>
			<description>SignatureBuildDataAppDict shall not contain entries except Date, Name, NonEFontNoWarn, OS, PreRelease, R, TrustedMode, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Date' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'NonEFontNoWarn' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'PreRelease' &amp;&amp; elem != 'R' &amp;&amp; elem != 'TrustedMode' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>SignatureBuildDataAppDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Date' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'NonEFontNoWarn' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'PreRelease' &amp;&amp; elem != 'R' &amp;&amp; elem != 'TrustedMode' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34834"/>
			<description>Entry Date in SignatureBuildDataAppDict shall have type StringText</description>
			<test>containsDate == false || DateHasTypeStringText == true</test>
			<error>
				<message>Entry Date in SignatureBuildDataAppDict is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34835"/>
			<description>Entry Name in SignatureBuildDataAppDict shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in SignatureBuildDataAppDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34836"/>
			<description>Entry NonEFontNoWarn in SignatureBuildDataAppDict shall have type Boolean</description>
			<test>containsNonEFontNoWarn == false || NonEFontNoWarnHasTypeBoolean == true</test>
			<error>
				<message>Entry NonEFontNoWarn in SignatureBuildDataAppDict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34837"/>
			<description>Entry OS with type Array in SignatureBuildDataAppDict shall be object ArrayOfStringsText</description>
			<test>OSHasTypeArray != true || OS_size == 1</test>
			<error>
				<message>Entry OS with type Array in SignatureBuildDataAppDict is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34838"/>
			<description>Entry OS in SignatureBuildDataAppDict shall have type Array</description>
			<test>containsOS == false || OSHasTypeArray == true</test>
			<error>
				<message>Entry OS in SignatureBuildDataAppDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34839"/>
			<description>Entry PreRelease in SignatureBuildDataAppDict shall have type Boolean</description>
			<test>containsPreRelease == false || PreReleaseHasTypeBoolean == true</test>
			<error>
				<message>Entry PreRelease in SignatureBuildDataAppDict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34840"/>
			<description>Entry R in SignatureBuildDataAppDict shall have type Number</description>
			<test>containsR == false || RHasTypeNumber == true</test>
			<error>
				<message>Entry R in SignatureBuildDataAppDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34841"/>
			<description>Entry TrustedMode in SignatureBuildDataAppDict shall have type Boolean</description>
			<test>containsTrustedMode == false || TrustedModeHasTypeBoolean == true</test>
			<error>
				<message>Entry TrustedMode in SignatureBuildDataAppDict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34842"/>
			<description>Entry V in SignatureBuildDataAppDict shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in SignatureBuildDataAppDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_5" clause="1" testNumber="34877"/>
			<description>SignatureBuildDataDict shall not contain entries except Date, Name, NonEFontNoWarn, OS, PreRelease, R, TrustedMode, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Date' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'NonEFontNoWarn' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'PreRelease' &amp;&amp; elem != 'R' &amp;&amp; elem != 'TrustedMode' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>SignatureBuildDataDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Date' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'NonEFontNoWarn' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'PreRelease' &amp;&amp; elem != 'R' &amp;&amp; elem != 'TrustedMode' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34878"/>
			<description>Entry Date in SignatureBuildDataDict shall have type StringText</description>
			<test>containsDate == false || DateHasTypeStringText == true</test>
			<error>
				<message>Entry Date in SignatureBuildDataDict is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34879"/>
			<description>Entry Name in SignatureBuildDataDict shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in SignatureBuildDataDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34880"/>
			<description>Entry NonEFontNoWarn in SignatureBuildDataDict shall have type Boolean</description>
			<test>containsNonEFontNoWarn == false || NonEFontNoWarnHasTypeBoolean == true</test>
			<error>
				<message>Entry NonEFontNoWarn in SignatureBuildDataDict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34881"/>
			<description>Entry OS with type Array in SignatureBuildDataDict shall be object ArrayOfStringsText</description>
			<test>OSHasTypeArray != true || OS_size == 1</test>
			<error>
				<message>Entry OS with type Array in SignatureBuildDataDict is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34882"/>
			<description>Entry OS in SignatureBuildDataDict shall have type Array</description>
			<test>containsOS == false || OSHasTypeArray == true</test>
			<error>
				<message>Entry OS in SignatureBuildDataDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34883"/>
			<description>Entry PreRelease in SignatureBuildDataDict shall have type Boolean</description>
			<test>containsPreRelease == false || PreReleaseHasTypeBoolean == true</test>
			<error>
				<message>Entry PreRelease in SignatureBuildDataDict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34884"/>
			<description>Entry R in SignatureBuildDataDict shall have type Number</description>
			<test>containsR == false || RHasTypeNumber == true</test>
			<error>
				<message>Entry R in SignatureBuildDataDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34885"/>
			<description>Entry TrustedMode in SignatureBuildDataDict shall have type Boolean</description>
			<test>containsTrustedMode == false || TrustedModeHasTypeBoolean == true</test>
			<error>
				<message>Entry TrustedMode in SignatureBuildDataDict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34886"/>
			<description>Entry V in SignatureBuildDataDict shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in SignatureBuildDataDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_5" clause="1" testNumber="34918"/>
			<description>SignatureBuildDataSigQDict shall not contain entries except Date, Name, NonEFontNoWarn, OS, PreRelease, R, TrustedMode, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Date' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'NonEFontNoWarn' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'PreRelease' &amp;&amp; elem != 'R' &amp;&amp; elem != 'TrustedMode' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>SignatureBuildDataSigQDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Date' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'NonEFontNoWarn' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'PreRelease' &amp;&amp; elem != 'R' &amp;&amp; elem != 'TrustedMode' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34919"/>
			<description>Entry Date in SignatureBuildDataSigQDict shall have type StringText</description>
			<test>containsDate == false || DateHasTypeStringText == true</test>
			<error>
				<message>Entry Date in SignatureBuildDataSigQDict is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34920"/>
			<description>Entry Name in SignatureBuildDataSigQDict shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in SignatureBuildDataSigQDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34921"/>
			<description>Entry NonEFontNoWarn in SignatureBuildDataSigQDict shall have type Boolean</description>
			<test>containsNonEFontNoWarn == false || NonEFontNoWarnHasTypeBoolean == true</test>
			<error>
				<message>Entry NonEFontNoWarn in SignatureBuildDataSigQDict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34922"/>
			<description>Entry OS with type Array in SignatureBuildDataSigQDict shall be object ArrayOfStringsText</description>
			<test>OSHasTypeArray != true || OS_size == 1</test>
			<error>
				<message>Entry OS with type Array in SignatureBuildDataSigQDict is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34923"/>
			<description>Entry OS in SignatureBuildDataSigQDict shall have type Array</description>
			<test>containsOS == false || OSHasTypeArray == true</test>
			<error>
				<message>Entry OS in SignatureBuildDataSigQDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34924"/>
			<description>Entry PreRelease in SignatureBuildDataSigQDict shall have type Boolean</description>
			<test>containsPreRelease == false || PreReleaseHasTypeBoolean == true</test>
			<error>
				<message>Entry PreRelease in SignatureBuildDataSigQDict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34925"/>
			<description>Entry R in SignatureBuildDataSigQDict shall have type Number</description>
			<test>containsR == false || RHasTypeNumber == true</test>
			<error>
				<message>Entry R in SignatureBuildDataSigQDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34926"/>
			<description>Entry TrustedMode in SignatureBuildDataSigQDict shall have type Boolean</description>
			<test>containsTrustedMode == false || TrustedModeHasTypeBoolean == true</test>
			<error>
				<message>Entry TrustedMode in SignatureBuildDataSigQDict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34927"/>
			<description>Entry V in SignatureBuildDataSigQDict shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in SignatureBuildDataSigQDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_5" clause="1" testNumber="34961"/>
			<description>SignatureBuildPropDict shall not contain entries except App, Filter, PubSec, SigQ</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'App' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'PubSec' &amp;&amp; elem != 'SigQ').length == 0</test>
			<error>
				<message>SignatureBuildPropDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'App' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'PubSec' &amp;&amp; elem != 'SigQ').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34962"/>
			<description>Entry App with type Dictionary in SignatureBuildPropDict shall be object SignatureBuildDataAppDict</description>
			<test>AppHasTypeDictionary != true || App_size == 1</test>
			<error>
				<message>Entry App with type Dictionary in SignatureBuildPropDict is not object SignatureBuildDataAppDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34963"/>
			<description>Entry App in SignatureBuildPropDict shall have type Dictionary</description>
			<test>containsApp == false || AppHasTypeDictionary == true</test>
			<error>
				<message>Entry App in SignatureBuildPropDict is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_5" clause="16" testNumber="34964"/>
			<description>If entry App with type Dictionary in SignatureBuildPropDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>AppHasTypeDictionary != true || (isAppIndirect == false)</test>
			<error>
				<message>Entry App with type Dictionary in SignatureBuildPropDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34965"/>
			<description>Entry Filter with type Dictionary in SignatureBuildPropDict shall be object SignatureBuildDataDict</description>
			<test>FilterHasTypeDictionary != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Dictionary in SignatureBuildPropDict is not object SignatureBuildDataDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34966"/>
			<description>Entry Filter in SignatureBuildPropDict shall have type Dictionary</description>
			<test>containsFilter == false || FilterHasTypeDictionary == true</test>
			<error>
				<message>Entry Filter in SignatureBuildPropDict is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_5" clause="16" testNumber="34967"/>
			<description>If entry Filter with type Dictionary in SignatureBuildPropDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>FilterHasTypeDictionary != true || (isFilterIndirect == false)</test>
			<error>
				<message>Entry Filter with type Dictionary in SignatureBuildPropDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34968"/>
			<description>Entry PubSec with type Dictionary in SignatureBuildPropDict shall be object SignatureBuildDataDict</description>
			<test>PubSecHasTypeDictionary != true || PubSec_size == 1</test>
			<error>
				<message>Entry PubSec with type Dictionary in SignatureBuildPropDict is not object SignatureBuildDataDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34969"/>
			<description>Entry PubSec in SignatureBuildPropDict shall have type Dictionary</description>
			<test>containsPubSec == false || PubSecHasTypeDictionary == true</test>
			<error>
				<message>Entry PubSec in SignatureBuildPropDict is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_5" clause="16" testNumber="34970"/>
			<description>If entry PubSec with type Dictionary in SignatureBuildPropDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>PubSecHasTypeDictionary != true || (isPubSecIndirect == false)</test>
			<error>
				<message>Entry PubSec with type Dictionary in SignatureBuildPropDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="34971"/>
			<description>Entry SigQ with type Dictionary in SignatureBuildPropDict shall be object SignatureBuildDataSigQDict</description>
			<test>SigQHasTypeDictionary != true || SigQ_size == 1</test>
			<error>
				<message>Entry SigQ with type Dictionary in SignatureBuildPropDict is not object SignatureBuildDataSigQDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="34972"/>
			<description>Entry SigQ in SignatureBuildPropDict shall have type Dictionary</description>
			<test>containsSigQ == false || SigQHasTypeDictionary == true</test>
			<error>
				<message>Entry SigQ in SignatureBuildPropDict is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_5" clause="16" testNumber="34973"/>
			<description>If entry SigQ with type Dictionary in SignatureBuildPropDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>SigQHasTypeDictionary != true || (isSigQIndirect == false)</test>
			<error>
				<message>Entry SigQ with type Dictionary in SignatureBuildPropDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_5" clause="1" testNumber="35013"/>
			<description>SignatureReferenceDocMDP shall not contain entries except Data, DigestMethod, TransformMethod, TransformParams, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'TransformParams' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>SignatureReferenceDocMDP contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'TransformParams' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35014"/>
			<description>Entry Data with type Array in SignatureReferenceDocMDP shall be object _UniversalArray</description>
			<test>DataHasTypeArray != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Array in SignatureReferenceDocMDP is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35015"/>
			<description>Entry Data with type Stream in SignatureReferenceDocMDP shall be object Stream</description>
			<test>DataHasTypeStream != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceDocMDP is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35016"/>
			<description>Entry Data with type Dictionary in SignatureReferenceDocMDP shall be object _UniversalDictionary</description>
			<test>DataHasTypeDictionary != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Dictionary in SignatureReferenceDocMDP is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35017"/>
			<description>Entry Data in SignatureReferenceDocMDP shall have one of types: Array, Stream, Boolean, String, Integer, Name, Dictionary</description>
			<test>containsData == false || DataHasTypeArray == true || DataHasTypeStream == true || DataHasTypeBoolean == true || DataHasTypeString == true || DataHasTypeInteger == true || DataHasTypeName == true || DataHasTypeDictionary == true</test>
			<error>
				<message>Entry Data in SignatureReferenceDocMDP is not one of types: Array, Stream, Boolean, String, Integer, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_5" clause="10" testNumber="35018"/>
			<description>Entry Data with type Stream in SignatureReferenceDocMDP shall be indirect</description>
			<test>DataHasTypeStream != true || isDataIndirect == true</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceDocMDP is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35019"/>
			<description>Entry DigestMethod in SignatureReferenceDocMDP shall have type Name</description>
			<test>containsDigestMethod == false || DigestMethodHasTypeName == true</test>
			<error>
				<message>Entry DigestMethod in SignatureReferenceDocMDP is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_5" clause="13" testNumber="35020"/>
			<description>Entry DigestMethod with type Name in SignatureReferenceDocMDP shall have one of values: SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</description>
			<test>DigestMethodHasTypeName != true || DigestMethodNameValue == "MD5" || DigestMethodNameValue == "SHA1" || DigestMethodNameValue == SHA3-256 || DigestMethodNameValue == SHA3-384 || DigestMethodNameValue == SHA3-512 || DigestMethodNameValue == SHAKE256</test>
			<error>
				<message>Entry DigestMethod with type Name in SignatureReferenceDocMDP has incorrect value %2 instead of SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DigestMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35021"/>
			<description>Entry TransformMethod in SignatureReferenceDocMDP shall have type Name</description>
			<test>containsTransformMethod == false || TransformMethodHasTypeName == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceDocMDP is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_5" clause="7" testNumber="35022"/>
			<description>Entry TransformMethod in SignatureReferenceDocMDP is required</description>
			<test>containsTransformMethod == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceDocMDP is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35023"/>
			<description>Entry TransformMethod with type Name in SignatureReferenceDocMDP shall have value DocMDP</description>
			<test>TransformMethodHasTypeName != true || TransformMethodNameValue == "DocMDP"</test>
			<error>
				<message>Entry TransformMethod with type Name in SignatureReferenceDocMDP has incorrect value %2 instead of DocMDP</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransformMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35024"/>
			<description>Entry TransformParams with type Dictionary in SignatureReferenceDocMDP shall be object DocMDPTransformParameters</description>
			<test>TransformParamsHasTypeDictionary != true || TransformParams_size == 1</test>
			<error>
				<message>Entry TransformParams with type Dictionary in SignatureReferenceDocMDP is not object DocMDPTransformParameters</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35025"/>
			<description>Entry TransformParams in SignatureReferenceDocMDP shall have type Dictionary</description>
			<test>containsTransformParams == false || TransformParamsHasTypeDictionary == true</test>
			<error>
				<message>Entry TransformParams in SignatureReferenceDocMDP is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35026"/>
			<description>Entry Type in SignatureReferenceDocMDP shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SignatureReferenceDocMDP is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35027"/>
			<description>Entry Type with type Name in SignatureReferenceDocMDP shall have value SigRef</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SigRef"</test>
			<error>
				<message>Entry Type with type Name in SignatureReferenceDocMDP has incorrect value %2 instead of SigRef</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_5" clause="1" testNumber="35075"/>
			<description>SignatureReferenceFieldMDP shall not contain entries except Data, DigestMethod, TransformMethod, TransformParams, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'TransformParams' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>SignatureReferenceFieldMDP contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'TransformParams' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35076"/>
			<description>Entry Data with type Array in SignatureReferenceFieldMDP shall be object _UniversalArray</description>
			<test>DataHasTypeArray != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Array in SignatureReferenceFieldMDP is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35077"/>
			<description>Entry Data with type Stream in SignatureReferenceFieldMDP shall be object Stream</description>
			<test>DataHasTypeStream != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceFieldMDP is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35078"/>
			<description>Entry Data with type Dictionary in SignatureReferenceFieldMDP shall be object _UniversalDictionary</description>
			<test>DataHasTypeDictionary != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Dictionary in SignatureReferenceFieldMDP is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35079"/>
			<description>Entry Data in SignatureReferenceFieldMDP shall have one of types: Array, Stream, Boolean, String, Integer, Name, Dictionary</description>
			<test>containsData == false || DataHasTypeArray == true || DataHasTypeStream == true || DataHasTypeBoolean == true || DataHasTypeString == true || DataHasTypeInteger == true || DataHasTypeName == true || DataHasTypeDictionary == true</test>
			<error>
				<message>Entry Data in SignatureReferenceFieldMDP is not one of types: Array, Stream, Boolean, String, Integer, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_5" clause="7" testNumber="35080"/>
			<description>Entry Data in SignatureReferenceFieldMDP is required</description>
			<test>containsData == true</test>
			<error>
				<message>Entry Data in SignatureReferenceFieldMDP is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_5" clause="10" testNumber="35081"/>
			<description>Entry Data with type Stream in SignatureReferenceFieldMDP shall be indirect</description>
			<test>DataHasTypeStream != true || isDataIndirect == true</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceFieldMDP is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35082"/>
			<description>Entry DigestMethod in SignatureReferenceFieldMDP shall have type Name</description>
			<test>containsDigestMethod == false || DigestMethodHasTypeName == true</test>
			<error>
				<message>Entry DigestMethod in SignatureReferenceFieldMDP is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_5" clause="13" testNumber="35083"/>
			<description>Entry DigestMethod with type Name in SignatureReferenceFieldMDP shall have one of values: SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</description>
			<test>DigestMethodHasTypeName != true || DigestMethodNameValue == "MD5" || DigestMethodNameValue == "SHA1" || DigestMethodNameValue == SHA3-256 || DigestMethodNameValue == SHA3-384 || DigestMethodNameValue == SHA3-512 || DigestMethodNameValue == SHAKE256</test>
			<error>
				<message>Entry DigestMethod with type Name in SignatureReferenceFieldMDP has incorrect value %2 instead of SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DigestMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35084"/>
			<description>Entry TransformMethod in SignatureReferenceFieldMDP shall have type Name</description>
			<test>containsTransformMethod == false || TransformMethodHasTypeName == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceFieldMDP is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_5" clause="7" testNumber="35085"/>
			<description>Entry TransformMethod in SignatureReferenceFieldMDP is required</description>
			<test>containsTransformMethod == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceFieldMDP is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35086"/>
			<description>Entry TransformMethod with type Name in SignatureReferenceFieldMDP shall have value FieldMDP</description>
			<test>TransformMethodHasTypeName != true || TransformMethodNameValue == "FieldMDP"</test>
			<error>
				<message>Entry TransformMethod with type Name in SignatureReferenceFieldMDP has incorrect value %2 instead of FieldMDP</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransformMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35087"/>
			<description>Entry TransformParams with type Dictionary in SignatureReferenceFieldMDP shall be object FieldMDPTransformParameters</description>
			<test>TransformParamsHasTypeDictionary != true || TransformParams_size == 1</test>
			<error>
				<message>Entry TransformParams with type Dictionary in SignatureReferenceFieldMDP is not object FieldMDPTransformParameters</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35088"/>
			<description>Entry TransformParams in SignatureReferenceFieldMDP shall have type Dictionary</description>
			<test>containsTransformParams == false || TransformParamsHasTypeDictionary == true</test>
			<error>
				<message>Entry TransformParams in SignatureReferenceFieldMDP is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35089"/>
			<description>Entry Type in SignatureReferenceFieldMDP shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SignatureReferenceFieldMDP is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35090"/>
			<description>Entry Type with type Name in SignatureReferenceFieldMDP shall have value SigRef</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SigRef"</test>
			<error>
				<message>Entry Type with type Name in SignatureReferenceFieldMDP has incorrect value %2 instead of SigRef</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_5" clause="1" testNumber="35141"/>
			<description>SignatureReferenceIdentity shall not contain entries except Data, DigestMethod, TransformMethod, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>SignatureReferenceIdentity contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35142"/>
			<description>Entry Data with type Array in SignatureReferenceIdentity shall be object _UniversalArray</description>
			<test>DataHasTypeArray != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Array in SignatureReferenceIdentity is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35143"/>
			<description>Entry Data with type Stream in SignatureReferenceIdentity shall be object Stream</description>
			<test>DataHasTypeStream != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceIdentity is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35144"/>
			<description>Entry Data with type Dictionary in SignatureReferenceIdentity shall be object _UniversalDictionary</description>
			<test>DataHasTypeDictionary != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Dictionary in SignatureReferenceIdentity is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35145"/>
			<description>Entry Data in SignatureReferenceIdentity shall have one of types: Array, Stream, Boolean, String, Integer, Name, Dictionary</description>
			<test>containsData == false || DataHasTypeArray == true || DataHasTypeStream == true || DataHasTypeBoolean == true || DataHasTypeString == true || DataHasTypeInteger == true || DataHasTypeName == true || DataHasTypeDictionary == true</test>
			<error>
				<message>Entry Data in SignatureReferenceIdentity is not one of types: Array, Stream, Boolean, String, Integer, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_5" clause="7" testNumber="35146"/>
			<description>Entry Data in SignatureReferenceIdentity is required</description>
			<test>containsData == true</test>
			<error>
				<message>Entry Data in SignatureReferenceIdentity is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_5" clause="10" testNumber="35147"/>
			<description>Entry Data with type Stream in SignatureReferenceIdentity shall be indirect</description>
			<test>DataHasTypeStream != true || isDataIndirect == true</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceIdentity is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35148"/>
			<description>Entry DigestMethod in SignatureReferenceIdentity shall have type Name</description>
			<test>containsDigestMethod == false || DigestMethodHasTypeName == true</test>
			<error>
				<message>Entry DigestMethod in SignatureReferenceIdentity is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_5" clause="13" testNumber="35149"/>
			<description>Entry DigestMethod with type Name in SignatureReferenceIdentity shall have one of values: SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</description>
			<test>DigestMethodHasTypeName != true || DigestMethodNameValue == "MD5" || DigestMethodNameValue == "SHA1" || DigestMethodNameValue == SHA3-256 || DigestMethodNameValue == SHA3-384 || DigestMethodNameValue == SHA3-512 || DigestMethodNameValue == SHAKE256</test>
			<error>
				<message>Entry DigestMethod with type Name in SignatureReferenceIdentity has incorrect value %2 instead of SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DigestMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35150"/>
			<description>Entry TransformMethod in SignatureReferenceIdentity shall have type Name</description>
			<test>containsTransformMethod == false || TransformMethodHasTypeName == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceIdentity is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_5" clause="7" testNumber="35151"/>
			<description>Entry TransformMethod in SignatureReferenceIdentity is required</description>
			<test>containsTransformMethod == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceIdentity is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35152"/>
			<description>Entry TransformMethod with type Name in SignatureReferenceIdentity shall have value Identity</description>
			<test>TransformMethodHasTypeName != true || TransformMethodNameValue == "Identity"</test>
			<error>
				<message>Entry TransformMethod with type Name in SignatureReferenceIdentity has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransformMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35153"/>
			<description>Entry Type in SignatureReferenceIdentity shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SignatureReferenceIdentity is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35154"/>
			<description>Entry Type with type Name in SignatureReferenceIdentity shall have value SigRef</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SigRef"</test>
			<error>
				<message>Entry Type with type Name in SignatureReferenceIdentity has incorrect value %2 instead of SigRef</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_5" clause="1" testNumber="35203"/>
			<description>SignatureReferenceUR shall not contain entries except Data, DigestMethod, TransformMethod, TransformParams, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'TransformParams' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>SignatureReferenceUR contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'TransformParams' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35204"/>
			<description>Entry Data with type Array in SignatureReferenceUR shall be object _UniversalArray</description>
			<test>DataHasTypeArray != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Array in SignatureReferenceUR is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35205"/>
			<description>Entry Data with type Stream in SignatureReferenceUR shall be object Stream</description>
			<test>DataHasTypeStream != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceUR is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35206"/>
			<description>Entry Data with type Dictionary in SignatureReferenceUR shall be object _UniversalDictionary</description>
			<test>DataHasTypeDictionary != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Dictionary in SignatureReferenceUR is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35207"/>
			<description>Entry Data in SignatureReferenceUR shall have one of types: Array, Stream, Boolean, String, Integer, Name, Dictionary</description>
			<test>containsData == false || DataHasTypeArray == true || DataHasTypeStream == true || DataHasTypeBoolean == true || DataHasTypeString == true || DataHasTypeInteger == true || DataHasTypeName == true || DataHasTypeDictionary == true</test>
			<error>
				<message>Entry Data in SignatureReferenceUR is not one of types: Array, Stream, Boolean, String, Integer, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_5" clause="10" testNumber="35208"/>
			<description>Entry Data with type Stream in SignatureReferenceUR shall be indirect</description>
			<test>DataHasTypeStream != true || isDataIndirect == true</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceUR is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35209"/>
			<description>Entry DigestMethod in SignatureReferenceUR shall have type Name</description>
			<test>containsDigestMethod == false || DigestMethodHasTypeName == true</test>
			<error>
				<message>Entry DigestMethod in SignatureReferenceUR is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_5" clause="13" testNumber="35210"/>
			<description>Entry DigestMethod with type Name in SignatureReferenceUR shall have one of values: SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</description>
			<test>DigestMethodHasTypeName != true || DigestMethodNameValue == "MD5" || DigestMethodNameValue == "SHA1" || DigestMethodNameValue == SHA3-256 || DigestMethodNameValue == SHA3-384 || DigestMethodNameValue == SHA3-512 || DigestMethodNameValue == SHAKE256</test>
			<error>
				<message>Entry DigestMethod with type Name in SignatureReferenceUR has incorrect value %2 instead of SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DigestMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35211"/>
			<description>Entry TransformMethod in SignatureReferenceUR shall have type Name</description>
			<test>containsTransformMethod == false || TransformMethodHasTypeName == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceUR is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_5" clause="7" testNumber="35212"/>
			<description>Entry TransformMethod in SignatureReferenceUR is required</description>
			<test>containsTransformMethod == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceUR is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35213"/>
			<description>Entry TransformMethod with type Name in SignatureReferenceUR shall have one of values: UR3, UR</description>
			<test>TransformMethodHasTypeName != true || TransformMethodNameValue == "UR" || TransformMethodNameValue == "UR3"</test>
			<error>
				<message>Entry TransformMethod with type Name in SignatureReferenceUR has incorrect value %2 instead of UR3, UR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransformMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35214"/>
			<description>Entry TransformParams with type Dictionary in SignatureReferenceUR shall be object URTransformParameters</description>
			<test>TransformParamsHasTypeDictionary != true || TransformParams_size == 1</test>
			<error>
				<message>Entry TransformParams with type Dictionary in SignatureReferenceUR is not object URTransformParameters</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35215"/>
			<description>Entry TransformParams in SignatureReferenceUR shall have type Dictionary</description>
			<test>containsTransformParams == false || TransformParamsHasTypeDictionary == true</test>
			<error>
				<message>Entry TransformParams in SignatureReferenceUR is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35216"/>
			<description>Entry Type in SignatureReferenceUR shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SignatureReferenceUR is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35217"/>
			<description>Entry Type with type Name in SignatureReferenceUR shall have value SigRef</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SigRef"</test>
			<error>
				<message>Entry Type with type Name in SignatureReferenceUR has incorrect value %2 instead of SigRef</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_5" clause="1" testNumber="35278"/>
			<description>SlideShow shall not contain entries except Resources, StartResource, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Resources' &amp;&amp; elem != 'StartResource' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>SlideShow contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Resources' &amp;&amp; elem != 'StartResource' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35279"/>
			<description>Entry Resources with type NameTree in SlideShow shall be object SlideShowNameTreeResources</description>
			<test>ResourcesHasTypeNameTree != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type NameTree in SlideShow is not object SlideShowNameTreeResources</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35280"/>
			<description>Entry Resources in SlideShow shall have type NameTree</description>
			<test>containsResources == false || ResourcesHasTypeNameTree == true</test>
			<error>
				<message>Entry Resources in SlideShow is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_5" clause="7" testNumber="35281"/>
			<description>Entry Resources in SlideShow is required</description>
			<test>containsResources == true</test>
			<error>
				<message>Entry Resources in SlideShow is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35282"/>
			<description>Entry StartResource in SlideShow shall have type StringByte</description>
			<test>containsStartResource == false || StartResourceHasTypeStringByte == true</test>
			<error>
				<message>Entry StartResource in SlideShow is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_5" clause="7" testNumber="35283"/>
			<description>Entry StartResource in SlideShow is required</description>
			<test>containsStartResource == true</test>
			<error>
				<message>Entry StartResource in SlideShow is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_5" clause="9" testNumber="35284"/>
			<description>Entry StartResource with type StringByte in SlideShow shall satisfy special case: fn:InNameTree(Resources)</description>
			<test>StartResourceHasTypeStringByte != true || ((nameTreeResourcesContainsStartResourceString == true))</test>
			<error>
				<message>Entry StartResource with type StringByte in SlideShow does not satisfy special case: fn:InNameTree(Resources)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35285"/>
			<description>Entry Subtype in SlideShow shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in SlideShow is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_5" clause="7" testNumber="35286"/>
			<description>Entry Subtype in SlideShow is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in SlideShow is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35287"/>
			<description>Entry Subtype with type Name in SlideShow shall have value Embedded</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Embedded"</test>
			<error>
				<message>Entry Subtype with type Name in SlideShow has incorrect value %2 instead of Embedded</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35288"/>
			<description>Entry Type in SlideShow shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SlideShow is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_5" clause="7" testNumber="35289"/>
			<description>Entry Type in SlideShow is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in SlideShow is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35290"/>
			<description>Entry Type with type Name in SlideShow shall have value SlideShow</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SlideShow"</test>
			<error>
				<message>Entry Type with type Name in SlideShow has incorrect value %2 instead of SlideShow</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShowNameTreeResources">
			<id specification="ISO_32000_1_5" clause="18" testNumber="35331"/>
			<description>Entry * in SlideShowNameTreeResources shall be object SlideShowNameTreeResourcesEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in SlideShowNameTreeResources is not object SlideShowNameTreeResourcesEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShowNameTreeResourcesEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35336"/>
			<description>Entry with type Stream in SlideShowNameTreeResources shall be one of objects XObjectImage, EmbeddedFileStream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in SlideShowNameTreeResources is not one of objects XObjectImage, EmbeddedFileStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_5" clause="1" testNumber="35357"/>
			<description>SoftMaskAlpha shall not contain entries except BC, G, S, TR, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BC' &amp;&amp; elem != 'G' &amp;&amp; elem != 'S' &amp;&amp; elem != 'TR' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>SoftMaskAlpha contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BC' &amp;&amp; elem != 'G' &amp;&amp; elem != 'S' &amp;&amp; elem != 'TR' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35358"/>
			<description>Entry BC with type Array in SoftMaskAlpha shall be object ArrayOfNumbersGeneral</description>
			<test>BCHasTypeArray != true || BC_size == 1</test>
			<error>
				<message>Entry BC with type Array in SoftMaskAlpha is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35359"/>
			<description>Entry BC in SoftMaskAlpha shall have type Array</description>
			<test>containsBC == false || BCHasTypeArray == true</test>
			<error>
				<message>Entry BC in SoftMaskAlpha is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35360"/>
			<description>Entry G with type Stream in SoftMaskAlpha shall be object XObjectFormType1</description>
			<test>GHasTypeStream != true || G_size == 1</test>
			<error>
				<message>Entry G with type Stream in SoftMaskAlpha is not object XObjectFormType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35361"/>
			<description>Entry G in SoftMaskAlpha shall have type Stream</description>
			<test>containsG == false || GHasTypeStream == true</test>
			<error>
				<message>Entry G in SoftMaskAlpha is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_5" clause="7" testNumber="35362"/>
			<description>Entry G in SoftMaskAlpha is required</description>
			<test>containsG == true</test>
			<error>
				<message>Entry G in SoftMaskAlpha is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_5" clause="10" testNumber="35363"/>
			<description>Entry G with type Stream in SoftMaskAlpha shall be indirect</description>
			<test>GHasTypeStream != true || isGIndirect == true</test>
			<error>
				<message>Entry G with type Stream in SoftMaskAlpha is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35364"/>
			<description>Entry S in SoftMaskAlpha shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in SoftMaskAlpha is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_5" clause="7" testNumber="35365"/>
			<description>Entry S in SoftMaskAlpha is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in SoftMaskAlpha is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35366"/>
			<description>Entry S with type Name in SoftMaskAlpha shall have value Alpha</description>
			<test>SHasTypeName != true || SNameValue == "Alpha"</test>
			<error>
				<message>Entry S with type Name in SoftMaskAlpha has incorrect value %2 instead of Alpha</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35367"/>
			<description>Entry TR with type Stream in SoftMaskAlpha shall be one of objects FunctionType0, FunctionType4</description>
			<test>TRHasTypeStream != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Stream in SoftMaskAlpha is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35368"/>
			<description>Entry TR with type Dictionary in SoftMaskAlpha shall be one of objects FunctionType2, FunctionType3</description>
			<test>TRHasTypeDictionary != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Dictionary in SoftMaskAlpha is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35369"/>
			<description>Entry TR in SoftMaskAlpha shall have one of types: Stream, Name, Dictionary</description>
			<test>containsTR == false || TRHasTypeStream == true || TRHasTypeName == true || TRHasTypeDictionary == true</test>
			<error>
				<message>Entry TR in SoftMaskAlpha is not one of types: Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_5" clause="10" testNumber="35370"/>
			<description>Entry TR with type Stream in SoftMaskAlpha shall be indirect</description>
			<test>TRHasTypeStream != true || isTRIndirect == true</test>
			<error>
				<message>Entry TR with type Stream in SoftMaskAlpha is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35371"/>
			<description>Entry TR with type Name in SoftMaskAlpha shall have value Identity</description>
			<test>TRHasTypeName != true || TRNameValue == "Identity"</test>
			<error>
				<message>Entry TR with type Name in SoftMaskAlpha has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TRNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35372"/>
			<description>Entry Type in SoftMaskAlpha shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SoftMaskAlpha is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35373"/>
			<description>Entry Type with type Name in SoftMaskAlpha shall have value Mask</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Mask"</test>
			<error>
				<message>Entry Type with type Name in SoftMaskAlpha has incorrect value %2 instead of Mask</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_5" clause="1" testNumber="35443"/>
			<description>SoftMaskLuminosity shall not contain entries except BC, G, S, TR, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BC' &amp;&amp; elem != 'G' &amp;&amp; elem != 'S' &amp;&amp; elem != 'TR' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>SoftMaskLuminosity contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BC' &amp;&amp; elem != 'G' &amp;&amp; elem != 'S' &amp;&amp; elem != 'TR' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35444"/>
			<description>Entry BC with type Array in SoftMaskLuminosity shall be object ArrayOfNumbersGeneral</description>
			<test>BCHasTypeArray != true || BC_size == 1</test>
			<error>
				<message>Entry BC with type Array in SoftMaskLuminosity is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35445"/>
			<description>Entry BC in SoftMaskLuminosity shall have type Array</description>
			<test>containsBC == false || BCHasTypeArray == true</test>
			<error>
				<message>Entry BC in SoftMaskLuminosity is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35446"/>
			<description>Entry G with type Stream in SoftMaskLuminosity shall be object XObjectFormType1</description>
			<test>GHasTypeStream != true || G_size == 1</test>
			<error>
				<message>Entry G with type Stream in SoftMaskLuminosity is not object XObjectFormType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35447"/>
			<description>Entry G in SoftMaskLuminosity shall have type Stream</description>
			<test>containsG == false || GHasTypeStream == true</test>
			<error>
				<message>Entry G in SoftMaskLuminosity is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_5" clause="7" testNumber="35448"/>
			<description>Entry G in SoftMaskLuminosity is required</description>
			<test>containsG == true</test>
			<error>
				<message>Entry G in SoftMaskLuminosity is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_5" clause="10" testNumber="35449"/>
			<description>Entry G with type Stream in SoftMaskLuminosity shall be indirect</description>
			<test>GHasTypeStream != true || isGIndirect == true</test>
			<error>
				<message>Entry G with type Stream in SoftMaskLuminosity is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_5" clause="9" testNumber="35450"/>
			<description>Entry G with type Stream in SoftMaskLuminosity shall satisfy special case: fn:Eval((G::Group::@S== Transparency) &amp;&amp; fn:IsPresent(G::Group::CS))</description>
			<test>GHasTypeStream != true || ((GGroupSNameValue == "Transparency") &amp;&amp; (containsGGroupCS == true))</test>
			<error>
				<message>Entry G with type Stream in SoftMaskLuminosity does not satisfy special case: fn:Eval((G::Group::@S== Transparency) &amp;&amp; fn:IsPresent(G::Group::CS))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35451"/>
			<description>Entry S in SoftMaskLuminosity shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in SoftMaskLuminosity is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_5" clause="7" testNumber="35452"/>
			<description>Entry S in SoftMaskLuminosity is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in SoftMaskLuminosity is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35453"/>
			<description>Entry S with type Name in SoftMaskLuminosity shall have value Luminosity</description>
			<test>SHasTypeName != true || SNameValue == "Luminosity"</test>
			<error>
				<message>Entry S with type Name in SoftMaskLuminosity has incorrect value %2 instead of Luminosity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35454"/>
			<description>Entry TR with type Stream in SoftMaskLuminosity shall be one of objects FunctionType0, FunctionType4</description>
			<test>TRHasTypeStream != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Stream in SoftMaskLuminosity is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35455"/>
			<description>Entry TR with type Dictionary in SoftMaskLuminosity shall be one of objects FunctionType2, FunctionType3</description>
			<test>TRHasTypeDictionary != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Dictionary in SoftMaskLuminosity is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35456"/>
			<description>Entry TR in SoftMaskLuminosity shall have one of types: Stream, Name, Dictionary</description>
			<test>containsTR == false || TRHasTypeStream == true || TRHasTypeName == true || TRHasTypeDictionary == true</test>
			<error>
				<message>Entry TR in SoftMaskLuminosity is not one of types: Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_5" clause="10" testNumber="35457"/>
			<description>Entry TR with type Stream in SoftMaskLuminosity shall be indirect</description>
			<test>TRHasTypeStream != true || isTRIndirect == true</test>
			<error>
				<message>Entry TR with type Stream in SoftMaskLuminosity is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35458"/>
			<description>Entry TR with type Name in SoftMaskLuminosity shall have value Identity</description>
			<test>TRHasTypeName != true || TRNameValue == "Identity"</test>
			<error>
				<message>Entry TR with type Name in SoftMaskLuminosity has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TRNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35459"/>
			<description>Entry Type in SoftMaskLuminosity shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SoftMaskLuminosity is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35460"/>
			<description>Entry Type with type Name in SoftMaskLuminosity shall have value Mask</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Mask"</test>
			<error>
				<message>Entry Type with type Name in SoftMaskLuminosity has incorrect value %2 instead of Mask</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_5" clause="1" testNumber="35515"/>
			<description>SoftwareIdentifier shall not contain entries except H, HI, L, LI, OS, Type, U</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'HI' &amp;&amp; elem != 'L' &amp;&amp; elem != 'LI' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'U').length == 0</test>
			<error>
				<message>SoftwareIdentifier contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'HI' &amp;&amp; elem != 'L' &amp;&amp; elem != 'LI' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'U').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35516"/>
			<description>Entry H with type Array in SoftwareIdentifier shall be object ArrayOfSoftwareVersions</description>
			<test>HHasTypeArray != true || H_size == 1</test>
			<error>
				<message>Entry H with type Array in SoftwareIdentifier is not object ArrayOfSoftwareVersions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35517"/>
			<description>Entry H in SoftwareIdentifier shall have type Array</description>
			<test>containsH == false || HHasTypeArray == true</test>
			<error>
				<message>Entry H in SoftwareIdentifier is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35518"/>
			<description>Entry HI in SoftwareIdentifier shall have type Boolean</description>
			<test>containsHI == false || HIHasTypeBoolean == true</test>
			<error>
				<message>Entry HI in SoftwareIdentifier is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35519"/>
			<description>Entry L with type Array in SoftwareIdentifier shall be object ArrayOfSoftwareVersions</description>
			<test>LHasTypeArray != true || L_size == 1</test>
			<error>
				<message>Entry L with type Array in SoftwareIdentifier is not object ArrayOfSoftwareVersions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35520"/>
			<description>Entry L in SoftwareIdentifier shall have type Array</description>
			<test>containsL == false || LHasTypeArray == true</test>
			<error>
				<message>Entry L in SoftwareIdentifier is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35521"/>
			<description>Entry LI in SoftwareIdentifier shall have type Boolean</description>
			<test>containsLI == false || LIHasTypeBoolean == true</test>
			<error>
				<message>Entry LI in SoftwareIdentifier is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35522"/>
			<description>Entry OS with type Array in SoftwareIdentifier shall be object ArrayOfStringsByte</description>
			<test>OSHasTypeArray != true || OS_size == 1</test>
			<error>
				<message>Entry OS with type Array in SoftwareIdentifier is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35523"/>
			<description>Entry OS in SoftwareIdentifier shall have type Array</description>
			<test>containsOS == false || OSHasTypeArray == true</test>
			<error>
				<message>Entry OS in SoftwareIdentifier is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35524"/>
			<description>Entry Type in SoftwareIdentifier shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SoftwareIdentifier is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35525"/>
			<description>Entry Type with type Name in SoftwareIdentifier shall have value SoftwareIdentifier</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SoftwareIdentifier"</test>
			<error>
				<message>Entry Type with type Name in SoftwareIdentifier has incorrect value %2 instead of SoftwareIdentifier</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35526"/>
			<description>Entry U in SoftwareIdentifier shall have type StringAscii</description>
			<test>containsU == false || UHasTypeStringAscii == true</test>
			<error>
				<message>Entry U in SoftwareIdentifier is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_5" clause="7" testNumber="35527"/>
			<description>Entry U in SoftwareIdentifier is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in SoftwareIdentifier is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="1" testNumber="35693"/>
			<description>SoundObject shall not contain entries except B, C, CO, CP, DL, DecodeParms, E, F, FDecodeParms, FFilter, Filter, Length, R, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CO' &amp;&amp; elem != 'CP' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'E' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>SoundObject contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CO' &amp;&amp; elem != 'CP' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'E' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35694"/>
			<description>Entry B in SoundObject shall have type Integer</description>
			<test>containsB == false || BHasTypeInteger == true</test>
			<error>
				<message>Entry B in SoundObject is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="14" testNumber="35695"/>
			<description>Entry B with type Integer in SoundObject shall satisfy possible value predicate: fn:Eval(@B &gt; 0)</description>
			<test>BHasTypeInteger != true || BIntegerValue &gt; 0</test>
			<error>
				<message>Entry B with type Integer in SoundObject does not satisfy possible value predicate: fn:Eval(@B &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35696"/>
			<description>Entry C in SoundObject shall have type Integer</description>
			<test>containsC == false || CHasTypeInteger == true</test>
			<error>
				<message>Entry C in SoundObject is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="14" testNumber="35697"/>
			<description>Entry C with type Integer in SoundObject shall satisfy possible value predicate: fn:Eval(@C &gt; 0)</description>
			<test>CHasTypeInteger != true || CIntegerValue &gt; 0</test>
			<error>
				<message>Entry C with type Integer in SoundObject does not satisfy possible value predicate: fn:Eval(@C &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35698"/>
			<description>Entry CO in SoundObject shall have type Name</description>
			<test>containsCO == false || COHasTypeName == true</test>
			<error>
				<message>Entry CO in SoundObject is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35699"/>
			<description>Entry CP with type Array in SoundObject shall be object _UniversalArray</description>
			<test>CPHasTypeArray != true || CP_size == 1</test>
			<error>
				<message>Entry CP with type Array in SoundObject is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35700"/>
			<description>Entry CP with type Stream in SoundObject shall be object Stream</description>
			<test>CPHasTypeStream != true || CP_size == 1</test>
			<error>
				<message>Entry CP with type Stream in SoundObject is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35701"/>
			<description>Entry CP with type Dictionary in SoundObject shall be object _UniversalDictionary</description>
			<test>CPHasTypeDictionary != true || CP_size == 1</test>
			<error>
				<message>Entry CP with type Dictionary in SoundObject is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35702"/>
			<description>Entry CP in SoundObject shall have one of types: Array, Stream, Dictionary</description>
			<test>containsCP == false || CPHasTypeArray == true || CPHasTypeStream == true || CPHasTypeDictionary == true</test>
			<error>
				<message>Entry CP in SoundObject is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="10" testNumber="35703"/>
			<description>Entry CP with type Stream in SoundObject shall be indirect</description>
			<test>CPHasTypeStream != true || isCPIndirect == true</test>
			<error>
				<message>Entry CP with type Stream in SoundObject is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35704"/>
			<description>Entry DL in SoundObject shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in SoundObject is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="14" testNumber="35705"/>
			<description>Entry DL with type Integer in SoundObject shall satisfy possible value predicate: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || DLIntegerValue &gt;= 0</test>
			<error>
				<message>Entry DL with type Integer in SoundObject does not satisfy possible value predicate: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35706"/>
			<description>Entry DecodeParms with type Array in SoundObject shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in SoundObject is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35707"/>
			<description>Entry DecodeParms with type Dictionary in SoundObject shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in SoundObject is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35708"/>
			<description>Entry DecodeParms in SoundObject shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in SoundObject is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="9" testNumber="35709"/>
			<description>Entry DecodeParms with type Array in SoundObject shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in SoundObject does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35710"/>
			<description>Entry E in SoundObject shall have type Name</description>
			<test>containsE == false || EHasTypeName == true</test>
			<error>
				<message>Entry E in SoundObject is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35711"/>
			<description>Entry E with type Name in SoundObject shall have one of values: Signed, Raw, muLaw, ALaw</description>
			<test>EHasTypeName != true || ENameValue == "Raw" || ENameValue == "Signed" || ENameValue == "muLaw" || ENameValue == "ALaw"</test>
			<error>
				<message>Entry E with type Name in SoundObject has incorrect value %2 instead of Signed, Raw, muLaw, ALaw</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ENameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35712"/>
			<description>Entry F with type Dictionary in SoundObject shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in SoundObject is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35713"/>
			<description>Entry F in SoundObject shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in SoundObject is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35714"/>
			<description>Entry FDecodeParms with type Array in SoundObject shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in SoundObject is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35715"/>
			<description>Entry FDecodeParms with type Dictionary in SoundObject shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in SoundObject is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35716"/>
			<description>Entry FDecodeParms in SoundObject shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in SoundObject is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="9" testNumber="35717"/>
			<description>Entry FDecodeParms with type Array in SoundObject shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in SoundObject does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35718"/>
			<description>Entry FFilter with type Array in SoundObject shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in SoundObject is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35719"/>
			<description>Entry FFilter in SoundObject shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in SoundObject is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="9" testNumber="35720"/>
			<description>Entry FFilter with type Array in SoundObject shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in SoundObject does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35721"/>
			<description>Entry FFilter with type Name in SoundObject shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in SoundObject has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35722"/>
			<description>Entry Filter with type Array in SoundObject shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in SoundObject is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35723"/>
			<description>Entry Filter in SoundObject shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in SoundObject is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="9" testNumber="35724"/>
			<description>Entry Filter with type Array in SoundObject shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in SoundObject does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35725"/>
			<description>Entry Filter with type Name in SoundObject shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in SoundObject has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35726"/>
			<description>Entry Length in SoundObject shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in SoundObject is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="7" testNumber="35727"/>
			<description>Entry Length in SoundObject is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in SoundObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35728"/>
			<description>Entry R in SoundObject shall have type Number</description>
			<test>containsR == false || RHasTypeNumber == true</test>
			<error>
				<message>Entry R in SoundObject is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="7" testNumber="35729"/>
			<description>Entry R in SoundObject is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in SoundObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="14" testNumber="35730"/>
			<description>Entry R with type Number in SoundObject shall satisfy possible value predicate: fn:Eval(@R &gt; 0)</description>
			<test>RHasTypeNumber != true || RNumberValue &gt; 0</test>
			<error>
				<message>Entry R with type Number in SoundObject does not satisfy possible value predicate: fn:Eval(@R &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35731"/>
			<description>Entry Type in SoundObject shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SoundObject is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35732"/>
			<description>Entry Type with type Name in SoundObject shall have value Sound</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Sound"</test>
			<error>
				<message>Entry Type with type Name in SoundObject has incorrect value %2 instead of Sound</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_5" clause="1" testNumber="35879"/>
			<description>SourceInformation shall not contain entries except AU, C, E, S, TS</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AU' &amp;&amp; elem != 'C' &amp;&amp; elem != 'E' &amp;&amp; elem != 'S' &amp;&amp; elem != 'TS').length == 0</test>
			<error>
				<message>SourceInformation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AU' &amp;&amp; elem != 'C' &amp;&amp; elem != 'E' &amp;&amp; elem != 'S' &amp;&amp; elem != 'TS').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35880"/>
			<description>Entry AU with type Dictionary in SourceInformation shall be object URLAlias</description>
			<test>AUHasTypeDictionary != true || AU_size == 1</test>
			<error>
				<message>Entry AU with type Dictionary in SourceInformation is not object URLAlias</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35881"/>
			<description>Entry AU in SourceInformation shall have one of types: StringAscii, Dictionary</description>
			<test>containsAU == false || AUHasTypeStringAscii == true || AUHasTypeDictionary == true</test>
			<error>
				<message>Entry AU in SourceInformation is not one of types: StringAscii, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_5" clause="7" testNumber="35882"/>
			<description>Entry AU in SourceInformation is required</description>
			<test>containsAU == true</test>
			<error>
				<message>Entry AU in SourceInformation is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_5" clause="17" testNumber="35883"/>
			<description>Entry C with type Dictionary in SourceInformation shall be object WebCaptureCommand</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in SourceInformation is not object WebCaptureCommand</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35884"/>
			<description>Entry C in SourceInformation shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in SourceInformation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_5" clause="10" testNumber="35885"/>
			<description>Entry C with type Dictionary in SourceInformation shall be indirect</description>
			<test>CHasTypeDictionary != true || isCIndirect == true</test>
			<error>
				<message>Entry C with type Dictionary in SourceInformation is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="35886"/>
			<description>Entry C with type Dictionary in SourceInformation shall satisfy special case: fn:Eval(parent::@S== SPS)</description>
			<test>CHasTypeDictionary != true || (parentSNameValue == "SPS")</test>
			<error>
				<message>Entry C with type Dictionary in SourceInformation does not satisfy special case: fn:Eval(parent::@S== SPS)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35887"/>
			<description>Entry E in SourceInformation shall have type Date</description>
			<test>containsE == false || EHasTypeDate == true</test>
			<error>
				<message>Entry E in SourceInformation is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35888"/>
			<description>Entry S in SourceInformation shall have type Integer</description>
			<test>containsS == false || SHasTypeInteger == true</test>
			<error>
				<message>Entry S in SourceInformation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_5" clause="6" testNumber="35889"/>
			<description>Entry S with type Integer in SourceInformation shall have one of values: 0, 1, 2</description>
			<test>SHasTypeInteger != true || SIntegerValue == 0 || SIntegerValue == 1 || SIntegerValue == 2</test>
			<error>
				<message>Entry S with type Integer in SourceInformation has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_5" clause="9" testNumber="35890"/>
			<description>Entry S with type Integer in SourceInformation shall satisfy special case: fn:Eval(parent::@S== SPS)</description>
			<test>SHasTypeInteger != true || (parentSNameValue == "SPS")</test>
			<error>
				<message>Entry S with type Integer in SourceInformation does not satisfy special case: fn:Eval(parent::@S== SPS)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_5" clause="8" testNumber="35891"/>
			<description>Entry TS in SourceInformation shall have type Date</description>
			<test>containsTS == false || TSHasTypeDate == true</test>
			<error>
				<message>Entry TS in SourceInformation is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36014"/>
			<description>Entry DL in Stream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in Stream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36015"/>
			<description>Entry DL with type Integer in Stream shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in Stream does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36016"/>
			<description>Entry DecodeParms with type Array in Stream shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in Stream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36017"/>
			<description>Entry DecodeParms with type Dictionary in Stream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in Stream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36018"/>
			<description>Entry DecodeParms in Stream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in Stream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36019"/>
			<description>Entry DecodeParms with type Array in Stream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in Stream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36020"/>
			<description>Entry F with type Dictionary in Stream shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in Stream is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36021"/>
			<description>Entry F in Stream shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in Stream is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36022"/>
			<description>Entry FDecodeParms with type Array in Stream shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in Stream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36023"/>
			<description>Entry FDecodeParms with type Dictionary in Stream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in Stream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36024"/>
			<description>Entry FDecodeParms in Stream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in Stream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36025"/>
			<description>Entry FDecodeParms with type Array in Stream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in Stream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36026"/>
			<description>Entry FFilter with type Array in Stream shall be object ArrayOfFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in Stream is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36027"/>
			<description>Entry FFilter in Stream shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in Stream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36028"/>
			<description>Entry FFilter with type Array in Stream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in Stream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36029"/>
			<description>Entry FFilter with type Name in Stream shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "JBIG2Decode" || FFilterNameValue == "DCTDecode" || FFilterNameValue == "JPXDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in Stream has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36030"/>
			<description>Entry Filter with type Array in Stream shall be object ArrayOfFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in Stream is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36031"/>
			<description>Entry Filter in Stream shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in Stream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36032"/>
			<description>Entry Filter with type Array in Stream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in Stream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36033"/>
			<description>Entry Filter with type Name in Stream shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "JBIG2Decode" || FilterNameValue == "DCTDecode" || FilterNameValue == "JPXDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in Stream has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36034"/>
			<description>Entry Length in Stream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in Stream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_5" clause="7" testNumber="36035"/>
			<description>Entry Length in Stream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in Stream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="1" testNumber="36160"/>
			<description>StructElem shall not contain entries except A, ActualText, Alt, C, E, ID, K, Lang, P, Pg, R, S, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'ActualText' &amp;&amp; elem != 'Alt' &amp;&amp; elem != 'C' &amp;&amp; elem != 'E' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'K' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>StructElem contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'ActualText' &amp;&amp; elem != 'Alt' &amp;&amp; elem != 'C' &amp;&amp; elem != 'E' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'K' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36161"/>
			<description>Entry A with type Array in StructElem shall be object ArrayOfAttributeRevisions</description>
			<test>AHasTypeArray != true || A_size == 1</test>
			<error>
				<message>Entry A with type Array in StructElem is not object ArrayOfAttributeRevisions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36162"/>
			<description>Entry A with type Stream in StructElem shall be object Stream</description>
			<test>AHasTypeStream != true || A_size == 1</test>
			<error>
				<message>Entry A with type Stream in StructElem is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36163"/>
			<description>Entry A with type Dictionary in StructElem shall be object StructureAttributesDict</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in StructElem is not object StructureAttributesDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36164"/>
			<description>Entry A in StructElem shall have one of types: Array, Stream, Dictionary</description>
			<test>containsA == false || AHasTypeArray == true || AHasTypeStream == true || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in StructElem is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="14" testNumber="36165"/>
			<description>Entry A with type Array in StructElem shall satisfy possible value predicate: fn:Eval(fn:ArrayLength(A) &gt;= 1)</description>
			<test>AHasTypeArray != true || AArraySize &gt;= 1</test>
			<error>
				<message>Entry A with type Array in StructElem does not satisfy possible value predicate: fn:Eval(fn:ArrayLength(A) &gt;= 1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="10" testNumber="36166"/>
			<description>Entry A with type Stream in StructElem shall be indirect</description>
			<test>AHasTypeStream != true || isAIndirect == true</test>
			<error>
				<message>Entry A with type Stream in StructElem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36167"/>
			<description>Entry ActualText in StructElem shall have type StringText</description>
			<test>containsActualText == false || ActualTextHasTypeStringText == true</test>
			<error>
				<message>Entry ActualText in StructElem is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36168"/>
			<description>Entry Alt in StructElem shall have type StringText</description>
			<test>containsAlt == false || AltHasTypeStringText == true</test>
			<error>
				<message>Entry Alt in StructElem is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36169"/>
			<description>Entry C with type Array in StructElem shall be object ArrayOfClassNamesRevisions</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in StructElem is not object ArrayOfClassNamesRevisions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36170"/>
			<description>Entry C in StructElem shall have one of types: Array, Name</description>
			<test>containsC == false || CHasTypeArray == true || CHasTypeName == true</test>
			<error>
				<message>Entry C in StructElem is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36171"/>
			<description>Entry E in StructElem shall have type StringText</description>
			<test>containsE == false || EHasTypeStringText == true</test>
			<error>
				<message>Entry E in StructElem is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36172"/>
			<description>Entry ID in StructElem shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in StructElem is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36173"/>
			<description>Entry K with type Array in StructElem shall be object ArrayOfStructElemKids</description>
			<test>KHasTypeArray != true || K_size == 1</test>
			<error>
				<message>Entry K with type Array in StructElem is not object ArrayOfStructElemKids</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36174"/>
			<description>Entry K with type Dictionary in StructElem shall be one of objects StructElem, MarkedContentReference, ObjectReference</description>
			<test>KHasTypeDictionary != true || K_size == 1</test>
			<error>
				<message>Entry K with type Dictionary in StructElem is not one of objects StructElem, MarkedContentReference, ObjectReference</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36175"/>
			<description>Entry K in StructElem shall have one of types: Array, Integer, Dictionary</description>
			<test>containsK == false || KHasTypeArray == true || KHasTypeInteger == true || KHasTypeDictionary == true</test>
			<error>
				<message>Entry K in StructElem is not one of types: Array, Integer, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36176"/>
			<description>Entry Lang in StructElem shall have type StringText</description>
			<test>containsLang == false || LangHasTypeStringText == true</test>
			<error>
				<message>Entry Lang in StructElem is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36177"/>
			<description>Entry P with type Dictionary in StructElem shall be one of objects StructElem, StructTreeRoot</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in StructElem is not one of objects StructElem, StructTreeRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36178"/>
			<description>Entry P in StructElem shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in StructElem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="7" testNumber="36179"/>
			<description>Entry P in StructElem is required</description>
			<test>containsP == true</test>
			<error>
				<message>Entry P in StructElem is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="10" testNumber="36180"/>
			<description>Entry P with type Dictionary in StructElem shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in StructElem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36181"/>
			<description>Entry Pg with type Dictionary in StructElem shall be object PageObject</description>
			<test>PgHasTypeDictionary != true || Pg_size == 1</test>
			<error>
				<message>Entry Pg with type Dictionary in StructElem is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36182"/>
			<description>Entry Pg in StructElem shall have type Dictionary</description>
			<test>containsPg == false || PgHasTypeDictionary == true</test>
			<error>
				<message>Entry Pg in StructElem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="10" testNumber="36183"/>
			<description>Entry Pg with type Dictionary in StructElem shall be indirect</description>
			<test>PgHasTypeDictionary != true || isPgIndirect == true</test>
			<error>
				<message>Entry Pg with type Dictionary in StructElem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36184"/>
			<description>Entry R in StructElem shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in StructElem is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="14" testNumber="36185"/>
			<description>Entry R with type Integer in StructElem shall satisfy possible value predicate: fn:Eval(@R &gt;= 0)</description>
			<test>RHasTypeInteger != true || RIntegerValue &gt;= 0</test>
			<error>
				<message>Entry R with type Integer in StructElem does not satisfy possible value predicate: fn:Eval(@R &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36186"/>
			<description>Entry S in StructElem shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in StructElem is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="7" testNumber="36187"/>
			<description>Entry S in StructElem is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in StructElem is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36188"/>
			<description>Entry T in StructElem shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in StructElem is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36189"/>
			<description>Entry Type in StructElem shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in StructElem is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36190"/>
			<description>Entry Type with type Name in StructElem shall have value StructElem</description>
			<test>TypeHasTypeName != true || TypeNameValue == "StructElem"</test>
			<error>
				<message>Entry Type with type Name in StructElem has incorrect value %2 instead of StructElem</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_5" clause="1" testNumber="36326"/>
			<description>StructTreeRoot shall not contain entries except ClassMap, IDTree, K, ParentTree, ParentTreeNextKey, RoleMap, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ClassMap' &amp;&amp; elem != 'IDTree' &amp;&amp; elem != 'K' &amp;&amp; elem != 'ParentTree' &amp;&amp; elem != 'ParentTreeNextKey' &amp;&amp; elem != 'RoleMap' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>StructTreeRoot contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ClassMap' &amp;&amp; elem != 'IDTree' &amp;&amp; elem != 'K' &amp;&amp; elem != 'ParentTree' &amp;&amp; elem != 'ParentTreeNextKey' &amp;&amp; elem != 'RoleMap' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36327"/>
			<description>Entry ClassMap with type Dictionary in StructTreeRoot shall be object ClassMap</description>
			<test>ClassMapHasTypeDictionary != true || ClassMap_size == 1</test>
			<error>
				<message>Entry ClassMap with type Dictionary in StructTreeRoot is not object ClassMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36328"/>
			<description>Entry ClassMap in StructTreeRoot shall have type Dictionary</description>
			<test>containsClassMap == false || ClassMapHasTypeDictionary == true</test>
			<error>
				<message>Entry ClassMap in StructTreeRoot is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36329"/>
			<description>Entry IDTree with type NameTree in StructTreeRoot shall be object StructTreeRootNameTreeIDTree</description>
			<test>IDTreeHasTypeNameTree != true || IDTree_size == 1</test>
			<error>
				<message>Entry IDTree with type NameTree in StructTreeRoot is not object StructTreeRootNameTreeIDTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36330"/>
			<description>Entry IDTree in StructTreeRoot shall have type NameTree</description>
			<test>containsIDTree == false || IDTreeHasTypeNameTree == true</test>
			<error>
				<message>Entry IDTree in StructTreeRoot is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36331"/>
			<description>Entry K with type Array in StructTreeRoot shall be object ArrayOfStructElem</description>
			<test>KHasTypeArray != true || K_size == 1</test>
			<error>
				<message>Entry K with type Array in StructTreeRoot is not object ArrayOfStructElem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36332"/>
			<description>Entry K with type Dictionary in StructTreeRoot shall be object StructElem</description>
			<test>KHasTypeDictionary != true || K_size == 1</test>
			<error>
				<message>Entry K with type Dictionary in StructTreeRoot is not object StructElem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36333"/>
			<description>Entry K in StructTreeRoot shall have one of types: Array, Dictionary</description>
			<test>containsK == false || KHasTypeArray == true || KHasTypeDictionary == true</test>
			<error>
				<message>Entry K in StructTreeRoot is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36334"/>
			<description>Entry ParentTree with type NumberTree in StructTreeRoot shall be object StructTreeRootNumberTreeParentTree</description>
			<test>ParentTreeHasTypeNumberTree != true || ParentTree_size == 1</test>
			<error>
				<message>Entry ParentTree with type NumberTree in StructTreeRoot is not object StructTreeRootNumberTreeParentTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36335"/>
			<description>Entry ParentTree in StructTreeRoot shall have type NumberTree</description>
			<test>containsParentTree == false || ParentTreeHasTypeNumberTree == true</test>
			<error>
				<message>Entry ParentTree in StructTreeRoot is not of type NumberTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36336"/>
			<description>Entry ParentTreeNextKey in StructTreeRoot shall have type Integer</description>
			<test>containsParentTreeNextKey == false || ParentTreeNextKeyHasTypeInteger == true</test>
			<error>
				<message>Entry ParentTreeNextKey in StructTreeRoot is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36337"/>
			<description>Entry RoleMap with type Dictionary in StructTreeRoot shall be object RoleMap</description>
			<test>RoleMapHasTypeDictionary != true || RoleMap_size == 1</test>
			<error>
				<message>Entry RoleMap with type Dictionary in StructTreeRoot is not object RoleMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36338"/>
			<description>Entry RoleMap in StructTreeRoot shall have type Dictionary</description>
			<test>containsRoleMap == false || RoleMapHasTypeDictionary == true</test>
			<error>
				<message>Entry RoleMap in StructTreeRoot is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36339"/>
			<description>Entry Type in StructTreeRoot shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in StructTreeRoot is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_5" clause="7" testNumber="36340"/>
			<description>Entry Type in StructTreeRoot is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in StructTreeRoot is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36341"/>
			<description>Entry Type with type Name in StructTreeRoot shall have value StructTreeRoot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "StructTreeRoot"</test>
			<error>
				<message>Entry Type with type Name in StructTreeRoot has incorrect value %2 instead of StructTreeRoot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRootNameTreeIDTree">
			<id specification="ISO_32000_1_5" clause="18" testNumber="36403"/>
			<description>Entry * in StructTreeRootNameTreeIDTree shall be object StructTreeRootNameTreeIDTreeEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in StructTreeRootNameTreeIDTree is not object StructTreeRootNameTreeIDTreeEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRootNameTreeIDTreeEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36409"/>
			<description>Entry with type Dictionary in StructTreeRootNameTreeIDTree shall be one of objects StructElem, MarkedContentReference, ObjectReference</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in StructTreeRootNameTreeIDTree is not one of objects StructElem, MarkedContentReference, ObjectReference</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRootNumberTreeParentTree">
			<id specification="ISO_32000_1_5" clause="18" testNumber="36415"/>
			<description>Entry * in StructTreeRootNumberTreeParentTree shall be object StructTreeRootNumberTreeParentTreeEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in StructTreeRootNumberTreeParentTree is not object StructTreeRootNumberTreeParentTreeEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRootNumberTreeParentTreeEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36423"/>
			<description>Entry with type Array in StructTreeRootNumberTreeParentTree shall be object ArrayOfStructElem</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in StructTreeRootNumberTreeParentTree is not object ArrayOfStructElem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRootNumberTreeParentTreeEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36424"/>
			<description>Entry with type Dictionary in StructTreeRootNumberTreeParentTree shall be one of objects StructElem, MarkedContentReference, ObjectReference</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in StructTreeRootNumberTreeParentTree is not one of objects StructElem, MarkedContentReference, ObjectReference</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="1" testNumber="36498"/>
			<description>StructureAttributesDict shall not contain entries except BBox, BackgroundColor, BaselineShift, BlockAlign, BorderColor, BorderStyle, BorderThickness, ColSpan, Color, EndIndent, GlyphOrientationVertical, Headers, Height, InlineAlign, LineHeight, ListNumbering, O, Padding, Placement, Role, RowSpan, RubyAlign, RubyPosition, Scope, SpaceAfter, SpaceBefore, StartIndent, TBorderStyle, TPadding, TextAlign, TextDecorationColor, TextDecorationThickness, TextDecorationType, TextIndent, Type, Width, WritingMode</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'BackgroundColor' &amp;&amp; elem != 'BaselineShift' &amp;&amp; elem != 'BlockAlign' &amp;&amp; elem != 'BorderColor' &amp;&amp; elem != 'BorderStyle' &amp;&amp; elem != 'BorderThickness' &amp;&amp; elem != 'ColSpan' &amp;&amp; elem != 'Color' &amp;&amp; elem != 'EndIndent' &amp;&amp; elem != 'GlyphOrientationVertical' &amp;&amp; elem != 'Headers' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'InlineAlign' &amp;&amp; elem != 'LineHeight' &amp;&amp; elem != 'ListNumbering' &amp;&amp; elem != 'O' &amp;&amp; elem != 'Padding' &amp;&amp; elem != 'Placement' &amp;&amp; elem != 'Role' &amp;&amp; elem != 'RowSpan' &amp;&amp; elem != 'RubyAlign' &amp;&amp; elem != 'RubyPosition' &amp;&amp; elem != 'Scope' &amp;&amp; elem != 'SpaceAfter' &amp;&amp; elem != 'SpaceBefore' &amp;&amp; elem != 'StartIndent' &amp;&amp; elem != 'TBorderStyle' &amp;&amp; elem != 'TPadding' &amp;&amp; elem != 'TextAlign' &amp;&amp; elem != 'TextDecorationColor' &amp;&amp; elem != 'TextDecorationThickness' &amp;&amp; elem != 'TextDecorationType' &amp;&amp; elem != 'TextIndent' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'WritingMode').length == 0</test>
			<error>
				<message>StructureAttributesDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'BackgroundColor' &amp;&amp; elem != 'BaselineShift' &amp;&amp; elem != 'BlockAlign' &amp;&amp; elem != 'BorderColor' &amp;&amp; elem != 'BorderStyle' &amp;&amp; elem != 'BorderThickness' &amp;&amp; elem != 'ColSpan' &amp;&amp; elem != 'Color' &amp;&amp; elem != 'EndIndent' &amp;&amp; elem != 'GlyphOrientationVertical' &amp;&amp; elem != 'Headers' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'InlineAlign' &amp;&amp; elem != 'LineHeight' &amp;&amp; elem != 'ListNumbering' &amp;&amp; elem != 'O' &amp;&amp; elem != 'Padding' &amp;&amp; elem != 'Placement' &amp;&amp; elem != 'Role' &amp;&amp; elem != 'RowSpan' &amp;&amp; elem != 'RubyAlign' &amp;&amp; elem != 'RubyPosition' &amp;&amp; elem != 'Scope' &amp;&amp; elem != 'SpaceAfter' &amp;&amp; elem != 'SpaceBefore' &amp;&amp; elem != 'StartIndent' &amp;&amp; elem != 'TBorderStyle' &amp;&amp; elem != 'TPadding' &amp;&amp; elem != 'TextAlign' &amp;&amp; elem != 'TextDecorationColor' &amp;&amp; elem != 'TextDecorationThickness' &amp;&amp; elem != 'TextDecorationType' &amp;&amp; elem != 'TextIndent' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'WritingMode').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36499"/>
			<description>Entry BBox in StructureAttributesDict shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in StructureAttributesDict is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36500"/>
			<description>Entry BBox with type Rectangle in StructureAttributesDict shall satisfy special case: fn:Eval(((@O == Layout) || (@O == Artifact)) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>BBoxHasTypeRectangle != true || (((ONameValue == "Layout") || (ONameValue == "Artifact")) || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BBox with type Rectangle in StructureAttributesDict does not satisfy special case: fn:Eval(((@O == Layout) || (@O == Artifact)) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36501"/>
			<description>Entry BackgroundColor with type Array in StructureAttributesDict shall be object ArrayOf_3RGBNumbers</description>
			<test>BackgroundColorHasTypeArray != true || BackgroundColor_size == 1</test>
			<error>
				<message>Entry BackgroundColor with type Array in StructureAttributesDict is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36502"/>
			<description>Entry BackgroundColor in StructureAttributesDict shall have type Array</description>
			<test>containsBackgroundColor == false || BackgroundColorHasTypeArray == true</test>
			<error>
				<message>Entry BackgroundColor in StructureAttributesDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36503"/>
			<description>Entry BackgroundColor with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>BackgroundColorHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BackgroundColor with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36504"/>
			<description>Entry BaselineShift in StructureAttributesDict shall have type Number</description>
			<test>containsBaselineShift == false || BaselineShiftHasTypeNumber == true</test>
			<error>
				<message>Entry BaselineShift in StructureAttributesDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36505"/>
			<description>Entry BaselineShift with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>BaselineShiftHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BaselineShift with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36506"/>
			<description>Entry BlockAlign in StructureAttributesDict shall have type Name</description>
			<test>containsBlockAlign == false || BlockAlignHasTypeName == true</test>
			<error>
				<message>Entry BlockAlign in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36507"/>
			<description>Entry BlockAlign with type Name in StructureAttributesDict shall have one of values: Before, After, Middle, Justify</description>
			<test>BlockAlignHasTypeName != true || BlockAlignNameValue == "Before" || BlockAlignNameValue == "Middle" || BlockAlignNameValue == "After" || BlockAlignNameValue == "Justify"</test>
			<error>
				<message>Entry BlockAlign with type Name in StructureAttributesDict has incorrect value %2 instead of Before, After, Middle, Justify</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BlockAlignNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36508"/>
			<description>Entry BlockAlign with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>BlockAlignHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BlockAlign with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36509"/>
			<description>Entry BorderColor with type Array in StructureAttributesDict shall be one of objects ArrayOf_4BorderColorArrays, ArrayOf_3RGBNumbers</description>
			<test>BorderColorHasTypeArray != true || BorderColor_size == 1</test>
			<error>
				<message>Entry BorderColor with type Array in StructureAttributesDict is not one of objects ArrayOf_4BorderColorArrays, ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36510"/>
			<description>Entry BorderColor in StructureAttributesDict shall have type Array</description>
			<test>containsBorderColor == false || BorderColorHasTypeArray == true</test>
			<error>
				<message>Entry BorderColor in StructureAttributesDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36511"/>
			<description>Entry BorderColor with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>BorderColorHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BorderColor with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36512"/>
			<description>Entry BorderStyle with type Array in StructureAttributesDict shall be object ArrayOf_4BorderStyleNames</description>
			<test>BorderStyleHasTypeArray != true || BorderStyle_size == 1</test>
			<error>
				<message>Entry BorderStyle with type Array in StructureAttributesDict is not object ArrayOf_4BorderStyleNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36513"/>
			<description>Entry BorderStyle in StructureAttributesDict shall have one of types: Array, Name</description>
			<test>containsBorderStyle == false || BorderStyleHasTypeArray == true || BorderStyleHasTypeName == true</test>
			<error>
				<message>Entry BorderStyle in StructureAttributesDict is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36514"/>
			<description>Entry BorderStyle with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>BorderStyleHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BorderStyle with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36515"/>
			<description>Entry BorderStyle with type Name in StructureAttributesDict shall have one of values: Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</description>
			<test>BorderStyleHasTypeName != true || BorderStyleNameValue == "None" || BorderStyleNameValue == "Hidden" || BorderStyleNameValue == "Dotted" || BorderStyleNameValue == "Dashed" || BorderStyleNameValue == "Solid" || BorderStyleNameValue == "Double" || BorderStyleNameValue == "Groove" || BorderStyleNameValue == "Ridge" || BorderStyleNameValue == "Inset" || BorderStyleNameValue == "Outset"</test>
			<error>
				<message>Entry BorderStyle with type Name in StructureAttributesDict has incorrect value %2 instead of Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BorderStyleNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36516"/>
			<description>Entry BorderStyle with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>BorderStyleHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BorderStyle with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36517"/>
			<description>Entry BorderThickness with type Array in StructureAttributesDict shall be object ArrayOf_4BorderThicknessNumbers</description>
			<test>BorderThicknessHasTypeArray != true || BorderThickness_size == 1</test>
			<error>
				<message>Entry BorderThickness with type Array in StructureAttributesDict is not object ArrayOf_4BorderThicknessNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36518"/>
			<description>Entry BorderThickness in StructureAttributesDict shall have one of types: Array, Number</description>
			<test>containsBorderThickness == false || BorderThicknessHasTypeArray == true || BorderThicknessHasTypeNumber == true</test>
			<error>
				<message>Entry BorderThickness in StructureAttributesDict is not one of types: Array, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36519"/>
			<description>Entry BorderThickness with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>BorderThicknessHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BorderThickness with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36520"/>
			<description>Entry BorderThickness with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>BorderThicknessHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BorderThickness with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36521"/>
			<description>Entry ColSpan in StructureAttributesDict shall have type Integer</description>
			<test>containsColSpan == false || ColSpanHasTypeInteger == true</test>
			<error>
				<message>Entry ColSpan in StructureAttributesDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36522"/>
			<description>Entry ColSpan with type Integer in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</description>
			<test>ColSpanHasTypeInteger != true || ((ONameValue == "Table") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry ColSpan with type Integer in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36523"/>
			<description>Entry Color with type Array in StructureAttributesDict shall be object ArrayOf_3RGBNumbers</description>
			<test>ColorHasTypeArray != true || Color_size == 1</test>
			<error>
				<message>Entry Color with type Array in StructureAttributesDict is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36524"/>
			<description>Entry Color in StructureAttributesDict shall have type Array</description>
			<test>containsColor == false || ColorHasTypeArray == true</test>
			<error>
				<message>Entry Color in StructureAttributesDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36525"/>
			<description>Entry Color with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>ColorHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Color with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36526"/>
			<description>Entry EndIndent in StructureAttributesDict shall have type Number</description>
			<test>containsEndIndent == false || EndIndentHasTypeNumber == true</test>
			<error>
				<message>Entry EndIndent in StructureAttributesDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36527"/>
			<description>Entry EndIndent with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>EndIndentHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry EndIndent with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36528"/>
			<description>Entry GlyphOrientationVertical in StructureAttributesDict shall have one of types: Integer, Name</description>
			<test>containsGlyphOrientationVertical == false || GlyphOrientationVerticalHasTypeInteger == true || GlyphOrientationVerticalHasTypeName == true</test>
			<error>
				<message>Entry GlyphOrientationVertical in StructureAttributesDict is not one of types: Integer, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36529"/>
			<description>Entry GlyphOrientationVertical with type Integer in StructureAttributesDict shall have one of values: 0, -90, 90, -180, 180, 270, 360</description>
			<test>GlyphOrientationVerticalHasTypeInteger != true || GlyphOrientationVerticalIntegerValue == -180 || GlyphOrientationVerticalIntegerValue == -90 || GlyphOrientationVerticalIntegerValue == 0 || GlyphOrientationVerticalIntegerValue == 90 || GlyphOrientationVerticalIntegerValue == 180 || GlyphOrientationVerticalIntegerValue == 270 || GlyphOrientationVerticalIntegerValue == 360</test>
			<error>
				<message>Entry GlyphOrientationVertical with type Integer in StructureAttributesDict has incorrect value %2 instead of 0, -90, 90, -180, 180, 270, 360</message>
				<arguments>
					<argument>keyName</argument>
					<argument>GlyphOrientationVerticalIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36530"/>
			<description>Entry GlyphOrientationVertical with type Integer in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>GlyphOrientationVerticalHasTypeInteger != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry GlyphOrientationVertical with type Integer in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36531"/>
			<description>Entry GlyphOrientationVertical with type Name in StructureAttributesDict shall have value Auto</description>
			<test>GlyphOrientationVerticalHasTypeName != true || GlyphOrientationVerticalNameValue == "Auto"</test>
			<error>
				<message>Entry GlyphOrientationVertical with type Name in StructureAttributesDict has incorrect value %2 instead of Auto</message>
				<arguments>
					<argument>keyName</argument>
					<argument>GlyphOrientationVerticalNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36532"/>
			<description>Entry GlyphOrientationVertical with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>GlyphOrientationVerticalHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry GlyphOrientationVertical with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36533"/>
			<description>Entry Headers with type Array in StructureAttributesDict shall be object ArrayOfStringsByte</description>
			<test>HeadersHasTypeArray != true || Headers_size == 1</test>
			<error>
				<message>Entry Headers with type Array in StructureAttributesDict is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36534"/>
			<description>Entry Headers in StructureAttributesDict shall have type Array</description>
			<test>containsHeaders == false || HeadersHasTypeArray == true</test>
			<error>
				<message>Entry Headers in StructureAttributesDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36535"/>
			<description>Entry Headers with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</description>
			<test>HeadersHasTypeArray != true || ((ONameValue == "Table") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry Headers with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36536"/>
			<description>Entry Height in StructureAttributesDict shall have one of types: Number, Name</description>
			<test>containsHeight == false || HeightHasTypeNumber == true || HeightHasTypeName == true</test>
			<error>
				<message>Entry Height in StructureAttributesDict is not one of types: Number, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36537"/>
			<description>Entry Height with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>HeightHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Height with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36538"/>
			<description>Entry Height with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>HeightHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Height with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36539"/>
			<description>Entry InlineAlign in StructureAttributesDict shall have type Name</description>
			<test>containsInlineAlign == false || InlineAlignHasTypeName == true</test>
			<error>
				<message>Entry InlineAlign in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36540"/>
			<description>Entry InlineAlign with type Name in StructureAttributesDict shall have one of values: Center, Start, End</description>
			<test>InlineAlignHasTypeName != true || InlineAlignNameValue == "Start" || InlineAlignNameValue == "Center" || InlineAlignNameValue == "End"</test>
			<error>
				<message>Entry InlineAlign with type Name in StructureAttributesDict has incorrect value %2 instead of Center, Start, End</message>
				<arguments>
					<argument>keyName</argument>
					<argument>InlineAlignNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36541"/>
			<description>Entry InlineAlign with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>InlineAlignHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry InlineAlign with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36542"/>
			<description>Entry LineHeight in StructureAttributesDict shall have one of types: Number, Name</description>
			<test>containsLineHeight == false || LineHeightHasTypeNumber == true || LineHeightHasTypeName == true</test>
			<error>
				<message>Entry LineHeight in StructureAttributesDict is not one of types: Number, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36543"/>
			<description>Entry LineHeight with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>LineHeightHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry LineHeight with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36544"/>
			<description>Entry LineHeight with type Name in StructureAttributesDict shall have one of values: Auto, Normal</description>
			<test>LineHeightHasTypeName != true || LineHeightNameValue == "Normal" || LineHeightNameValue == "Auto"</test>
			<error>
				<message>Entry LineHeight with type Name in StructureAttributesDict has incorrect value %2 instead of Auto, Normal</message>
				<arguments>
					<argument>keyName</argument>
					<argument>LineHeightNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36545"/>
			<description>Entry LineHeight with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>LineHeightHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry LineHeight with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36546"/>
			<description>Entry ListNumbering in StructureAttributesDict shall have type Name</description>
			<test>containsListNumbering == false || ListNumberingHasTypeName == true</test>
			<error>
				<message>Entry ListNumbering in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36547"/>
			<description>Entry ListNumbering with type Name in StructureAttributesDict shall have one of values: Circle, Decimal, Disc, UpperRoman, LowerRoman, UpperAlpha, LowerAlpha, Ordered, Square, None</description>
			<test>ListNumberingHasTypeName != true || ListNumberingNameValue == "None" || ListNumberingNameValue == "Disc" || ListNumberingNameValue == "Circle" || ListNumberingNameValue == "Square" || ListNumberingNameValue == "Ordered" || ListNumberingNameValue == "Decimal" || ListNumberingNameValue == "UpperRoman" || ListNumberingNameValue == "LowerRoman" || ListNumberingNameValue == "UpperAlpha" || ListNumberingNameValue == "LowerAlpha"</test>
			<error>
				<message>Entry ListNumbering with type Name in StructureAttributesDict has incorrect value %2 instead of Circle, Decimal, Disc, UpperRoman, LowerRoman, UpperAlpha, LowerAlpha, Ordered, Square, None</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ListNumberingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36548"/>
			<description>Entry ListNumbering with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == List) || ((@O != Layout) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>ListNumberingHasTypeName != true || ((ONameValue == "List") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry ListNumbering with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == List) || ((@O != Layout) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36549"/>
			<description>Entry O in StructureAttributesDict shall have type Name</description>
			<test>containsO == false || OHasTypeName == true</test>
			<error>
				<message>Entry O in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="7" testNumber="36550"/>
			<description>Entry O in StructureAttributesDict is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in StructureAttributesDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36551"/>
			<description>Entry Padding with type Array in StructureAttributesDict shall be object ArrayOf_4Integers</description>
			<test>PaddingHasTypeArray != true || Padding_size == 1</test>
			<error>
				<message>Entry Padding with type Array in StructureAttributesDict is not object ArrayOf_4Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36552"/>
			<description>Entry Padding in StructureAttributesDict shall have one of types: Array, Number</description>
			<test>containsPadding == false || PaddingHasTypeArray == true || PaddingHasTypeNumber == true</test>
			<error>
				<message>Entry Padding in StructureAttributesDict is not one of types: Array, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36553"/>
			<description>Entry Padding with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>PaddingHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Padding with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36554"/>
			<description>Entry Padding with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>PaddingHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Padding with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36555"/>
			<description>Entry Placement in StructureAttributesDict shall have type Name</description>
			<test>containsPlacement == false || PlacementHasTypeName == true</test>
			<error>
				<message>Entry Placement in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="13" testNumber="36556"/>
			<description>Entry Placement with type Name in StructureAttributesDict shall have one of values: Before, Start, Block, End, Inline</description>
			<test>PlacementHasTypeName != true || PlacementNameValue == "Block" || PlacementNameValue == "Before" || PlacementNameValue == "Start" || PlacementNameValue == "End" || PlacementNameValue == "Inline"</test>
			<error>
				<message>Entry Placement with type Name in StructureAttributesDict has incorrect value %2 instead of Before, Start, Block, End, Inline</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PlacementNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36557"/>
			<description>Entry Placement with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>PlacementHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Placement with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36558"/>
			<description>Entry Role in StructureAttributesDict shall have type Name</description>
			<test>containsRole == false || RoleHasTypeName == true</test>
			<error>
				<message>Entry Role in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36559"/>
			<description>Entry Role with type Name in StructureAttributesDict shall have one of values: rb, pb, tv, lb, cb</description>
			<test>RoleHasTypeName != true || RoleNameValue == "rb" || RoleNameValue == "cb" || RoleNameValue == "pb" || RoleNameValue == "tv" || RoleNameValue == "lb"</test>
			<error>
				<message>Entry Role with type Name in StructureAttributesDict has incorrect value %2 instead of rb, pb, tv, lb, cb</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RoleNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36560"/>
			<description>Entry Role with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == PrintField) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != Artifact)))</description>
			<test>RoleHasTypeName != true || ((ONameValue == "PrintField") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry Role with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == PrintField) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != Artifact)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36561"/>
			<description>Entry RowSpan in StructureAttributesDict shall have type Integer</description>
			<test>containsRowSpan == false || RowSpanHasTypeInteger == true</test>
			<error>
				<message>Entry RowSpan in StructureAttributesDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36562"/>
			<description>Entry RowSpan with type Integer in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</description>
			<test>RowSpanHasTypeInteger != true || ((ONameValue == "Table") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry RowSpan with type Integer in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36563"/>
			<description>Entry RubyAlign in StructureAttributesDict shall have type Name</description>
			<test>containsRubyAlign == false || RubyAlignHasTypeName == true</test>
			<error>
				<message>Entry RubyAlign in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36564"/>
			<description>Entry RubyAlign with type Name in StructureAttributesDict shall have one of values: Center, Start, End, Distribute, Justify</description>
			<test>RubyAlignHasTypeName != true || RubyAlignNameValue == "Start" || RubyAlignNameValue == "Center" || RubyAlignNameValue == "End" || RubyAlignNameValue == "Justify" || RubyAlignNameValue == "Distribute"</test>
			<error>
				<message>Entry RubyAlign with type Name in StructureAttributesDict has incorrect value %2 instead of Center, Start, End, Distribute, Justify</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RubyAlignNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36565"/>
			<description>Entry RubyAlign with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>RubyAlignHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry RubyAlign with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36566"/>
			<description>Entry RubyPosition in StructureAttributesDict shall have type Name</description>
			<test>containsRubyPosition == false || RubyPositionHasTypeName == true</test>
			<error>
				<message>Entry RubyPosition in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36567"/>
			<description>Entry RubyPosition with type Name in StructureAttributesDict shall have one of values: Before, Warichu, After, Inline</description>
			<test>RubyPositionHasTypeName != true || RubyPositionNameValue == "Before" || RubyPositionNameValue == "After" || RubyPositionNameValue == "Warichu" || RubyPositionNameValue == "Inline"</test>
			<error>
				<message>Entry RubyPosition with type Name in StructureAttributesDict has incorrect value %2 instead of Before, Warichu, After, Inline</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RubyPositionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36568"/>
			<description>Entry RubyPosition with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>RubyPositionHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry RubyPosition with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36569"/>
			<description>Entry Scope in StructureAttributesDict shall have type Name</description>
			<test>containsScope == false || ScopeHasTypeName == true</test>
			<error>
				<message>Entry Scope in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36570"/>
			<description>Entry Scope with type Name in StructureAttributesDict shall have one of values: Column, Row, Both</description>
			<test>ScopeHasTypeName != true || ScopeNameValue == "Row" || ScopeNameValue == "Column" || ScopeNameValue == "Both"</test>
			<error>
				<message>Entry Scope with type Name in StructureAttributesDict has incorrect value %2 instead of Column, Row, Both</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ScopeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36571"/>
			<description>Entry Scope with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</description>
			<test>ScopeHasTypeName != true || ((ONameValue == "Table") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry Scope with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36572"/>
			<description>Entry SpaceAfter in StructureAttributesDict shall have type Number</description>
			<test>containsSpaceAfter == false || SpaceAfterHasTypeNumber == true</test>
			<error>
				<message>Entry SpaceAfter in StructureAttributesDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36573"/>
			<description>Entry SpaceAfter with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>SpaceAfterHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry SpaceAfter with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36574"/>
			<description>Entry SpaceBefore in StructureAttributesDict shall have type Number</description>
			<test>containsSpaceBefore == false || SpaceBeforeHasTypeNumber == true</test>
			<error>
				<message>Entry SpaceBefore in StructureAttributesDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36575"/>
			<description>Entry SpaceBefore with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>SpaceBeforeHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry SpaceBefore with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36576"/>
			<description>Entry StartIndent in StructureAttributesDict shall have type Number</description>
			<test>containsStartIndent == false || StartIndentHasTypeNumber == true</test>
			<error>
				<message>Entry StartIndent in StructureAttributesDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36577"/>
			<description>Entry StartIndent with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>StartIndentHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry StartIndent with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36578"/>
			<description>Entry TBorderStyle with type Array in StructureAttributesDict shall be object ArrayOf_4BorderStyleNames</description>
			<test>TBorderStyleHasTypeArray != true || TBorderStyle_size == 1</test>
			<error>
				<message>Entry TBorderStyle with type Array in StructureAttributesDict is not object ArrayOf_4BorderStyleNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36579"/>
			<description>Entry TBorderStyle in StructureAttributesDict shall have one of types: Array, Name</description>
			<test>containsTBorderStyle == false || TBorderStyleHasTypeArray == true || TBorderStyleHasTypeName == true</test>
			<error>
				<message>Entry TBorderStyle in StructureAttributesDict is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36580"/>
			<description>Entry TBorderStyle with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TBorderStyleHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TBorderStyle with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36581"/>
			<description>Entry TBorderStyle with type Name in StructureAttributesDict shall have one of values: Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</description>
			<test>TBorderStyleHasTypeName != true || TBorderStyleNameValue == "None" || TBorderStyleNameValue == "Hidden" || TBorderStyleNameValue == "Dotted" || TBorderStyleNameValue == "Dashed" || TBorderStyleNameValue == "Solid" || TBorderStyleNameValue == "Double" || TBorderStyleNameValue == "Groove" || TBorderStyleNameValue == "Ridge" || TBorderStyleNameValue == "Inset" || TBorderStyleNameValue == "Outset"</test>
			<error>
				<message>Entry TBorderStyle with type Name in StructureAttributesDict has incorrect value %2 instead of Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TBorderStyleNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36582"/>
			<description>Entry TBorderStyle with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TBorderStyleHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TBorderStyle with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36583"/>
			<description>Entry TPadding with type Array in StructureAttributesDict shall be object ArrayOf_4Integers</description>
			<test>TPaddingHasTypeArray != true || TPadding_size == 1</test>
			<error>
				<message>Entry TPadding with type Array in StructureAttributesDict is not object ArrayOf_4Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36584"/>
			<description>Entry TPadding in StructureAttributesDict shall have one of types: Array, Integer</description>
			<test>containsTPadding == false || TPaddingHasTypeArray == true || TPaddingHasTypeInteger == true</test>
			<error>
				<message>Entry TPadding in StructureAttributesDict is not one of types: Array, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36585"/>
			<description>Entry TPadding with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TPaddingHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TPadding with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36586"/>
			<description>Entry TPadding with type Integer in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TPaddingHasTypeInteger != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TPadding with type Integer in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36587"/>
			<description>Entry TextAlign in StructureAttributesDict shall have type Name</description>
			<test>containsTextAlign == false || TextAlignHasTypeName == true</test>
			<error>
				<message>Entry TextAlign in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36588"/>
			<description>Entry TextAlign with type Name in StructureAttributesDict shall have one of values: Center, Start, End, Justify</description>
			<test>TextAlignHasTypeName != true || TextAlignNameValue == "Start" || TextAlignNameValue == "Center" || TextAlignNameValue == "End" || TextAlignNameValue == "Justify"</test>
			<error>
				<message>Entry TextAlign with type Name in StructureAttributesDict has incorrect value %2 instead of Center, Start, End, Justify</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TextAlignNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36589"/>
			<description>Entry TextAlign with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TextAlignHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TextAlign with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="17" testNumber="36590"/>
			<description>Entry TextDecorationColor with type Array in StructureAttributesDict shall be object ArrayOf_3RGBNumbers</description>
			<test>TextDecorationColorHasTypeArray != true || TextDecorationColor_size == 1</test>
			<error>
				<message>Entry TextDecorationColor with type Array in StructureAttributesDict is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36591"/>
			<description>Entry TextDecorationColor in StructureAttributesDict shall have type Array</description>
			<test>containsTextDecorationColor == false || TextDecorationColorHasTypeArray == true</test>
			<error>
				<message>Entry TextDecorationColor in StructureAttributesDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36592"/>
			<description>Entry TextDecorationColor with type Array in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TextDecorationColorHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TextDecorationColor with type Array in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36593"/>
			<description>Entry TextDecorationThickness in StructureAttributesDict shall have type Number</description>
			<test>containsTextDecorationThickness == false || TextDecorationThicknessHasTypeNumber == true</test>
			<error>
				<message>Entry TextDecorationThickness in StructureAttributesDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36594"/>
			<description>Entry TextDecorationThickness with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TextDecorationThicknessHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TextDecorationThickness with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36595"/>
			<description>Entry TextDecorationType in StructureAttributesDict shall have type Name</description>
			<test>containsTextDecorationType == false || TextDecorationTypeHasTypeName == true</test>
			<error>
				<message>Entry TextDecorationType in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36596"/>
			<description>Entry TextDecorationType with type Name in StructureAttributesDict shall have one of values: LineThrough, Overline, Underline, None</description>
			<test>TextDecorationTypeHasTypeName != true || TextDecorationTypeNameValue == "None" || TextDecorationTypeNameValue == "Underline" || TextDecorationTypeNameValue == "Overline" || TextDecorationTypeNameValue == "LineThrough"</test>
			<error>
				<message>Entry TextDecorationType with type Name in StructureAttributesDict has incorrect value %2 instead of LineThrough, Overline, Underline, None</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TextDecorationTypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36597"/>
			<description>Entry TextDecorationType with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TextDecorationTypeHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TextDecorationType with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36598"/>
			<description>Entry TextIndent in StructureAttributesDict shall have type Number</description>
			<test>containsTextIndent == false || TextIndentHasTypeNumber == true</test>
			<error>
				<message>Entry TextIndent in StructureAttributesDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36599"/>
			<description>Entry TextIndent with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TextIndentHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TextIndent with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36600"/>
			<description>Entry Type in StructureAttributesDict shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36601"/>
			<description>Entry Type with type Name in StructureAttributesDict shall have one of values: Pagination, Layout, Page</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pagination" || TypeNameValue == "Layout" || TypeNameValue == "Page"</test>
			<error>
				<message>Entry Type with type Name in StructureAttributesDict has incorrect value %2 instead of Pagination, Layout, Page</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36602"/>
			<description>Entry Type with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Artifact) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TypeHasTypeName != true || ((ONameValue == "Artifact") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Type with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Artifact) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36603"/>
			<description>Entry Width in StructureAttributesDict shall have one of types: Number, Name</description>
			<test>containsWidth == false || WidthHasTypeNumber == true || WidthHasTypeName == true</test>
			<error>
				<message>Entry Width in StructureAttributesDict is not one of types: Number, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36604"/>
			<description>Entry Width with type Number in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>WidthHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Width with type Number in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36605"/>
			<description>Entry Width with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>WidthHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Width with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="36606"/>
			<description>Entry WritingMode in StructureAttributesDict shall have type Name</description>
			<test>containsWritingMode == false || WritingModeHasTypeName == true</test>
			<error>
				<message>Entry WritingMode in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="6" testNumber="36607"/>
			<description>Entry WritingMode with type Name in StructureAttributesDict shall have one of values: LrTb, RlTb, TbRl</description>
			<test>WritingModeHasTypeName != true || WritingModeNameValue == "LrTb" || WritingModeNameValue == "RlTb" || WritingModeNameValue == "TbRl"</test>
			<error>
				<message>Entry WritingMode with type Name in StructureAttributesDict has incorrect value %2 instead of LrTb, RlTb, TbRl</message>
				<arguments>
					<argument>keyName</argument>
					<argument>WritingModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="36608"/>
			<description>Entry WritingMode with type Name in StructureAttributesDict shall satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>WritingModeHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry WritingMode with type Name in StructureAttributesDict does not satisfy special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStyleDict">
			<id specification="ISO_32000_1_5" clause="1" testNumber="37037"/>
			<description>StyleDict shall not contain entries except Panose</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Panose').length == 0</test>
			<error>
				<message>StyleDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Panose').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStyleDict">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37038"/>
			<description>Entry Panose in StyleDict shall have type StringByte</description>
			<test>containsPanose == false || PanoseHasTypeStringByte == true</test>
			<error>
				<message>Entry Panose in StyleDict is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStyleDict">
			<id specification="ISO_32000_1_5" clause="9" testNumber="37039"/>
			<description>Entry Panose with type StringByte in StyleDict shall satisfy special case: fn:Eval(fn:StringLength(Panose) == 12)</description>
			<test>PanoseHasTypeStringByte != true || (PanoseStringSize == 12)</test>
			<error>
				<message>Entry Panose with type StringByte in StyleDict does not satisfy special case: fn:Eval(fn:StringLength(Panose) == 12)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_5" clause="1" testNumber="37129"/>
			<description>Thread shall not contain entries except F, I, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'I' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>Thread contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'I' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_5" clause="17" testNumber="37130"/>
			<description>Entry F with type Dictionary in Thread shall be object BeadFirst</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in Thread is not object BeadFirst</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37131"/>
			<description>Entry F in Thread shall have type Dictionary</description>
			<test>containsF == false || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in Thread is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_5" clause="7" testNumber="37132"/>
			<description>Entry F in Thread is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in Thread is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_5" clause="10" testNumber="37133"/>
			<description>Entry F with type Dictionary in Thread shall be indirect</description>
			<test>FHasTypeDictionary != true || isFIndirect == true</test>
			<error>
				<message>Entry F with type Dictionary in Thread is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_5" clause="17" testNumber="37134"/>
			<description>Entry I with type Dictionary in Thread shall be object DocInfo</description>
			<test>IHasTypeDictionary != true || I_size == 1</test>
			<error>
				<message>Entry I with type Dictionary in Thread is not object DocInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37135"/>
			<description>Entry I in Thread shall have type Dictionary</description>
			<test>containsI == false || IHasTypeDictionary == true</test>
			<error>
				<message>Entry I in Thread is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37136"/>
			<description>Entry Type in Thread shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Thread is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37137"/>
			<description>Entry Type with type Name in Thread shall have value Thread</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Thread"</test>
			<error>
				<message>Entry Type with type Name in Thread has incorrect value %2 instead of Thread</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="1" testNumber="37298"/>
			<description>Thumbnail shall not contain entries except BitsPerComponent, ColorSpace, DL, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Height, Length, Subtype, Type, Width</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width').length == 0</test>
			<error>
				<message>Thumbnail contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37299"/>
			<description>Entry BitsPerComponent in Thumbnail shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in Thumbnail is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="7" testNumber="37300"/>
			<description>Entry BitsPerComponent in Thumbnail is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in Thumbnail is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37301"/>
			<description>Entry BitsPerComponent with type Integer in Thumbnail shall have one of values: 1, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in Thumbnail has incorrect value %2 instead of 1, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="17" testNumber="37302"/>
			<description>Entry ColorSpace with type Array in Thumbnail shall be object IndexedColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in Thumbnail is not object IndexedColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37303"/>
			<description>Entry ColorSpace in Thumbnail shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in Thumbnail is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="7" testNumber="37304"/>
			<description>Entry ColorSpace in Thumbnail is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in Thumbnail is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37305"/>
			<description>Entry ColorSpace with type Name in Thumbnail shall have one of values: DeviceGray, DeviceRGB</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in Thumbnail has incorrect value %2 instead of DeviceGray, DeviceRGB</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37306"/>
			<description>Entry DL in Thumbnail shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in Thumbnail is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="9" testNumber="37307"/>
			<description>Entry DL with type Integer in Thumbnail shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in Thumbnail does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="17" testNumber="37308"/>
			<description>Entry Decode with type Array in Thumbnail shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in Thumbnail is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37309"/>
			<description>Entry Decode in Thumbnail shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in Thumbnail is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="17" testNumber="37310"/>
			<description>Entry DecodeParms with type Array in Thumbnail shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in Thumbnail is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="17" testNumber="37311"/>
			<description>Entry DecodeParms with type Dictionary in Thumbnail shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in Thumbnail is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37312"/>
			<description>Entry DecodeParms in Thumbnail shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in Thumbnail is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="9" testNumber="37313"/>
			<description>Entry DecodeParms with type Array in Thumbnail shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in Thumbnail does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="17" testNumber="37314"/>
			<description>Entry F with type Dictionary in Thumbnail shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in Thumbnail is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37315"/>
			<description>Entry F in Thumbnail shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in Thumbnail is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="17" testNumber="37316"/>
			<description>Entry FDecodeParms with type Array in Thumbnail shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in Thumbnail is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="17" testNumber="37317"/>
			<description>Entry FDecodeParms with type Dictionary in Thumbnail shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in Thumbnail is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37318"/>
			<description>Entry FDecodeParms in Thumbnail shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in Thumbnail is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="9" testNumber="37319"/>
			<description>Entry FDecodeParms with type Array in Thumbnail shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in Thumbnail does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="17" testNumber="37320"/>
			<description>Entry FFilter with type Array in Thumbnail shall be object ArrayOfFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in Thumbnail is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37321"/>
			<description>Entry FFilter in Thumbnail shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in Thumbnail is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="9" testNumber="37322"/>
			<description>Entry FFilter with type Array in Thumbnail shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in Thumbnail does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37323"/>
			<description>Entry FFilter with type Name in Thumbnail shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "JBIG2Decode" || FFilterNameValue == "DCTDecode" || FFilterNameValue == "JPXDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in Thumbnail has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="17" testNumber="37324"/>
			<description>Entry Filter with type Array in Thumbnail shall be object ArrayOfFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in Thumbnail is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37325"/>
			<description>Entry Filter in Thumbnail shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in Thumbnail is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="9" testNumber="37326"/>
			<description>Entry Filter with type Array in Thumbnail shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in Thumbnail does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37327"/>
			<description>Entry Filter with type Name in Thumbnail shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "JBIG2Decode" || FilterNameValue == "DCTDecode" || FilterNameValue == "JPXDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in Thumbnail has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37328"/>
			<description>Entry Height in Thumbnail shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in Thumbnail is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="7" testNumber="37329"/>
			<description>Entry Height in Thumbnail is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in Thumbnail is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37330"/>
			<description>Entry Length in Thumbnail shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in Thumbnail is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="7" testNumber="37331"/>
			<description>Entry Length in Thumbnail is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in Thumbnail is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37332"/>
			<description>Entry Subtype in Thumbnail shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in Thumbnail is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37333"/>
			<description>Entry Subtype with type Name in Thumbnail shall have value Image</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Image"</test>
			<error>
				<message>Entry Subtype with type Name in Thumbnail has incorrect value %2 instead of Image</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37334"/>
			<description>Entry Type in Thumbnail shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Thumbnail is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37335"/>
			<description>Entry Type with type Name in Thumbnail shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in Thumbnail has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37336"/>
			<description>Entry Width in Thumbnail shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in Thumbnail is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_5" clause="7" testNumber="37337"/>
			<description>Entry Width in Thumbnail is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in Thumbnail is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_5" clause="1" testNumber="37476"/>
			<description>Timespan shall not contain entries except S, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>Timespan contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37477"/>
			<description>Entry S in Timespan shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in Timespan is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_5" clause="7" testNumber="37478"/>
			<description>Entry S in Timespan is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in Timespan is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37479"/>
			<description>Entry S with type Name in Timespan shall have value S</description>
			<test>SHasTypeName != true || SNameValue == "S"</test>
			<error>
				<message>Entry S with type Name in Timespan has incorrect value %2 instead of S</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37480"/>
			<description>Entry Type in Timespan shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Timespan is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37481"/>
			<description>Entry Type with type Name in Timespan shall have value Timespan</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Timespan"</test>
			<error>
				<message>Entry Type with type Name in Timespan has incorrect value %2 instead of Timespan</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37482"/>
			<description>Entry V in Timespan shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in Timespan is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_5" clause="7" testNumber="37483"/>
			<description>Entry V in Timespan is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in Timespan is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrailerIDArray">
			<id specification="ISO_32000_1_5" clause="2" testNumber="37528"/>
			<description>TrailerIDArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>TrailerIDArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrailerIDArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37529"/>
			<description>Entry 0 in TrailerIDArray shall have type StringByte</description>
			<test>size &lt;= 0 || entry0HasTypeStringByte == true</test>
			<error>
				<message>Entry 0 in TrailerIDArray is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrailerIDArray">
			<id specification="ISO_32000_1_5" clause="16" testNumber="37530"/>
			<description>If entry 0 with type StringByte in TrailerIDArray satisfies condition fn:MustBeDirect(fn:IsPresent(trailer::Encrypt)), it shall be direct</description>
			<test>entry0HasTypeStringByte != true || (isentry0Indirect == false || ((containstrailerEncrypt == true)) == false)</test>
			<error>
				<message>Entry 0 with type StringByte in TrailerIDArray is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrailerIDArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37531"/>
			<description>Entry 1 in TrailerIDArray shall have type StringByte</description>
			<test>size &lt;= 1 || entry1HasTypeStringByte == true</test>
			<error>
				<message>Entry 1 in TrailerIDArray is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrailerIDArray">
			<id specification="ISO_32000_1_5" clause="16" testNumber="37532"/>
			<description>If entry 1 with type StringByte in TrailerIDArray satisfies condition fn:MustBeDirect(fn:IsPresent(trailer::Encrypt)), it shall be direct</description>
			<test>entry1HasTypeStringByte != true || (isentry1Indirect == false || ((containstrailerEncrypt == true)) == false)</test>
			<error>
				<message>Entry 1 with type StringByte in TrailerIDArray is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_5" clause="1" testNumber="37612"/>
			<description>Transition shall not contain entries except B, D, Di, Dm, M, S, SS, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'D' &amp;&amp; elem != 'Di' &amp;&amp; elem != 'Dm' &amp;&amp; elem != 'M' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SS' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>Transition contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'D' &amp;&amp; elem != 'Di' &amp;&amp; elem != 'Dm' &amp;&amp; elem != 'M' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SS' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37613"/>
			<description>Entry B in Transition shall have type Boolean</description>
			<test>containsB == false || BHasTypeBoolean == true</test>
			<error>
				<message>Entry B in Transition is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37614"/>
			<description>Entry D in Transition shall have type Number</description>
			<test>containsD == false || DHasTypeNumber == true</test>
			<error>
				<message>Entry D in Transition is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_5" clause="14" testNumber="37615"/>
			<description>Entry D with type Number in Transition shall satisfy possible value predicate: fn:Eval(@D &gt;= 0)</description>
			<test>DHasTypeNumber != true || DNumberValue &gt;= 0</test>
			<error>
				<message>Entry D with type Number in Transition does not satisfy possible value predicate: fn:Eval(@D &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37616"/>
			<description>Entry Di in Transition shall have one of types: Integer, Name</description>
			<test>containsDi == false || DiHasTypeInteger == true || DiHasTypeName == true</test>
			<error>
				<message>Entry Di in Transition is not one of types: Integer, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37617"/>
			<description>Entry Di with type Integer in Transition shall have one of values: 0, 90, 315, 180, 270</description>
			<test>DiHasTypeInteger != true || DiIntegerValue == 0 || DiIntegerValue == 90 || DiIntegerValue == 180 || DiIntegerValue == 270 || DiIntegerValue == 315</test>
			<error>
				<message>Entry Di with type Integer in Transition has incorrect value %2 instead of 0, 90, 315, 180, 270</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DiIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_5" clause="9" testNumber="37618"/>
			<description>Entry Di with type Integer in Transition shall satisfy special case: fn:Eval((((@Di == 90) || (@Di == 180)) &amp;&amp; (@S == Wipe)) || ((@Di == 315) &amp;&amp; (@S == Glitter)))</description>
			<test>DiHasTypeInteger != true || ((((DiIntegerValue == 90) || (DiIntegerValue == 180)) &amp;&amp; (SNameValue == "Wipe")) || ((DiIntegerValue == 315) &amp;&amp; (SNameValue == "Glitter")))</test>
			<error>
				<message>Entry Di with type Integer in Transition does not satisfy special case: fn:Eval((((@Di == 90) || (@Di == 180)) &amp;&amp; (@S == Wipe)) || ((@Di == 315) &amp;&amp; (@S == Glitter)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37619"/>
			<description>Entry Di with type Name in Transition shall have value None</description>
			<test>DiHasTypeName != true || DiNameValue == "None"</test>
			<error>
				<message>Entry Di with type Name in Transition has incorrect value %2 instead of None</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DiNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_5" clause="9" testNumber="37620"/>
			<description>Entry Di with type Name in Transition shall satisfy special case: fn:Eval(((@Di == None) &amp;&amp; (@S == Fly) &amp;&amp; fn:SinceVersion(1.5 , (@SS != 1.0))))</description>
			<test>DiHasTypeName != true || (((DiNameValue == "None") &amp;&amp; (SNameValue == "Fly") &amp;&amp; (SSNumberValue != 1.0)))</test>
			<error>
				<message>Entry Di with type Name in Transition does not satisfy special case: fn:Eval(((@Di == None) &amp;&amp; (@S == Fly) &amp;&amp; fn:SinceVersion(1.5 , (@SS != 1.0))))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37621"/>
			<description>Entry Dm in Transition shall have type Name</description>
			<test>containsDm == false || DmHasTypeName == true</test>
			<error>
				<message>Entry Dm in Transition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37622"/>
			<description>Entry Dm with type Name in Transition shall have one of values: V, H</description>
			<test>DmHasTypeName != true || DmNameValue == "H" || DmNameValue == "V"</test>
			<error>
				<message>Entry Dm with type Name in Transition has incorrect value %2 instead of V, H</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DmNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37623"/>
			<description>Entry M in Transition shall have type Name</description>
			<test>containsM == false || MHasTypeName == true</test>
			<error>
				<message>Entry M in Transition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37624"/>
			<description>Entry M with type Name in Transition shall have one of values: I, O</description>
			<test>MHasTypeName != true || MNameValue == "I" || MNameValue == "O"</test>
			<error>
				<message>Entry M with type Name in Transition has incorrect value %2 instead of I, O</message>
				<arguments>
					<argument>keyName</argument>
					<argument>MNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37625"/>
			<description>Entry S in Transition shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in Transition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37626"/>
			<description>Entry S with type Name in Transition shall have one of values: Uncover, Glitter, R, Fly, Cover, Dissolve, Box, Split, Push, Blinds, Fade, Wipe</description>
			<test>SHasTypeName != true || SNameValue == "Split" || SNameValue == "Blinds" || SNameValue == "Box" || SNameValue == "Wipe" || SNameValue == "Dissolve" || SNameValue == "Glitter" || SNameValue == "R" || SNameValue == "Fly" || SNameValue == "Push" || SNameValue == "Cover" || SNameValue == "Uncover" || SNameValue == "Fade"</test>
			<error>
				<message>Entry S with type Name in Transition has incorrect value %2 instead of Uncover, Glitter, R, Fly, Cover, Dissolve, Box, Split, Push, Blinds, Fade, Wipe</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37627"/>
			<description>Entry SS in Transition shall have type Number</description>
			<test>containsSS == false || SSHasTypeNumber == true</test>
			<error>
				<message>Entry SS in Transition is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37628"/>
			<description>Entry Type in Transition shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Transition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37629"/>
			<description>Entry Type with type Name in Transition shall have value Trans</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Trans"</test>
			<error>
				<message>Entry Type with type Name in Transition has incorrect value %2 instead of Trans</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrapRegion">
			<id specification="ISO_32000_1_5" clause="1" testNumber="37694"/>
			<description>TrapRegion shall not contain entries except TP, TZ</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'TP' &amp;&amp; elem != 'TZ').length == 0</test>
			<error>
				<message>TrapRegion contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'TP' &amp;&amp; elem != 'TZ').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrapRegion">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37695"/>
			<description>Entry TP in TrapRegion shall have type Name</description>
			<test>containsTP == false || TPHasTypeName == true</test>
			<error>
				<message>Entry TP in TrapRegion is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrapRegion">
			<id specification="ISO_32000_1_5" clause="7" testNumber="37696"/>
			<description>Entry TP in TrapRegion is required</description>
			<test>containsTP == true</test>
			<error>
				<message>Entry TP in TrapRegion is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrapRegion">
			<id specification="ISO_32000_1_5" clause="17" testNumber="37697"/>
			<description>Entry TZ with type Array in TrapRegion shall be object ArrayOf_ArrayOfNumbers</description>
			<test>TZHasTypeArray != true || TZ_size == 1</test>
			<error>
				<message>Entry TZ with type Array in TrapRegion is not object ArrayOf_ArrayOfNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrapRegion">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37698"/>
			<description>Entry TZ in TrapRegion shall have type Array</description>
			<test>containsTZ == false || TZHasTypeArray == true</test>
			<error>
				<message>Entry TZ in TrapRegion is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURI">
			<id specification="ISO_32000_1_5" clause="1" testNumber="37722"/>
			<description>URI shall not contain entries except Base</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Base').length == 0</test>
			<error>
				<message>URI contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Base').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURI">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37723"/>
			<description>Entry Base in URI shall have type StringAscii</description>
			<test>containsBase == false || BaseHasTypeStringAscii == true</test>
			<error>
				<message>Entry Base in URI is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_5" clause="1" testNumber="37742"/>
			<description>URLAlias shall not contain entries except C, U</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'U').length == 0</test>
			<error>
				<message>URLAlias contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'U').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_5" clause="17" testNumber="37743"/>
			<description>Entry C with type Array in URLAlias shall be object ArrayOfArraysURLStrings</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in URLAlias is not object ArrayOfArraysURLStrings</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37744"/>
			<description>Entry C in URLAlias shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in URLAlias is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_5" clause="9" testNumber="37745"/>
			<description>Entry C with type Array in URLAlias shall satisfy special case: fn:Eval(fn:ArrayLength(C) &gt;= 1)</description>
			<test>CHasTypeArray != true || (CArraySize &gt;= 1)</test>
			<error>
				<message>Entry C with type Array in URLAlias does not satisfy special case: fn:Eval(fn:ArrayLength(C) &gt;= 1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37746"/>
			<description>Entry U in URLAlias shall have type StringAscii</description>
			<test>containsU == false || UHasTypeStringAscii == true</test>
			<error>
				<message>Entry U in URLAlias is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_5" clause="7" testNumber="37747"/>
			<description>Entry U in URLAlias is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in URLAlias is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamAnnotsArrayEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37766"/>
			<description>Entry in URTransformParamAnnotsArray shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in URTransformParamAnnotsArray is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamAnnotsArrayEntry">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37767"/>
			<description>Entry with type Name in URTransformParamAnnotsArray shall have one of values: Delete, Import, Copy, Create, Export, Modify, SummaryView, Online</description>
			<test>HasTypeName != true || NameValue == "Create" || NameValue == "Delete" || NameValue == "Modify" || NameValue == "Copy" || NameValue == "Import" || NameValue == "Export" || NameValue == "Online" || NameValue == "SummaryView"</test>
			<error>
				<message>Entry %1 with type Name in URTransformParamAnnotsArray has incorrect value %2 instead of Delete, Import, Copy, Create, Export, Modify, SummaryView, Online</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamDocumentArrayEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37774"/>
			<description>Entry in URTransformParamDocumentArray shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in URTransformParamDocumentArray is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamDocumentArrayEntry">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37775"/>
			<description>Entry with type Name in URTransformParamDocumentArray shall have value FullSave</description>
			<test>HasTypeName != true || NameValue == "FullSave"</test>
			<error>
				<message>Entry %1 with type Name in URTransformParamDocumentArray has incorrect value %2 instead of FullSave</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamFormArrayEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37788"/>
			<description>Entry in URTransformParamFormArray shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in URTransformParamFormArray is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamFormArrayEntry">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37789"/>
			<description>Entry with type Name in URTransformParamFormArray shall have one of values: Add, Delete, Import, BarcodePlaintext, FillIn, Export, SubmitStandalone, Online, SpawnTemplate</description>
			<test>HasTypeName != true || NameValue == "Add" || NameValue == "Delete" || NameValue == "FillIn" || NameValue == "Import" || NameValue == "Export" || NameValue == "SubmitStandalone" || NameValue == "SpawnTemplate" || NameValue == "BarcodePlaintext" || NameValue == "Online"</test>
			<error>
				<message>Entry %1 with type Name in URTransformParamFormArray has incorrect value %2 instead of Add, Delete, Import, BarcodePlaintext, FillIn, Export, SubmitStandalone, Online, SpawnTemplate</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamSignatureArrayEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37796"/>
			<description>Entry in URTransformParamSignatureArray shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in URTransformParamSignatureArray is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamSignatureArrayEntry">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37797"/>
			<description>Entry with type Name in URTransformParamSignatureArray shall have value Modify</description>
			<test>HasTypeName != true || NameValue == "Modify"</test>
			<error>
				<message>Entry %1 with type Name in URTransformParamSignatureArray has incorrect value %2 instead of Modify</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_5" clause="1" testNumber="37804"/>
			<description>URTransformParameters shall not contain entries except Annots, Document, Form, Msg, Signature, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Annots' &amp;&amp; elem != 'Document' &amp;&amp; elem != 'Form' &amp;&amp; elem != 'Msg' &amp;&amp; elem != 'Signature' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>URTransformParameters contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Annots' &amp;&amp; elem != 'Document' &amp;&amp; elem != 'Form' &amp;&amp; elem != 'Msg' &amp;&amp; elem != 'Signature' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_5" clause="17" testNumber="37805"/>
			<description>Entry Annots with type Array in URTransformParameters shall be object URTransformParamAnnotsArray</description>
			<test>AnnotsHasTypeArray != true || Annots_size == 1</test>
			<error>
				<message>Entry Annots with type Array in URTransformParameters is not object URTransformParamAnnotsArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37806"/>
			<description>Entry Annots in URTransformParameters shall have type Array</description>
			<test>containsAnnots == false || AnnotsHasTypeArray == true</test>
			<error>
				<message>Entry Annots in URTransformParameters is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_5" clause="17" testNumber="37807"/>
			<description>Entry Document with type Array in URTransformParameters shall be object URTransformParamDocumentArray</description>
			<test>DocumentHasTypeArray != true || Document_size == 1</test>
			<error>
				<message>Entry Document with type Array in URTransformParameters is not object URTransformParamDocumentArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37808"/>
			<description>Entry Document in URTransformParameters shall have type Array</description>
			<test>containsDocument == false || DocumentHasTypeArray == true</test>
			<error>
				<message>Entry Document in URTransformParameters is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_5" clause="17" testNumber="37809"/>
			<description>Entry Form with type Array in URTransformParameters shall be object URTransformParamFormArray</description>
			<test>FormHasTypeArray != true || Form_size == 1</test>
			<error>
				<message>Entry Form with type Array in URTransformParameters is not object URTransformParamFormArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37810"/>
			<description>Entry Form in URTransformParameters shall have type Array</description>
			<test>containsForm == false || FormHasTypeArray == true</test>
			<error>
				<message>Entry Form in URTransformParameters is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37811"/>
			<description>Entry Msg in URTransformParameters shall have type StringText</description>
			<test>containsMsg == false || MsgHasTypeStringText == true</test>
			<error>
				<message>Entry Msg in URTransformParameters is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_5" clause="17" testNumber="37812"/>
			<description>Entry Signature with type Array in URTransformParameters shall be object URTransformParamSignatureArray</description>
			<test>SignatureHasTypeArray != true || Signature_size == 1</test>
			<error>
				<message>Entry Signature with type Array in URTransformParameters is not object URTransformParamSignatureArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37813"/>
			<description>Entry Signature in URTransformParameters shall have type Array</description>
			<test>containsSignature == false || SignatureHasTypeArray == true</test>
			<error>
				<message>Entry Signature in URTransformParameters is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37814"/>
			<description>Entry Type in URTransformParameters shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in URTransformParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37815"/>
			<description>Entry Type with type Name in URTransformParameters shall have value TransformParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "TransformParams"</test>
			<error>
				<message>Entry Type with type Name in URTransformParameters has incorrect value %2 instead of TransformParams</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37816"/>
			<description>Entry V in URTransformParameters shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in URTransformParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_5" clause="1" testNumber="37971"/>
			<description>ViewerPreferences shall not contain entries except CenterWindow, Direction, DisplayDocTitle, FitWindow, HideMenubar, HideToolbar, HideWindowUI, NonFullScreenPageMode, PrintArea, PrintClip, ViewArea, ViewClip</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CenterWindow' &amp;&amp; elem != 'Direction' &amp;&amp; elem != 'DisplayDocTitle' &amp;&amp; elem != 'FitWindow' &amp;&amp; elem != 'HideMenubar' &amp;&amp; elem != 'HideToolbar' &amp;&amp; elem != 'HideWindowUI' &amp;&amp; elem != 'NonFullScreenPageMode' &amp;&amp; elem != 'PrintArea' &amp;&amp; elem != 'PrintClip' &amp;&amp; elem != 'ViewArea' &amp;&amp; elem != 'ViewClip').length == 0</test>
			<error>
				<message>ViewerPreferences contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CenterWindow' &amp;&amp; elem != 'Direction' &amp;&amp; elem != 'DisplayDocTitle' &amp;&amp; elem != 'FitWindow' &amp;&amp; elem != 'HideMenubar' &amp;&amp; elem != 'HideToolbar' &amp;&amp; elem != 'HideWindowUI' &amp;&amp; elem != 'NonFullScreenPageMode' &amp;&amp; elem != 'PrintArea' &amp;&amp; elem != 'PrintClip' &amp;&amp; elem != 'ViewArea' &amp;&amp; elem != 'ViewClip').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37972"/>
			<description>Entry CenterWindow in ViewerPreferences shall have type Boolean</description>
			<test>containsCenterWindow == false || CenterWindowHasTypeBoolean == true</test>
			<error>
				<message>Entry CenterWindow in ViewerPreferences is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37973"/>
			<description>Entry Direction in ViewerPreferences shall have type Name</description>
			<test>containsDirection == false || DirectionHasTypeName == true</test>
			<error>
				<message>Entry Direction in ViewerPreferences is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37974"/>
			<description>Entry Direction with type Name in ViewerPreferences shall have one of values: L2R, R2L</description>
			<test>DirectionHasTypeName != true || DirectionNameValue == "L2R" || DirectionNameValue == "R2L"</test>
			<error>
				<message>Entry Direction with type Name in ViewerPreferences has incorrect value %2 instead of L2R, R2L</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DirectionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37975"/>
			<description>Entry DisplayDocTitle in ViewerPreferences shall have type Boolean</description>
			<test>containsDisplayDocTitle == false || DisplayDocTitleHasTypeBoolean == true</test>
			<error>
				<message>Entry DisplayDocTitle in ViewerPreferences is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37976"/>
			<description>Entry FitWindow in ViewerPreferences shall have type Boolean</description>
			<test>containsFitWindow == false || FitWindowHasTypeBoolean == true</test>
			<error>
				<message>Entry FitWindow in ViewerPreferences is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37977"/>
			<description>Entry HideMenubar in ViewerPreferences shall have type Boolean</description>
			<test>containsHideMenubar == false || HideMenubarHasTypeBoolean == true</test>
			<error>
				<message>Entry HideMenubar in ViewerPreferences is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37978"/>
			<description>Entry HideToolbar in ViewerPreferences shall have type Boolean</description>
			<test>containsHideToolbar == false || HideToolbarHasTypeBoolean == true</test>
			<error>
				<message>Entry HideToolbar in ViewerPreferences is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37979"/>
			<description>Entry HideWindowUI in ViewerPreferences shall have type Boolean</description>
			<test>containsHideWindowUI == false || HideWindowUIHasTypeBoolean == true</test>
			<error>
				<message>Entry HideWindowUI in ViewerPreferences is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37980"/>
			<description>Entry NonFullScreenPageMode in ViewerPreferences shall have type Name</description>
			<test>containsNonFullScreenPageMode == false || NonFullScreenPageModeHasTypeName == true</test>
			<error>
				<message>Entry NonFullScreenPageMode in ViewerPreferences is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37981"/>
			<description>Entry NonFullScreenPageMode with type Name in ViewerPreferences shall have one of values: UseOutlines, UseThumbs, UseOC, UseNone</description>
			<test>NonFullScreenPageModeHasTypeName != true || NonFullScreenPageModeNameValue == "UseNone" || NonFullScreenPageModeNameValue == "UseOutlines" || NonFullScreenPageModeNameValue == "UseThumbs" || NonFullScreenPageModeNameValue == "UseOC"</test>
			<error>
				<message>Entry NonFullScreenPageMode with type Name in ViewerPreferences has incorrect value %2 instead of UseOutlines, UseThumbs, UseOC, UseNone</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NonFullScreenPageModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37982"/>
			<description>Entry PrintArea in ViewerPreferences shall have type Name</description>
			<test>containsPrintArea == false || PrintAreaHasTypeName == true</test>
			<error>
				<message>Entry PrintArea in ViewerPreferences is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37983"/>
			<description>Entry PrintArea with type Name in ViewerPreferences shall have one of values: CropBox, BleedBox, TrimBox, MediaBox, ArtBox</description>
			<test>PrintAreaHasTypeName != true || PrintAreaNameValue == "MediaBox" || PrintAreaNameValue == "CropBox" || PrintAreaNameValue == "BleedBox" || PrintAreaNameValue == "TrimBox" || PrintAreaNameValue == "ArtBox"</test>
			<error>
				<message>Entry PrintArea with type Name in ViewerPreferences has incorrect value %2 instead of CropBox, BleedBox, TrimBox, MediaBox, ArtBox</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PrintAreaNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37984"/>
			<description>Entry PrintClip in ViewerPreferences shall have type Name</description>
			<test>containsPrintClip == false || PrintClipHasTypeName == true</test>
			<error>
				<message>Entry PrintClip in ViewerPreferences is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37985"/>
			<description>Entry PrintClip with type Name in ViewerPreferences shall have one of values: CropBox, BleedBox, TrimBox, MediaBox, ArtBox</description>
			<test>PrintClipHasTypeName != true || PrintClipNameValue == "MediaBox" || PrintClipNameValue == "CropBox" || PrintClipNameValue == "BleedBox" || PrintClipNameValue == "TrimBox" || PrintClipNameValue == "ArtBox"</test>
			<error>
				<message>Entry PrintClip with type Name in ViewerPreferences has incorrect value %2 instead of CropBox, BleedBox, TrimBox, MediaBox, ArtBox</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PrintClipNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37986"/>
			<description>Entry ViewArea in ViewerPreferences shall have type Name</description>
			<test>containsViewArea == false || ViewAreaHasTypeName == true</test>
			<error>
				<message>Entry ViewArea in ViewerPreferences is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37987"/>
			<description>Entry ViewArea with type Name in ViewerPreferences shall have one of values: CropBox, BleedBox, TrimBox, MediaBox, ArtBox</description>
			<test>ViewAreaHasTypeName != true || ViewAreaNameValue == "MediaBox" || ViewAreaNameValue == "CropBox" || ViewAreaNameValue == "BleedBox" || ViewAreaNameValue == "TrimBox" || ViewAreaNameValue == "ArtBox"</test>
			<error>
				<message>Entry ViewArea with type Name in ViewerPreferences has incorrect value %2 instead of CropBox, BleedBox, TrimBox, MediaBox, ArtBox</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ViewAreaNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_5" clause="8" testNumber="37988"/>
			<description>Entry ViewClip in ViewerPreferences shall have type Name</description>
			<test>containsViewClip == false || ViewClipHasTypeName == true</test>
			<error>
				<message>Entry ViewClip in ViewerPreferences is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_5" clause="6" testNumber="37989"/>
			<description>Entry ViewClip with type Name in ViewerPreferences shall have one of values: CropBox, BleedBox, TrimBox, MediaBox, ArtBox</description>
			<test>ViewClipHasTypeName != true || ViewClipNameValue == "MediaBox" || ViewClipNameValue == "CropBox" || ViewClipNameValue == "BleedBox" || ViewClipNameValue == "TrimBox" || ViewClipNameValue == "ArtBox"</test>
			<error>
				<message>Entry ViewClip with type Name in ViewerPreferences has incorrect value %2 instead of CropBox, BleedBox, TrimBox, MediaBox, ArtBox</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ViewClipNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_5" clause="1" testNumber="38149"/>
			<description>WebCaptureCommand shall not contain entries except CT, F, H, L, P, S, URL</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CT' &amp;&amp; elem != 'F' &amp;&amp; elem != 'H' &amp;&amp; elem != 'L' &amp;&amp; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'URL').length == 0</test>
			<error>
				<message>WebCaptureCommand contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CT' &amp;&amp; elem != 'F' &amp;&amp; elem != 'H' &amp;&amp; elem != 'L' &amp;&amp; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'URL').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38150"/>
			<description>Entry CT in WebCaptureCommand shall have type StringAscii</description>
			<test>containsCT == false || CTHasTypeStringAscii == true</test>
			<error>
				<message>Entry CT in WebCaptureCommand is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38151"/>
			<description>Entry F in WebCaptureCommand shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in WebCaptureCommand is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_5" clause="9" testNumber="38152"/>
			<description>Entry F with type Bitmask in WebCaptureCommand shall satisfy special case: fn:Eval(fn:BitsClear(4 , 32))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in WebCaptureCommand does not satisfy special case: fn:Eval(fn:BitsClear(4 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38153"/>
			<description>Entry H in WebCaptureCommand shall have type String</description>
			<test>containsH == false || HHasTypeString == true</test>
			<error>
				<message>Entry H in WebCaptureCommand is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38154"/>
			<description>Entry L in WebCaptureCommand shall have type Integer</description>
			<test>containsL == false || LHasTypeInteger == true</test>
			<error>
				<message>Entry L in WebCaptureCommand is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_5" clause="9" testNumber="38155"/>
			<description>Entry L with type Integer in WebCaptureCommand shall satisfy special case: fn:Eval(@L &gt;= 1)</description>
			<test>LHasTypeInteger != true || (LIntegerValue &gt;= 1)</test>
			<error>
				<message>Entry L with type Integer in WebCaptureCommand does not satisfy special case: fn:Eval(@L &gt;= 1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38156"/>
			<description>Entry P with type Stream in WebCaptureCommand shall be object Stream</description>
			<test>PHasTypeStream != true || P_size == 1</test>
			<error>
				<message>Entry P with type Stream in WebCaptureCommand is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38157"/>
			<description>Entry P in WebCaptureCommand shall have one of types: Stream, String</description>
			<test>containsP == false || PHasTypeStream == true || PHasTypeString == true</test>
			<error>
				<message>Entry P in WebCaptureCommand is not one of types: Stream, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_5" clause="10" testNumber="38158"/>
			<description>Entry P with type Stream in WebCaptureCommand shall be indirect</description>
			<test>PHasTypeStream != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Stream in WebCaptureCommand is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38159"/>
			<description>Entry S with type Dictionary in WebCaptureCommand shall be object WebCaptureCommandSettings</description>
			<test>SHasTypeDictionary != true || S_size == 1</test>
			<error>
				<message>Entry S with type Dictionary in WebCaptureCommand is not object WebCaptureCommandSettings</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38160"/>
			<description>Entry S in WebCaptureCommand shall have type Dictionary</description>
			<test>containsS == false || SHasTypeDictionary == true</test>
			<error>
				<message>Entry S in WebCaptureCommand is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38161"/>
			<description>Entry URL in WebCaptureCommand shall have type StringAscii</description>
			<test>containsURL == false || URLHasTypeStringAscii == true</test>
			<error>
				<message>Entry URL in WebCaptureCommand is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_5" clause="7" testNumber="38162"/>
			<description>Entry URL in WebCaptureCommand is required</description>
			<test>containsURL == true</test>
			<error>
				<message>Entry URL in WebCaptureCommand is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommandSettings">
			<id specification="ISO_32000_1_5" clause="1" testNumber="38215"/>
			<description>WebCaptureCommandSettings shall not contain entries except C, G</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'G').length == 0</test>
			<error>
				<message>WebCaptureCommandSettings contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'G').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommandSettings">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38216"/>
			<description>Entry C with type Dictionary in WebCaptureCommandSettings shall be object _UniversalDictionary</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in WebCaptureCommandSettings is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommandSettings">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38217"/>
			<description>Entry C in WebCaptureCommandSettings shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in WebCaptureCommandSettings is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommandSettings">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38218"/>
			<description>Entry G with type Dictionary in WebCaptureCommandSettings shall be object _UniversalDictionary</description>
			<test>GHasTypeDictionary != true || G_size == 1</test>
			<error>
				<message>Entry G with type Dictionary in WebCaptureCommandSettings is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommandSettings">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38219"/>
			<description>Entry G in WebCaptureCommandSettings shall have type Dictionary</description>
			<test>containsG == false || GHasTypeDictionary == true</test>
			<error>
				<message>Entry G in WebCaptureCommandSettings is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="1" testNumber="38279"/>
			<description>WebCaptureImageSet shall not contain entries except CT, ID, O, R, S, SI, TS, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CT' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'O' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SI' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>WebCaptureImageSet contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CT' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'O' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SI' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38280"/>
			<description>Entry CT in WebCaptureImageSet shall have type String</description>
			<test>containsCT == false || CTHasTypeString == true</test>
			<error>
				<message>Entry CT in WebCaptureImageSet is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38281"/>
			<description>Entry ID in WebCaptureImageSet shall have type String</description>
			<test>containsID == false || entryIDHasTypeString == true</test>
			<error>
				<message>Entry ID in WebCaptureImageSet is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="7" testNumber="38282"/>
			<description>Entry ID in WebCaptureImageSet is required</description>
			<test>containsID == true</test>
			<error>
				<message>Entry ID in WebCaptureImageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38283"/>
			<description>Entry O with type Array in WebCaptureImageSet shall be object ArrayOfWebCaptureImages</description>
			<test>OHasTypeArray != true || O_size == 1</test>
			<error>
				<message>Entry O with type Array in WebCaptureImageSet is not object ArrayOfWebCaptureImages</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38284"/>
			<description>Entry O in WebCaptureImageSet shall have type Array</description>
			<test>containsO == false || OHasTypeArray == true</test>
			<error>
				<message>Entry O in WebCaptureImageSet is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="7" testNumber="38285"/>
			<description>Entry O in WebCaptureImageSet is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in WebCaptureImageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38286"/>
			<description>Entry R with type Array in WebCaptureImageSet shall be object ArrayOfIntegersGeneral</description>
			<test>RHasTypeArray != true || R_size == 1</test>
			<error>
				<message>Entry R with type Array in WebCaptureImageSet is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38287"/>
			<description>Entry R in WebCaptureImageSet shall have one of types: Array, Integer</description>
			<test>containsR == false || RHasTypeArray == true || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in WebCaptureImageSet is not one of types: Array, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="7" testNumber="38288"/>
			<description>Entry R in WebCaptureImageSet is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in WebCaptureImageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="9" testNumber="38289"/>
			<description>Entry R with type Array in WebCaptureImageSet shall satisfy special case: fn:Eval(fn:ArrayLength(O) == fn:ArrayLength(R))</description>
			<test>RHasTypeArray != true || (OArraySize == RArraySize)</test>
			<error>
				<message>Entry R with type Array in WebCaptureImageSet does not satisfy special case: fn:Eval(fn:ArrayLength(O) == fn:ArrayLength(R))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="9" testNumber="38290"/>
			<description>Entry R with type Integer in WebCaptureImageSet shall satisfy special case: fn:Eval(@R &gt; 0)</description>
			<test>RHasTypeInteger != true || (RIntegerValue &gt; 0)</test>
			<error>
				<message>Entry R with type Integer in WebCaptureImageSet does not satisfy special case: fn:Eval(@R &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38291"/>
			<description>Entry S in WebCaptureImageSet shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in WebCaptureImageSet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="7" testNumber="38292"/>
			<description>Entry S in WebCaptureImageSet is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in WebCaptureImageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="6" testNumber="38293"/>
			<description>Entry S with type Name in WebCaptureImageSet shall have value SIS</description>
			<test>SHasTypeName != true || SNameValue == "SIS"</test>
			<error>
				<message>Entry S with type Name in WebCaptureImageSet has incorrect value %2 instead of SIS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38294"/>
			<description>Entry SI with type Array in WebCaptureImageSet shall be object ArrayOfSourceInformation</description>
			<test>SIHasTypeArray != true || SI_size == 1</test>
			<error>
				<message>Entry SI with type Array in WebCaptureImageSet is not object ArrayOfSourceInformation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38295"/>
			<description>Entry SI with type Dictionary in WebCaptureImageSet shall be object SourceInformation</description>
			<test>SIHasTypeDictionary != true || SI_size == 1</test>
			<error>
				<message>Entry SI with type Dictionary in WebCaptureImageSet is not object SourceInformation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38296"/>
			<description>Entry SI in WebCaptureImageSet shall have one of types: Array, Dictionary</description>
			<test>containsSI == false || SIHasTypeArray == true || SIHasTypeDictionary == true</test>
			<error>
				<message>Entry SI in WebCaptureImageSet is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="7" testNumber="38297"/>
			<description>Entry SI in WebCaptureImageSet is required</description>
			<test>containsSI == true</test>
			<error>
				<message>Entry SI in WebCaptureImageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38298"/>
			<description>Entry TS in WebCaptureImageSet shall have type Date</description>
			<test>containsTS == false || TSHasTypeDate == true</test>
			<error>
				<message>Entry TS in WebCaptureImageSet is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38299"/>
			<description>Entry Type in WebCaptureImageSet shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in WebCaptureImageSet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_5" clause="6" testNumber="38300"/>
			<description>Entry Type with type Name in WebCaptureImageSet shall have value SpiderContentSet</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SpiderContentSet"</test>
			<error>
				<message>Entry Type with type Name in WebCaptureImageSet has incorrect value %2 instead of SpiderContentSet</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_5" clause="1" testNumber="38379"/>
			<description>WebCaptureInfo shall not contain entries except C, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>WebCaptureInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38380"/>
			<description>Entry C with type Array in WebCaptureInfo shall be object ArrayOfWebCaptureCommands</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in WebCaptureInfo is not object ArrayOfWebCaptureCommands</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38381"/>
			<description>Entry C in WebCaptureInfo shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in WebCaptureInfo is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38382"/>
			<description>Entry V in WebCaptureInfo shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in WebCaptureInfo is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_5" clause="7" testNumber="38383"/>
			<description>Entry V in WebCaptureInfo is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in WebCaptureInfo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_5" clause="6" testNumber="38384"/>
			<description>Entry V with type Number in WebCaptureInfo shall have value 1</description>
			<test>VHasTypeNumber != true || VNumberValue == 1</test>
			<error>
				<message>Entry V with type Number in WebCaptureInfo has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_5" clause="1" testNumber="38441"/>
			<description>WebCapturePageSet shall not contain entries except CT, ID, O, S, SI, T, TID, TS, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CT' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'O' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SI' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TID' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>WebCapturePageSet contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CT' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'O' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SI' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TID' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38442"/>
			<description>Entry CT in WebCapturePageSet shall have type StringAscii</description>
			<test>containsCT == false || CTHasTypeStringAscii == true</test>
			<error>
				<message>Entry CT in WebCapturePageSet is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38443"/>
			<description>Entry ID in WebCapturePageSet shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in WebCapturePageSet is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_5" clause="7" testNumber="38444"/>
			<description>Entry ID in WebCapturePageSet is required</description>
			<test>containsID == true</test>
			<error>
				<message>Entry ID in WebCapturePageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38445"/>
			<description>Entry O with type Array in WebCapturePageSet shall be object ArrayOfWebCapturePages</description>
			<test>OHasTypeArray != true || O_size == 1</test>
			<error>
				<message>Entry O with type Array in WebCapturePageSet is not object ArrayOfWebCapturePages</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38446"/>
			<description>Entry O in WebCapturePageSet shall have type Array</description>
			<test>containsO == false || OHasTypeArray == true</test>
			<error>
				<message>Entry O in WebCapturePageSet is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_5" clause="7" testNumber="38447"/>
			<description>Entry O in WebCapturePageSet is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in WebCapturePageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38448"/>
			<description>Entry S in WebCapturePageSet shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in WebCapturePageSet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_5" clause="7" testNumber="38449"/>
			<description>Entry S in WebCapturePageSet is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in WebCapturePageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_5" clause="6" testNumber="38450"/>
			<description>Entry S with type Name in WebCapturePageSet shall have value SPS</description>
			<test>SHasTypeName != true || SNameValue == "SPS"</test>
			<error>
				<message>Entry S with type Name in WebCapturePageSet has incorrect value %2 instead of SPS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38451"/>
			<description>Entry SI with type Array in WebCapturePageSet shall be object ArrayOfSourceInformation</description>
			<test>SIHasTypeArray != true || SI_size == 1</test>
			<error>
				<message>Entry SI with type Array in WebCapturePageSet is not object ArrayOfSourceInformation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38452"/>
			<description>Entry SI with type Dictionary in WebCapturePageSet shall be object SourceInformation</description>
			<test>SIHasTypeDictionary != true || SI_size == 1</test>
			<error>
				<message>Entry SI with type Dictionary in WebCapturePageSet is not object SourceInformation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38453"/>
			<description>Entry SI in WebCapturePageSet shall have one of types: Array, Dictionary</description>
			<test>containsSI == false || SIHasTypeArray == true || SIHasTypeDictionary == true</test>
			<error>
				<message>Entry SI in WebCapturePageSet is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_5" clause="7" testNumber="38454"/>
			<description>Entry SI in WebCapturePageSet is required</description>
			<test>containsSI == true</test>
			<error>
				<message>Entry SI in WebCapturePageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38455"/>
			<description>Entry T in WebCapturePageSet shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in WebCapturePageSet is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38456"/>
			<description>Entry TID in WebCapturePageSet shall have type StringByte</description>
			<test>containsTID == false || TIDHasTypeStringByte == true</test>
			<error>
				<message>Entry TID in WebCapturePageSet is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38457"/>
			<description>Entry TS in WebCapturePageSet shall have type Date</description>
			<test>containsTS == false || TSHasTypeDate == true</test>
			<error>
				<message>Entry TS in WebCapturePageSet is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38458"/>
			<description>Entry Type in WebCapturePageSet shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in WebCapturePageSet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_5" clause="6" testNumber="38459"/>
			<description>Entry Type with type Name in WebCapturePageSet shall have value SpiderContentSet</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SpiderContentSet"</test>
			<error>
				<message>Entry Type with type Name in WebCapturePageSet has incorrect value %2 instead of SpiderContentSet</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_5" clause="2" testNumber="38545"/>
			<description>WhitepointArray shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>WhitepointArray contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38546"/>
			<description>Entry 0 in WhitepointArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in WhitepointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_5" clause="14" testNumber="38547"/>
			<description>Entry 0 with type Number in WhitepointArray shall satisfy possible value predicate: fn:Eval(@0 &gt; 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt; 0</test>
			<error>
				<message>Entry 0 with type Number in WhitepointArray does not satisfy possible value predicate: fn:Eval(@0 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38548"/>
			<description>Entry 1 in WhitepointArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in WhitepointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_5" clause="6" testNumber="38549"/>
			<description>Entry 1 with type Number in WhitepointArray shall have value 1</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue == 1</test>
			<error>
				<message>Entry 1 with type Number in WhitepointArray has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38550"/>
			<description>Entry 2 in WhitepointArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in WhitepointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_5" clause="14" testNumber="38551"/>
			<description>Entry 2 with type Number in WhitepointArray shall satisfy possible value predicate: fn:Eval(@2 &gt; 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt; 0</test>
			<error>
				<message>Entry 2 with type Number in WhitepointArray does not satisfy possible value predicate: fn:Eval(@2 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="1" testNumber="38690"/>
			<description>XObjectFormPS shall not contain entries except DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Level1, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Level1' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>XObjectFormPS contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Level1' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38691"/>
			<description>Entry DecodeParms with type Array in XObjectFormPS shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPS is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38692"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormPS shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormPS is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38693"/>
			<description>Entry DecodeParms in XObjectFormPS shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormPS is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="5" testNumber="38694"/>
			<description>Entry DecodeParms in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsDecodeParms == false</test>
			<error>
				<message>Entry DecodeParms in XObjectFormPS is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="9" testNumber="38695"/>
			<description>Entry DecodeParms with type Array in XObjectFormPS shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPS does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38696"/>
			<description>Entry F with type Dictionary in XObjectFormPS shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectFormPS is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38697"/>
			<description>Entry F in XObjectFormPS shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in XObjectFormPS is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="5" testNumber="38698"/>
			<description>Entry F in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsF == false</test>
			<error>
				<message>Entry F in XObjectFormPS is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38699"/>
			<description>Entry FDecodeParms with type Array in XObjectFormPS shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormPS is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38700"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectFormPS shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectFormPS is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38701"/>
			<description>Entry FDecodeParms in XObjectFormPS shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormPS is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="5" testNumber="38702"/>
			<description>Entry FDecodeParms in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsFDecodeParms == false</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormPS is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="9" testNumber="38703"/>
			<description>Entry FDecodeParms with type Array in XObjectFormPS shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormPS does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38704"/>
			<description>Entry FFilter with type Array in XObjectFormPS shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormPS is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38705"/>
			<description>Entry FFilter in XObjectFormPS shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectFormPS is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="5" testNumber="38706"/>
			<description>Entry FFilter in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsFFilter == false</test>
			<error>
				<message>Entry FFilter in XObjectFormPS is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="9" testNumber="38707"/>
			<description>Entry FFilter with type Array in XObjectFormPS shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormPS does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="6" testNumber="38708"/>
			<description>Entry FFilter with type Name in XObjectFormPS shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectFormPS has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38709"/>
			<description>Entry Filter with type Array in XObjectFormPS shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPS is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38710"/>
			<description>Entry Filter in XObjectFormPS shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectFormPS is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="5" testNumber="38711"/>
			<description>Entry Filter in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsFilter == false</test>
			<error>
				<message>Entry Filter in XObjectFormPS is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="9" testNumber="38712"/>
			<description>Entry Filter with type Array in XObjectFormPS shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPS does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="6" testNumber="38713"/>
			<description>Entry Filter with type Name in XObjectFormPS shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormPS has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38714"/>
			<description>Entry Length in XObjectFormPS shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormPS is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="7" testNumber="38715"/>
			<description>Entry Length in XObjectFormPS is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormPS is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="5" testNumber="38716"/>
			<description>Entry Length in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsLength == false</test>
			<error>
				<message>Entry Length in XObjectFormPS is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="17" testNumber="38717"/>
			<description>Entry Level1 with type Stream in XObjectFormPS shall be object Stream</description>
			<test>Level1HasTypeStream != true || Level1_size == 1</test>
			<error>
				<message>Entry Level1 with type Stream in XObjectFormPS is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38718"/>
			<description>Entry Level1 in XObjectFormPS shall have type Stream</description>
			<test>containsLevel1 == false || Level1HasTypeStream == true</test>
			<error>
				<message>Entry Level1 in XObjectFormPS is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="5" testNumber="38719"/>
			<description>Entry Level1 in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsLevel1 == false</test>
			<error>
				<message>Entry Level1 in XObjectFormPS is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="10" testNumber="38720"/>
			<description>Entry Level1 with type Stream in XObjectFormPS shall be indirect</description>
			<test>Level1HasTypeStream != true || isLevel1Indirect == true</test>
			<error>
				<message>Entry Level1 with type Stream in XObjectFormPS is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38721"/>
			<description>Entry Subtype in XObjectFormPS shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPS is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="7" testNumber="38722"/>
			<description>Entry Subtype in XObjectFormPS is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPS is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="5" testNumber="38723"/>
			<description>Entry Subtype in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsSubtype == false</test>
			<error>
				<message>Entry Subtype in XObjectFormPS is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="6" testNumber="38724"/>
			<description>Entry Subtype with type Name in XObjectFormPS shall have value PS</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "PS"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormPS has incorrect value %2 instead of PS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="8" testNumber="38725"/>
			<description>Entry Type in XObjectFormPS shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormPS is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="5" testNumber="38726"/>
			<description>Entry Type in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsType == false</test>
			<error>
				<message>Entry Type in XObjectFormPS is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_5" clause="6" testNumber="38727"/>
			<description>Entry Type with type Name in XObjectFormPS shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormPS has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="1" testNumber="39020"/>
			<description>XObjectFormPSpassthrough shall not contain entries except BBox, DecodeParms, F, FDecodeParms, FFilter, Filter, FormType, Length, Level1, Matrix, PS, Subtype, Subtype2, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Level1' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PS' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Subtype2' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>XObjectFormPSpassthrough contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Level1' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PS' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Subtype2' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39021"/>
			<description>Entry BBox in XObjectFormPSpassthrough shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in XObjectFormPSpassthrough is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="7" testNumber="39022"/>
			<description>Entry BBox in XObjectFormPSpassthrough is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="5" testNumber="39023"/>
			<description>Entry BBox in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsBBox == false</test>
			<error>
				<message>Entry BBox in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39024"/>
			<description>Entry DecodeParms with type Array in XObjectFormPSpassthrough shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPSpassthrough is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39025"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormPSpassthrough shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormPSpassthrough is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39026"/>
			<description>Entry DecodeParms in XObjectFormPSpassthrough shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormPSpassthrough is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="5" testNumber="39027"/>
			<description>Entry DecodeParms in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsDecodeParms == false</test>
			<error>
				<message>Entry DecodeParms in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="9" testNumber="39028"/>
			<description>Entry DecodeParms with type Array in XObjectFormPSpassthrough shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPSpassthrough does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39029"/>
			<description>Entry F with type Dictionary in XObjectFormPSpassthrough shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectFormPSpassthrough is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39030"/>
			<description>Entry F in XObjectFormPSpassthrough shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in XObjectFormPSpassthrough is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="5" testNumber="39031"/>
			<description>Entry F in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsF == false</test>
			<error>
				<message>Entry F in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39032"/>
			<description>Entry FDecodeParms with type Array in XObjectFormPSpassthrough shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormPSpassthrough is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39033"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectFormPSpassthrough shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectFormPSpassthrough is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39034"/>
			<description>Entry FDecodeParms in XObjectFormPSpassthrough shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormPSpassthrough is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="5" testNumber="39035"/>
			<description>Entry FDecodeParms in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsFDecodeParms == false</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="9" testNumber="39036"/>
			<description>Entry FDecodeParms with type Array in XObjectFormPSpassthrough shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormPSpassthrough does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39037"/>
			<description>Entry FFilter with type Array in XObjectFormPSpassthrough shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormPSpassthrough is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39038"/>
			<description>Entry FFilter in XObjectFormPSpassthrough shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectFormPSpassthrough is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="5" testNumber="39039"/>
			<description>Entry FFilter in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsFFilter == false</test>
			<error>
				<message>Entry FFilter in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="9" testNumber="39040"/>
			<description>Entry FFilter with type Array in XObjectFormPSpassthrough shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormPSpassthrough does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="6" testNumber="39041"/>
			<description>Entry FFilter with type Name in XObjectFormPSpassthrough shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectFormPSpassthrough has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39042"/>
			<description>Entry Filter with type Array in XObjectFormPSpassthrough shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPSpassthrough is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39043"/>
			<description>Entry Filter in XObjectFormPSpassthrough shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectFormPSpassthrough is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="5" testNumber="39044"/>
			<description>Entry Filter in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsFilter == false</test>
			<error>
				<message>Entry Filter in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="9" testNumber="39045"/>
			<description>Entry Filter with type Array in XObjectFormPSpassthrough shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPSpassthrough does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="6" testNumber="39046"/>
			<description>Entry Filter with type Name in XObjectFormPSpassthrough shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormPSpassthrough has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39047"/>
			<description>Entry FormType in XObjectFormPSpassthrough shall have type Integer</description>
			<test>containsFormType == false || FormTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FormType in XObjectFormPSpassthrough is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="11" testNumber="39048"/>
			<description>Entry FormType in XObjectFormPSpassthrough is required, when fn:IsRequired(fn:BeforeVersion(1.3))</description>
			<test>(containsFormType == true || (false) == false)</test>
			<error>
				<message>Entry FormType in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="5" testNumber="39049"/>
			<description>Entry FormType in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsFormType == false</test>
			<error>
				<message>Entry FormType in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="6" testNumber="39050"/>
			<description>Entry FormType with type Integer in XObjectFormPSpassthrough shall have value 1</description>
			<test>FormTypeHasTypeInteger != true || FormTypeIntegerValue == 1</test>
			<error>
				<message>Entry FormType with type Integer in XObjectFormPSpassthrough has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FormTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39051"/>
			<description>Entry Length in XObjectFormPSpassthrough shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormPSpassthrough is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="7" testNumber="39052"/>
			<description>Entry Length in XObjectFormPSpassthrough is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="5" testNumber="39053"/>
			<description>Entry Length in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsLength == false</test>
			<error>
				<message>Entry Length in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39054"/>
			<description>Entry Level1 with type Stream in XObjectFormPSpassthrough shall be object Stream</description>
			<test>Level1HasTypeStream != true || Level1_size == 1</test>
			<error>
				<message>Entry Level1 with type Stream in XObjectFormPSpassthrough is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39055"/>
			<description>Entry Level1 in XObjectFormPSpassthrough shall have type Stream</description>
			<test>containsLevel1 == false || Level1HasTypeStream == true</test>
			<error>
				<message>Entry Level1 in XObjectFormPSpassthrough is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="5" testNumber="39056"/>
			<description>Entry Level1 in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsLevel1 == false</test>
			<error>
				<message>Entry Level1 in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="10" testNumber="39057"/>
			<description>Entry Level1 with type Stream in XObjectFormPSpassthrough shall be indirect</description>
			<test>Level1HasTypeStream != true || isLevel1Indirect == true</test>
			<error>
				<message>Entry Level1 with type Stream in XObjectFormPSpassthrough is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39058"/>
			<description>Entry Matrix in XObjectFormPSpassthrough shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormPSpassthrough is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="11" testNumber="39059"/>
			<description>Entry Matrix in XObjectFormPSpassthrough is required, when fn:IsRequired(fn:BeforeVersion(1.3))</description>
			<test>(containsMatrix == true || (false) == false)</test>
			<error>
				<message>Entry Matrix in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="5" testNumber="39060"/>
			<description>Entry Matrix in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsMatrix == false</test>
			<error>
				<message>Entry Matrix in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39061"/>
			<description>Entry PS with type Stream in XObjectFormPSpassthrough shall be object Stream</description>
			<test>PSHasTypeStream != true || PS_size == 1</test>
			<error>
				<message>Entry PS with type Stream in XObjectFormPSpassthrough is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39062"/>
			<description>Entry PS in XObjectFormPSpassthrough shall have type Stream</description>
			<test>containsPS == false || PSHasTypeStream == true</test>
			<error>
				<message>Entry PS in XObjectFormPSpassthrough is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="7" testNumber="39063"/>
			<description>Entry PS in XObjectFormPSpassthrough is required</description>
			<test>containsPS == true</test>
			<error>
				<message>Entry PS in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="5" testNumber="39064"/>
			<description>Entry PS in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsPS == false</test>
			<error>
				<message>Entry PS in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="10" testNumber="39065"/>
			<description>Entry PS with type Stream in XObjectFormPSpassthrough shall be indirect</description>
			<test>PSHasTypeStream != true || isPSIndirect == true</test>
			<error>
				<message>Entry PS with type Stream in XObjectFormPSpassthrough is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39066"/>
			<description>Entry Subtype in XObjectFormPSpassthrough shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPSpassthrough is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="7" testNumber="39067"/>
			<description>Entry Subtype in XObjectFormPSpassthrough is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="5" testNumber="39068"/>
			<description>Entry Subtype in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsSubtype == false</test>
			<error>
				<message>Entry Subtype in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="6" testNumber="39069"/>
			<description>Entry Subtype with type Name in XObjectFormPSpassthrough shall have value PS</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "PS"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormPSpassthrough has incorrect value %2 instead of PS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39070"/>
			<description>Entry Subtype2 in XObjectFormPSpassthrough shall have type Name</description>
			<test>containsSubtype2 == false || Subtype2HasTypeName == true</test>
			<error>
				<message>Entry Subtype2 in XObjectFormPSpassthrough is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="7" testNumber="39071"/>
			<description>Entry Subtype2 in XObjectFormPSpassthrough is required</description>
			<test>containsSubtype2 == true</test>
			<error>
				<message>Entry Subtype2 in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="5" testNumber="39072"/>
			<description>Entry Subtype2 in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsSubtype2 == false</test>
			<error>
				<message>Entry Subtype2 in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="6" testNumber="39073"/>
			<description>Entry Subtype2 with type Name in XObjectFormPSpassthrough shall have value PS</description>
			<test>Subtype2HasTypeName != true || Subtype2NameValue == "PS"</test>
			<error>
				<message>Entry Subtype2 with type Name in XObjectFormPSpassthrough has incorrect value %2 instead of PS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>Subtype2NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39074"/>
			<description>Entry Type in XObjectFormPSpassthrough shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormPSpassthrough is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="5" testNumber="39075"/>
			<description>Entry Type in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsType == false</test>
			<error>
				<message>Entry Type in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_5" clause="6" testNumber="39076"/>
			<description>Entry Type with type Name in XObjectFormPSpassthrough shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormPSpassthrough has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="1" testNumber="39300"/>
			<description>XObjectFormPrinterMark shall not contain entries except BBox, Colorants, DL, DecodeParms, F, FDecodeParms, FFilter, Filter, FormType, Group, LastModified, Length, MarkStyle, Matrix, Metadata, Name, OC, OPI, PieceInfo, Ref, Resources, StructParent, StructParents, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'Colorants' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'MarkStyle' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>XObjectFormPrinterMark contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'Colorants' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'MarkStyle' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39301"/>
			<description>Entry BBox in XObjectFormPrinterMark shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in XObjectFormPrinterMark is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="7" testNumber="39302"/>
			<description>Entry BBox in XObjectFormPrinterMark is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in XObjectFormPrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39303"/>
			<description>Entry Colorants with type Dictionary in XObjectFormPrinterMark shall be object ColorantsDict</description>
			<test>ColorantsHasTypeDictionary != true || Colorants_size == 1</test>
			<error>
				<message>Entry Colorants with type Dictionary in XObjectFormPrinterMark is not object ColorantsDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39304"/>
			<description>Entry Colorants in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsColorants == false || ColorantsHasTypeDictionary == true</test>
			<error>
				<message>Entry Colorants in XObjectFormPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39305"/>
			<description>Entry DL in XObjectFormPrinterMark shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XObjectFormPrinterMark is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="9" testNumber="39306"/>
			<description>Entry DL with type Integer in XObjectFormPrinterMark shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XObjectFormPrinterMark does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39307"/>
			<description>Entry DecodeParms with type Array in XObjectFormPrinterMark shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPrinterMark is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39308"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormPrinterMark shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormPrinterMark is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39309"/>
			<description>Entry DecodeParms in XObjectFormPrinterMark shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormPrinterMark is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="9" testNumber="39310"/>
			<description>Entry DecodeParms with type Array in XObjectFormPrinterMark shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPrinterMark does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39311"/>
			<description>Entry F with type Dictionary in XObjectFormPrinterMark shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectFormPrinterMark is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39312"/>
			<description>Entry F in XObjectFormPrinterMark shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in XObjectFormPrinterMark is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39313"/>
			<description>Entry FDecodeParms with type Array in XObjectFormPrinterMark shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormPrinterMark is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39314"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectFormPrinterMark shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectFormPrinterMark is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39315"/>
			<description>Entry FDecodeParms in XObjectFormPrinterMark shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormPrinterMark is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="9" testNumber="39316"/>
			<description>Entry FDecodeParms with type Array in XObjectFormPrinterMark shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormPrinterMark does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39317"/>
			<description>Entry FFilter with type Array in XObjectFormPrinterMark shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormPrinterMark is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39318"/>
			<description>Entry FFilter in XObjectFormPrinterMark shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectFormPrinterMark is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="9" testNumber="39319"/>
			<description>Entry FFilter with type Array in XObjectFormPrinterMark shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormPrinterMark does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="6" testNumber="39320"/>
			<description>Entry FFilter with type Name in XObjectFormPrinterMark shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectFormPrinterMark has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39321"/>
			<description>Entry Filter with type Array in XObjectFormPrinterMark shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPrinterMark is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39322"/>
			<description>Entry Filter in XObjectFormPrinterMark shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectFormPrinterMark is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="9" testNumber="39323"/>
			<description>Entry Filter with type Array in XObjectFormPrinterMark shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPrinterMark does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="6" testNumber="39324"/>
			<description>Entry Filter with type Name in XObjectFormPrinterMark shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormPrinterMark has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39325"/>
			<description>Entry FormType in XObjectFormPrinterMark shall have type Integer</description>
			<test>containsFormType == false || FormTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FormType in XObjectFormPrinterMark is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="6" testNumber="39326"/>
			<description>Entry FormType with type Integer in XObjectFormPrinterMark shall have value 1</description>
			<test>FormTypeHasTypeInteger != true || FormTypeIntegerValue == 1</test>
			<error>
				<message>Entry FormType with type Integer in XObjectFormPrinterMark has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FormTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39327"/>
			<description>Entry Group with type Dictionary in XObjectFormPrinterMark shall be object GroupAttributes</description>
			<test>GroupHasTypeDictionary != true || Group_size == 1</test>
			<error>
				<message>Entry Group with type Dictionary in XObjectFormPrinterMark is not object GroupAttributes</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39328"/>
			<description>Entry Group in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsGroup == false || GroupHasTypeDictionary == true</test>
			<error>
				<message>Entry Group in XObjectFormPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39329"/>
			<description>Entry LastModified in XObjectFormPrinterMark shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in XObjectFormPrinterMark is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="11" testNumber="39330"/>
			<description>Entry LastModified in XObjectFormPrinterMark is required, when fn:IsRequired(fn:IsPresent(PieceInfo))</description>
			<test>(containsLastModified == true || ((containsPieceInfo == true)) == false)</test>
			<error>
				<message>Entry LastModified in XObjectFormPrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39331"/>
			<description>Entry Length in XObjectFormPrinterMark shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormPrinterMark is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="7" testNumber="39332"/>
			<description>Entry Length in XObjectFormPrinterMark is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormPrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39333"/>
			<description>Entry MarkStyle in XObjectFormPrinterMark shall have type StringText</description>
			<test>containsMarkStyle == false || MarkStyleHasTypeStringText == true</test>
			<error>
				<message>Entry MarkStyle in XObjectFormPrinterMark is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39334"/>
			<description>Entry Matrix in XObjectFormPrinterMark shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormPrinterMark is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39335"/>
			<description>Entry Metadata with type Stream in XObjectFormPrinterMark shall be object Metadata</description>
			<test>MetadataHasTypeStream != true || Metadata_size == 1</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectFormPrinterMark is not object Metadata</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39336"/>
			<description>Entry Metadata in XObjectFormPrinterMark shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in XObjectFormPrinterMark is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="10" testNumber="39337"/>
			<description>Entry Metadata with type Stream in XObjectFormPrinterMark shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectFormPrinterMark is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39338"/>
			<description>Entry Name in XObjectFormPrinterMark shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectFormPrinterMark is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39339"/>
			<description>Entry OC with type Dictionary in XObjectFormPrinterMark shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in XObjectFormPrinterMark is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39340"/>
			<description>Entry OC in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in XObjectFormPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39341"/>
			<description>Entry OPI with type Dictionary in XObjectFormPrinterMark shall be one of objects OPIVersion13, OPIVersion20</description>
			<test>OPIHasTypeDictionary != true || OPI_size == 1</test>
			<error>
				<message>Entry OPI with type Dictionary in XObjectFormPrinterMark is not one of objects OPIVersion13, OPIVersion20</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39342"/>
			<description>Entry OPI in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsOPI == false || OPIHasTypeDictionary == true</test>
			<error>
				<message>Entry OPI in XObjectFormPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39343"/>
			<description>Entry PieceInfo with type Dictionary in XObjectFormPrinterMark shall be object PagePiece</description>
			<test>PieceInfoHasTypeDictionary != true || PieceInfo_size == 1</test>
			<error>
				<message>Entry PieceInfo with type Dictionary in XObjectFormPrinterMark is not object PagePiece</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39344"/>
			<description>Entry PieceInfo in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsPieceInfo == false || PieceInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry PieceInfo in XObjectFormPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39345"/>
			<description>Entry Ref with type Dictionary in XObjectFormPrinterMark shall be object Reference</description>
			<test>RefHasTypeDictionary != true || Ref_size == 1</test>
			<error>
				<message>Entry Ref with type Dictionary in XObjectFormPrinterMark is not object Reference</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39346"/>
			<description>Entry Ref in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsRef == false || RefHasTypeDictionary == true</test>
			<error>
				<message>Entry Ref in XObjectFormPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39347"/>
			<description>Entry Resources with type Dictionary in XObjectFormPrinterMark shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in XObjectFormPrinterMark is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39348"/>
			<description>Entry Resources in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in XObjectFormPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39349"/>
			<description>Entry StructParent in XObjectFormPrinterMark shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in XObjectFormPrinterMark is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39350"/>
			<description>Entry StructParents in XObjectFormPrinterMark shall have type Integer</description>
			<test>containsStructParents == false || StructParentsHasTypeInteger == true</test>
			<error>
				<message>Entry StructParents in XObjectFormPrinterMark is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39351"/>
			<description>Entry Subtype in XObjectFormPrinterMark shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPrinterMark is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="7" testNumber="39352"/>
			<description>Entry Subtype in XObjectFormPrinterMark is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="6" testNumber="39353"/>
			<description>Entry Subtype with type Name in XObjectFormPrinterMark shall have value Form</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Form"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormPrinterMark has incorrect value %2 instead of Form</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39354"/>
			<description>Entry Type in XObjectFormPrinterMark shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormPrinterMark is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_5" clause="6" testNumber="39355"/>
			<description>Entry Type with type Name in XObjectFormPrinterMark shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormPrinterMark has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="1" testNumber="39642"/>
			<description>XObjectFormTrapNet shall not contain entries except BBox, DL, DecodeParms, F, FDecodeParms, FFilter, Filter, FormType, Group, LastModified, Length, Matrix, Metadata, Name, OC, OPI, PCM, PieceInfo, Ref, Resources, SeparationColorNames, StructParent, StructParents, Subtype, TrapRegions, TrapStyles, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PCM' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'SeparationColorNames' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TrapRegions' &amp;&amp; elem != 'TrapStyles' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>XObjectFormTrapNet contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PCM' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'SeparationColorNames' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TrapRegions' &amp;&amp; elem != 'TrapStyles' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39643"/>
			<description>Entry BBox in XObjectFormTrapNet shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in XObjectFormTrapNet is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="7" testNumber="39644"/>
			<description>Entry BBox in XObjectFormTrapNet is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in XObjectFormTrapNet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39645"/>
			<description>Entry DL in XObjectFormTrapNet shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XObjectFormTrapNet is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="9" testNumber="39646"/>
			<description>Entry DL with type Integer in XObjectFormTrapNet shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XObjectFormTrapNet does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39647"/>
			<description>Entry DecodeParms with type Array in XObjectFormTrapNet shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormTrapNet is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39648"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormTrapNet shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormTrapNet is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39649"/>
			<description>Entry DecodeParms in XObjectFormTrapNet shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormTrapNet is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="9" testNumber="39650"/>
			<description>Entry DecodeParms with type Array in XObjectFormTrapNet shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormTrapNet does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39651"/>
			<description>Entry F with type Dictionary in XObjectFormTrapNet shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectFormTrapNet is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39652"/>
			<description>Entry F in XObjectFormTrapNet shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in XObjectFormTrapNet is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39653"/>
			<description>Entry FDecodeParms with type Array in XObjectFormTrapNet shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormTrapNet is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39654"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectFormTrapNet shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectFormTrapNet is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39655"/>
			<description>Entry FDecodeParms in XObjectFormTrapNet shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormTrapNet is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="9" testNumber="39656"/>
			<description>Entry FDecodeParms with type Array in XObjectFormTrapNet shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormTrapNet does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39657"/>
			<description>Entry FFilter with type Array in XObjectFormTrapNet shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormTrapNet is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39658"/>
			<description>Entry FFilter in XObjectFormTrapNet shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectFormTrapNet is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="9" testNumber="39659"/>
			<description>Entry FFilter with type Array in XObjectFormTrapNet shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormTrapNet does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="6" testNumber="39660"/>
			<description>Entry FFilter with type Name in XObjectFormTrapNet shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectFormTrapNet has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39661"/>
			<description>Entry Filter with type Array in XObjectFormTrapNet shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormTrapNet is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39662"/>
			<description>Entry Filter in XObjectFormTrapNet shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectFormTrapNet is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="9" testNumber="39663"/>
			<description>Entry Filter with type Array in XObjectFormTrapNet shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormTrapNet does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="6" testNumber="39664"/>
			<description>Entry Filter with type Name in XObjectFormTrapNet shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormTrapNet has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39665"/>
			<description>Entry FormType in XObjectFormTrapNet shall have type Integer</description>
			<test>containsFormType == false || FormTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FormType in XObjectFormTrapNet is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="6" testNumber="39666"/>
			<description>Entry FormType with type Integer in XObjectFormTrapNet shall have value 1</description>
			<test>FormTypeHasTypeInteger != true || FormTypeIntegerValue == 1</test>
			<error>
				<message>Entry FormType with type Integer in XObjectFormTrapNet has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FormTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39667"/>
			<description>Entry Group with type Dictionary in XObjectFormTrapNet shall be object GroupAttributes</description>
			<test>GroupHasTypeDictionary != true || Group_size == 1</test>
			<error>
				<message>Entry Group with type Dictionary in XObjectFormTrapNet is not object GroupAttributes</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39668"/>
			<description>Entry Group in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsGroup == false || GroupHasTypeDictionary == true</test>
			<error>
				<message>Entry Group in XObjectFormTrapNet is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39669"/>
			<description>Entry LastModified in XObjectFormTrapNet shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in XObjectFormTrapNet is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="11" testNumber="39670"/>
			<description>Entry LastModified in XObjectFormTrapNet is required, when fn:IsRequired(fn:IsPresent(PieceInfo))</description>
			<test>(containsLastModified == true || ((containsPieceInfo == true)) == false)</test>
			<error>
				<message>Entry LastModified in XObjectFormTrapNet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39671"/>
			<description>Entry Length in XObjectFormTrapNet shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormTrapNet is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="7" testNumber="39672"/>
			<description>Entry Length in XObjectFormTrapNet is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormTrapNet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39673"/>
			<description>Entry Matrix in XObjectFormTrapNet shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormTrapNet is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39674"/>
			<description>Entry Metadata with type Stream in XObjectFormTrapNet shall be object Metadata</description>
			<test>MetadataHasTypeStream != true || Metadata_size == 1</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectFormTrapNet is not object Metadata</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39675"/>
			<description>Entry Metadata in XObjectFormTrapNet shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in XObjectFormTrapNet is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="10" testNumber="39676"/>
			<description>Entry Metadata with type Stream in XObjectFormTrapNet shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectFormTrapNet is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39677"/>
			<description>Entry Name in XObjectFormTrapNet shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectFormTrapNet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39678"/>
			<description>Entry OC with type Dictionary in XObjectFormTrapNet shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in XObjectFormTrapNet is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39679"/>
			<description>Entry OC in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in XObjectFormTrapNet is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39680"/>
			<description>Entry OPI with type Dictionary in XObjectFormTrapNet shall be one of objects OPIVersion13, OPIVersion20</description>
			<test>OPIHasTypeDictionary != true || OPI_size == 1</test>
			<error>
				<message>Entry OPI with type Dictionary in XObjectFormTrapNet is not one of objects OPIVersion13, OPIVersion20</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39681"/>
			<description>Entry OPI in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsOPI == false || OPIHasTypeDictionary == true</test>
			<error>
				<message>Entry OPI in XObjectFormTrapNet is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39682"/>
			<description>Entry PCM in XObjectFormTrapNet shall have type Name</description>
			<test>containsPCM == false || PCMHasTypeName == true</test>
			<error>
				<message>Entry PCM in XObjectFormTrapNet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="7" testNumber="39683"/>
			<description>Entry PCM in XObjectFormTrapNet is required</description>
			<test>containsPCM == true</test>
			<error>
				<message>Entry PCM in XObjectFormTrapNet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="6" testNumber="39684"/>
			<description>Entry PCM with type Name in XObjectFormTrapNet shall have one of values: DeviceGray, DeviceRGBK, DeviceRGB, DeviceN, DeviceCMYK, DeviceCMY</description>
			<test>PCMHasTypeName != true || PCMNameValue == "DeviceGray" || PCMNameValue == "DeviceRGB" || PCMNameValue == "DeviceCMYK" || PCMNameValue == "DeviceCMY" || PCMNameValue == "DeviceRGBK" || PCMNameValue == "DeviceN"</test>
			<error>
				<message>Entry PCM with type Name in XObjectFormTrapNet has incorrect value %2 instead of DeviceGray, DeviceRGBK, DeviceRGB, DeviceN, DeviceCMYK, DeviceCMY</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PCMNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39685"/>
			<description>Entry PieceInfo with type Dictionary in XObjectFormTrapNet shall be object PagePiece</description>
			<test>PieceInfoHasTypeDictionary != true || PieceInfo_size == 1</test>
			<error>
				<message>Entry PieceInfo with type Dictionary in XObjectFormTrapNet is not object PagePiece</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39686"/>
			<description>Entry PieceInfo in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsPieceInfo == false || PieceInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry PieceInfo in XObjectFormTrapNet is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39687"/>
			<description>Entry Ref with type Dictionary in XObjectFormTrapNet shall be object Reference</description>
			<test>RefHasTypeDictionary != true || Ref_size == 1</test>
			<error>
				<message>Entry Ref with type Dictionary in XObjectFormTrapNet is not object Reference</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39688"/>
			<description>Entry Ref in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsRef == false || RefHasTypeDictionary == true</test>
			<error>
				<message>Entry Ref in XObjectFormTrapNet is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39689"/>
			<description>Entry Resources with type Dictionary in XObjectFormTrapNet shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in XObjectFormTrapNet is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39690"/>
			<description>Entry Resources in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in XObjectFormTrapNet is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39691"/>
			<description>Entry SeparationColorNames with type Array in XObjectFormTrapNet shall be object ArrayOfNamesGeneral</description>
			<test>SeparationColorNamesHasTypeArray != true || SeparationColorNames_size == 1</test>
			<error>
				<message>Entry SeparationColorNames with type Array in XObjectFormTrapNet is not object ArrayOfNamesGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39692"/>
			<description>Entry SeparationColorNames in XObjectFormTrapNet shall have type Array</description>
			<test>containsSeparationColorNames == false || SeparationColorNamesHasTypeArray == true</test>
			<error>
				<message>Entry SeparationColorNames in XObjectFormTrapNet is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39693"/>
			<description>Entry StructParent in XObjectFormTrapNet shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in XObjectFormTrapNet is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39694"/>
			<description>Entry StructParents in XObjectFormTrapNet shall have type Integer</description>
			<test>containsStructParents == false || StructParentsHasTypeInteger == true</test>
			<error>
				<message>Entry StructParents in XObjectFormTrapNet is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39695"/>
			<description>Entry Subtype in XObjectFormTrapNet shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormTrapNet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="7" testNumber="39696"/>
			<description>Entry Subtype in XObjectFormTrapNet is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormTrapNet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="6" testNumber="39697"/>
			<description>Entry Subtype with type Name in XObjectFormTrapNet shall have value Form</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Form"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormTrapNet has incorrect value %2 instead of Form</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="17" testNumber="39698"/>
			<description>Entry TrapRegions with type Array in XObjectFormTrapNet shall be object ArrayOfTrapRegions</description>
			<test>TrapRegionsHasTypeArray != true || TrapRegions_size == 1</test>
			<error>
				<message>Entry TrapRegions with type Array in XObjectFormTrapNet is not object ArrayOfTrapRegions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39699"/>
			<description>Entry TrapRegions in XObjectFormTrapNet shall have type Array</description>
			<test>containsTrapRegions == false || TrapRegionsHasTypeArray == true</test>
			<error>
				<message>Entry TrapRegions in XObjectFormTrapNet is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39700"/>
			<description>Entry TrapStyles in XObjectFormTrapNet shall have type StringText</description>
			<test>containsTrapStyles == false || TrapStylesHasTypeStringText == true</test>
			<error>
				<message>Entry TrapStyles in XObjectFormTrapNet is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="8" testNumber="39701"/>
			<description>Entry Type in XObjectFormTrapNet shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormTrapNet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_5" clause="6" testNumber="39702"/>
			<description>Entry Type with type Name in XObjectFormTrapNet shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormTrapNet has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="1" testNumber="40101"/>
			<description>XObjectFormType1 shall not contain entries except BBox, DL, DecodeParms, F, FDecodeParms, FFilter, Filter, FormType, Group, LastModified, Length, Matrix, Metadata, Name, OC, OPI, PieceInfo, Ref, Resources, StructParent, StructParents, Subtype, Type, XUID</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XUID').length == 0</test>
			<error>
				<message>XObjectFormType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XUID').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40102"/>
			<description>Entry BBox in XObjectFormType1 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in XObjectFormType1 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="40103"/>
			<description>Entry BBox in XObjectFormType1 is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40104"/>
			<description>Entry DL in XObjectFormType1 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XObjectFormType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="40105"/>
			<description>Entry DL with type Integer in XObjectFormType1 shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XObjectFormType1 does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40106"/>
			<description>Entry DecodeParms with type Array in XObjectFormType1 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormType1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40107"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormType1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormType1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40108"/>
			<description>Entry DecodeParms in XObjectFormType1 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormType1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="40109"/>
			<description>Entry DecodeParms with type Array in XObjectFormType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40110"/>
			<description>Entry F with type Dictionary in XObjectFormType1 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectFormType1 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40111"/>
			<description>Entry F in XObjectFormType1 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in XObjectFormType1 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40112"/>
			<description>Entry FDecodeParms with type Array in XObjectFormType1 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormType1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40113"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectFormType1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectFormType1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40114"/>
			<description>Entry FDecodeParms in XObjectFormType1 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormType1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="40115"/>
			<description>Entry FDecodeParms with type Array in XObjectFormType1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormType1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40116"/>
			<description>Entry FFilter with type Array in XObjectFormType1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormType1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40117"/>
			<description>Entry FFilter in XObjectFormType1 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectFormType1 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="40118"/>
			<description>Entry FFilter with type Array in XObjectFormType1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormType1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="40119"/>
			<description>Entry FFilter with type Name in XObjectFormType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectFormType1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40120"/>
			<description>Entry Filter with type Array in XObjectFormType1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormType1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40121"/>
			<description>Entry Filter in XObjectFormType1 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectFormType1 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="40122"/>
			<description>Entry Filter with type Array in XObjectFormType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="40123"/>
			<description>Entry Filter with type Name in XObjectFormType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormType1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40124"/>
			<description>Entry FormType in XObjectFormType1 shall have type Integer</description>
			<test>containsFormType == false || FormTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FormType in XObjectFormType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="11" testNumber="40125"/>
			<description>Entry FormType in XObjectFormType1 is required, when fn:IsRequired(fn:BeforeVersion(1.3))</description>
			<test>(containsFormType == true || (false) == false)</test>
			<error>
				<message>Entry FormType in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="40126"/>
			<description>Entry FormType with type Integer in XObjectFormType1 shall have value 1</description>
			<test>FormTypeHasTypeInteger != true || FormTypeIntegerValue == 1</test>
			<error>
				<message>Entry FormType with type Integer in XObjectFormType1 has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FormTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40127"/>
			<description>Entry Group with type Dictionary in XObjectFormType1 shall be object GroupAttributes</description>
			<test>GroupHasTypeDictionary != true || Group_size == 1</test>
			<error>
				<message>Entry Group with type Dictionary in XObjectFormType1 is not object GroupAttributes</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40128"/>
			<description>Entry Group in XObjectFormType1 shall have type Dictionary</description>
			<test>containsGroup == false || GroupHasTypeDictionary == true</test>
			<error>
				<message>Entry Group in XObjectFormType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40129"/>
			<description>Entry LastModified in XObjectFormType1 shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in XObjectFormType1 is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="11" testNumber="40130"/>
			<description>Entry LastModified in XObjectFormType1 is required, when fn:IsRequired(fn:IsPresent(PieceInfo))</description>
			<test>(containsLastModified == true || ((containsPieceInfo == true)) == false)</test>
			<error>
				<message>Entry LastModified in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40131"/>
			<description>Entry Length in XObjectFormType1 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="40132"/>
			<description>Entry Length in XObjectFormType1 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40133"/>
			<description>Entry Matrix in XObjectFormType1 shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormType1 is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="11" testNumber="40134"/>
			<description>Entry Matrix in XObjectFormType1 is required, when fn:IsRequired(fn:BeforeVersion(1.3))</description>
			<test>(containsMatrix == true || (false) == false)</test>
			<error>
				<message>Entry Matrix in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40135"/>
			<description>Entry Metadata with type Stream in XObjectFormType1 shall be object Metadata</description>
			<test>MetadataHasTypeStream != true || Metadata_size == 1</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectFormType1 is not object Metadata</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40136"/>
			<description>Entry Metadata in XObjectFormType1 shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in XObjectFormType1 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="10" testNumber="40137"/>
			<description>Entry Metadata with type Stream in XObjectFormType1 shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectFormType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40138"/>
			<description>Entry Name in XObjectFormType1 shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectFormType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="11" testNumber="40139"/>
			<description>Entry Name in XObjectFormType1 is required, when fn:IsRequired(fn:BeforeVersion(1.3))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40140"/>
			<description>Entry OC with type Dictionary in XObjectFormType1 shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in XObjectFormType1 is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40141"/>
			<description>Entry OC in XObjectFormType1 shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in XObjectFormType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40142"/>
			<description>Entry OPI with type Dictionary in XObjectFormType1 shall be one of objects OPIVersion13, OPIVersion20</description>
			<test>OPIHasTypeDictionary != true || OPI_size == 1</test>
			<error>
				<message>Entry OPI with type Dictionary in XObjectFormType1 is not one of objects OPIVersion13, OPIVersion20</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40143"/>
			<description>Entry OPI in XObjectFormType1 shall have type Dictionary</description>
			<test>containsOPI == false || OPIHasTypeDictionary == true</test>
			<error>
				<message>Entry OPI in XObjectFormType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40144"/>
			<description>Entry PieceInfo with type Dictionary in XObjectFormType1 shall be object PagePiece</description>
			<test>PieceInfoHasTypeDictionary != true || PieceInfo_size == 1</test>
			<error>
				<message>Entry PieceInfo with type Dictionary in XObjectFormType1 is not object PagePiece</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40145"/>
			<description>Entry PieceInfo in XObjectFormType1 shall have type Dictionary</description>
			<test>containsPieceInfo == false || PieceInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry PieceInfo in XObjectFormType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40146"/>
			<description>Entry Ref with type Dictionary in XObjectFormType1 shall be object Reference</description>
			<test>RefHasTypeDictionary != true || Ref_size == 1</test>
			<error>
				<message>Entry Ref with type Dictionary in XObjectFormType1 is not object Reference</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40147"/>
			<description>Entry Ref in XObjectFormType1 shall have type Dictionary</description>
			<test>containsRef == false || RefHasTypeDictionary == true</test>
			<error>
				<message>Entry Ref in XObjectFormType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40148"/>
			<description>Entry Resources with type Dictionary in XObjectFormType1 shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in XObjectFormType1 is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40149"/>
			<description>Entry Resources in XObjectFormType1 shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in XObjectFormType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="40150"/>
			<description>Entry Resources in XObjectFormType1 is required</description>
			<test>containsResources == true</test>
			<error>
				<message>Entry Resources in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40151"/>
			<description>Entry StructParent in XObjectFormType1 shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in XObjectFormType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="40152"/>
			<description>Entry StructParent with type Integer in XObjectFormType1 shall satisfy special case: fn:Not(fn:IsPresent(StructParents))</description>
			<test>StructParentHasTypeInteger != true || (((containsStructParents == true)) != true)</test>
			<error>
				<message>Entry StructParent with type Integer in XObjectFormType1 does not satisfy special case: fn:Not(fn:IsPresent(StructParents))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40153"/>
			<description>Entry StructParents in XObjectFormType1 shall have type Integer</description>
			<test>containsStructParents == false || StructParentsHasTypeInteger == true</test>
			<error>
				<message>Entry StructParents in XObjectFormType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="9" testNumber="40154"/>
			<description>Entry StructParents with type Integer in XObjectFormType1 shall satisfy special case: fn:Not(fn:IsPresent(StructParent))</description>
			<test>StructParentsHasTypeInteger != true || (((containsStructParent == true)) != true)</test>
			<error>
				<message>Entry StructParents with type Integer in XObjectFormType1 does not satisfy special case: fn:Not(fn:IsPresent(StructParent))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40155"/>
			<description>Entry Subtype in XObjectFormType1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="7" testNumber="40156"/>
			<description>Entry Subtype in XObjectFormType1 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="40157"/>
			<description>Entry Subtype with type Name in XObjectFormType1 shall have value Form</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Form"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormType1 has incorrect value %2 instead of Form</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40158"/>
			<description>Entry Type in XObjectFormType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="6" testNumber="40159"/>
			<description>Entry Type with type Name in XObjectFormType1 shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormType1 has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40160"/>
			<description>Entry XUID with type Array in XObjectFormType1 shall be object ArrayOfIntegersGeneral</description>
			<test>XUIDHasTypeArray != true || XUID_size == 1</test>
			<error>
				<message>Entry XUID with type Array in XObjectFormType1 is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40161"/>
			<description>Entry XUID in XObjectFormType1 shall have type Array</description>
			<test>containsXUID == false || XUIDHasTypeArray == true</test>
			<error>
				<message>Entry XUID in XObjectFormType1 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_5" clause="5" testNumber="40162"/>
			<description>Entry XUID in XObjectFormType1 is deprecated since PDF 1.3</description>
			<test>containsXUID == false</test>
			<error>
				<message>Entry XUID in XObjectFormType1 is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="1" testNumber="40640"/>
			<description>XObjectImage shall not contain entries except Alternates, BitsPerComponent, ColorSpace, DL, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Height, ID, ImageMask, Intent, Interpolate, Length, Mask, Metadata, Name, OC, OPI, SMask, SMaskInData, StructParent, Subtype, Type, Width</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Alternates' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Mask' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'SMaskInData' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width').length == 0</test>
			<error>
				<message>XObjectImage contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Alternates' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Mask' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'SMaskInData' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40641"/>
			<description>Entry Alternates with type Array in XObjectImage shall be object ArrayOfImageAlternates</description>
			<test>AlternatesHasTypeArray != true || Alternates_size == 1</test>
			<error>
				<message>Entry Alternates with type Array in XObjectImage is not object ArrayOfImageAlternates</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40642"/>
			<description>Entry Alternates in XObjectImage shall have type Array</description>
			<test>containsAlternates == false || AlternatesHasTypeArray == true</test>
			<error>
				<message>Entry Alternates in XObjectImage is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40643"/>
			<description>Entry BitsPerComponent in XObjectImage shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="11" testNumber="40644"/>
			<description>Entry BitsPerComponent in XObjectImage is required, when fn:IsRequired(fn:Not(fn:Contains(@Filter , JPXDecode) || (@ImageMask == true)))</description>
			<test>(containsBitsPerComponent == true || (((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "JPXDecode").length &gt; 0) || (ImageMaskBooleanValue == true)) != true) == false)</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="15" testNumber="40645"/>
			<description>Entry BitsPerComponent in XObjectImage shall have Integer value 1, if this object satisfies condition (@Filter == CCITTFaxDecode) || (@Filter == JBIG2Decode) || (@ImageMask == true)</description>
			<test>(((FilterNameValue == "CCITTFaxDecode") || (FilterNameValue == "JBIG2Decode") || (ImageMaskBooleanValue == true)) == false || BitsPerComponentIntegerValue == 1)</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage does not have value 1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="15" testNumber="40646"/>
			<description>Entry BitsPerComponent in XObjectImage shall have Integer value 8, if this object satisfies condition (@Filter == RunLengthDecode) || (@Filter == DCTDecode)</description>
			<test>(((FilterNameValue == "RunLengthDecode") || (FilterNameValue == "DCTDecode")) == false || BitsPerComponentIntegerValue == 8)</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage does not have value 8</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="13" testNumber="40647"/>
			<description>Entry BitsPerComponent with type Integer in XObjectImage shall have one of values: 1, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in XObjectImage has incorrect value %2 instead of 1, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40648"/>
			<description>Entry ColorSpace with type Array in XObjectImage shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in XObjectImage is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40649"/>
			<description>Entry ColorSpace in XObjectImage shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in XObjectImage is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="11" testNumber="40650"/>
			<description>Entry ColorSpace in XObjectImage is required, when fn:IsRequired(fn:Not(fn:Contains(@Filter , JPXDecode) || (@ImageMask == true)))</description>
			<test>(containsColorSpace == true || (((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "JPXDecode").length &gt; 0) || (ImageMaskBooleanValue == true)) != true) == false)</test>
			<error>
				<message>Entry ColorSpace in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="9" testNumber="40651"/>
			<description>Entry ColorSpace with type Array in XObjectImage shall satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>ColorSpaceHasTypeArray != true || ((((ImageMaskBooleanValue == true) == true &amp;&amp; containsColorSpace == true)) != true)</test>
			<error>
				<message>Entry ColorSpace with type Array in XObjectImage does not satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="6" testNumber="40652"/>
			<description>Entry ColorSpace with type Name in XObjectImage shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in XObjectImage has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="9" testNumber="40653"/>
			<description>Entry ColorSpace with type Name in XObjectImage shall satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>ColorSpaceHasTypeName != true || ((((ImageMaskBooleanValue == true) == true &amp;&amp; containsColorSpace == true)) != true)</test>
			<error>
				<message>Entry ColorSpace with type Name in XObjectImage does not satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40654"/>
			<description>Entry DL in XObjectImage shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="9" testNumber="40655"/>
			<description>Entry DL with type Integer in XObjectImage shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XObjectImage does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40656"/>
			<description>Entry Decode with type Array in XObjectImage shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in XObjectImage is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40657"/>
			<description>Entry Decode in XObjectImage shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in XObjectImage is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40658"/>
			<description>Entry DecodeParms with type Array in XObjectImage shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImage is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40659"/>
			<description>Entry DecodeParms with type Dictionary in XObjectImage shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectImage is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40660"/>
			<description>Entry DecodeParms in XObjectImage shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectImage is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="9" testNumber="40661"/>
			<description>Entry DecodeParms with type Array in XObjectImage shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImage does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40662"/>
			<description>Entry F with type Dictionary in XObjectImage shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectImage is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40663"/>
			<description>Entry F in XObjectImage shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in XObjectImage is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40664"/>
			<description>Entry FDecodeParms with type Array in XObjectImage shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectImage is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40665"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectImage shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectImage is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40666"/>
			<description>Entry FDecodeParms in XObjectImage shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectImage is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="9" testNumber="40667"/>
			<description>Entry FDecodeParms with type Array in XObjectImage shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectImage does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40668"/>
			<description>Entry FFilter with type Array in XObjectImage shall be object ArrayOfFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectImage is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40669"/>
			<description>Entry FFilter in XObjectImage shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectImage is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="9" testNumber="40670"/>
			<description>Entry FFilter with type Array in XObjectImage shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectImage does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="6" testNumber="40671"/>
			<description>Entry FFilter with type Name in XObjectImage shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "JBIG2Decode" || FFilterNameValue == "DCTDecode" || FFilterNameValue == "JPXDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectImage has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40672"/>
			<description>Entry Filter with type Array in XObjectImage shall be object ArrayOfFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectImage is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40673"/>
			<description>Entry Filter in XObjectImage shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectImage is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="9" testNumber="40674"/>
			<description>Entry Filter with type Array in XObjectImage shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectImage does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="6" testNumber="40675"/>
			<description>Entry Filter with type Name in XObjectImage shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "JBIG2Decode" || FilterNameValue == "DCTDecode" || FilterNameValue == "JPXDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectImage has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40676"/>
			<description>Entry Height in XObjectImage shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="7" testNumber="40677"/>
			<description>Entry Height in XObjectImage is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40678"/>
			<description>Entry ID in XObjectImage shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in XObjectImage is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40679"/>
			<description>Entry ImageMask in XObjectImage shall have type Boolean</description>
			<test>containsImageMask == false || ImageMaskHasTypeBoolean == true</test>
			<error>
				<message>Entry ImageMask in XObjectImage is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="9" testNumber="40680"/>
			<description>Entry ImageMask with type Boolean in XObjectImage shall satisfy special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1) &amp;&amp; fn:Not(fn:IsPresent(ColorSpace)) &amp;&amp; fn:Not(fn:IsPresent(Mask))) || (@ImageMask == false))</description>
			<test>ImageMaskHasTypeBoolean != true || (((ImageMaskBooleanValue == true) &amp;&amp; (BitsPerComponentIntegerValue == 1) &amp;&amp; ((containsColorSpace == true)) != true &amp;&amp; ((containsMask == true)) != true) || (ImageMaskBooleanValue == false))</test>
			<error>
				<message>Entry ImageMask with type Boolean in XObjectImage does not satisfy special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1) &amp;&amp; fn:Not(fn:IsPresent(ColorSpace)) &amp;&amp; fn:Not(fn:IsPresent(Mask))) || (@ImageMask == false))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40681"/>
			<description>Entry Intent in XObjectImage shall have type Name</description>
			<test>containsIntent == false || IntentHasTypeName == true</test>
			<error>
				<message>Entry Intent in XObjectImage is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40682"/>
			<description>Entry Interpolate in XObjectImage shall have type Boolean</description>
			<test>containsInterpolate == false || InterpolateHasTypeBoolean == true</test>
			<error>
				<message>Entry Interpolate in XObjectImage is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40683"/>
			<description>Entry Length in XObjectImage shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="7" testNumber="40684"/>
			<description>Entry Length in XObjectImage is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40685"/>
			<description>Entry Mask with type Array in XObjectImage shall be object ArrayOfIntegersGeneral</description>
			<test>MaskHasTypeArray != true || Mask_size == 1</test>
			<error>
				<message>Entry Mask with type Array in XObjectImage is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40686"/>
			<description>Entry Mask with type Stream in XObjectImage shall be object XObjectImageMask</description>
			<test>MaskHasTypeStream != true || Mask_size == 1</test>
			<error>
				<message>Entry Mask with type Stream in XObjectImage is not object XObjectImageMask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40687"/>
			<description>Entry Mask in XObjectImage shall have one of types: Array, Stream</description>
			<test>containsMask == false || MaskHasTypeArray == true || MaskHasTypeStream == true</test>
			<error>
				<message>Entry Mask in XObjectImage is not one of types: Array, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="9" testNumber="40688"/>
			<description>Entry Mask with type Array in XObjectImage shall satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>MaskHasTypeArray != true || ((((ImageMaskBooleanValue == true) == true &amp;&amp; containsMask == true)) != true)</test>
			<error>
				<message>Entry Mask with type Array in XObjectImage does not satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="10" testNumber="40689"/>
			<description>Entry Mask with type Stream in XObjectImage shall be indirect</description>
			<test>MaskHasTypeStream != true || isMaskIndirect == true</test>
			<error>
				<message>Entry Mask with type Stream in XObjectImage is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="9" testNumber="40690"/>
			<description>Entry Mask with type Stream in XObjectImage shall satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>MaskHasTypeStream != true || ((((ImageMaskBooleanValue == true) == true &amp;&amp; containsMask == true)) != true)</test>
			<error>
				<message>Entry Mask with type Stream in XObjectImage does not satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40691"/>
			<description>Entry Metadata with type Stream in XObjectImage shall be object Metadata</description>
			<test>MetadataHasTypeStream != true || Metadata_size == 1</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectImage is not object Metadata</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40692"/>
			<description>Entry Metadata in XObjectImage shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in XObjectImage is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="10" testNumber="40693"/>
			<description>Entry Metadata with type Stream in XObjectImage shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectImage is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40694"/>
			<description>Entry Name in XObjectImage shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectImage is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="11" testNumber="40695"/>
			<description>Entry Name in XObjectImage is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40696"/>
			<description>Entry OC with type Dictionary in XObjectImage shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in XObjectImage is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40697"/>
			<description>Entry OC in XObjectImage shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in XObjectImage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40698"/>
			<description>Entry OPI with type Dictionary in XObjectImage shall be one of objects OPIVersion13, OPIVersion20</description>
			<test>OPIHasTypeDictionary != true || OPI_size == 1</test>
			<error>
				<message>Entry OPI with type Dictionary in XObjectImage is not one of objects OPIVersion13, OPIVersion20</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40699"/>
			<description>Entry OPI in XObjectImage shall have type Dictionary</description>
			<test>containsOPI == false || OPIHasTypeDictionary == true</test>
			<error>
				<message>Entry OPI in XObjectImage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="17" testNumber="40700"/>
			<description>Entry SMask with type Stream in XObjectImage shall be object XObjectImageSoftMask</description>
			<test>SMaskHasTypeStream != true || SMask_size == 1</test>
			<error>
				<message>Entry SMask with type Stream in XObjectImage is not object XObjectImageSoftMask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40701"/>
			<description>Entry SMask in XObjectImage shall have type Stream</description>
			<test>containsSMask == false || SMaskHasTypeStream == true</test>
			<error>
				<message>Entry SMask in XObjectImage is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="10" testNumber="40702"/>
			<description>Entry SMask with type Stream in XObjectImage shall be indirect</description>
			<test>SMaskHasTypeStream != true || isSMaskIndirect == true</test>
			<error>
				<message>Entry SMask with type Stream in XObjectImage is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="9" testNumber="40703"/>
			<description>Entry SMask with type Stream in XObjectImage shall satisfy special case: fn:SinceVersion(1.5 , fn:Not(fn:IsPresent(@SMaskInData &gt; 0)))</description>
			<test>SMaskHasTypeStream != true || ((((SMaskInDataIntegerValue &gt; 0) == true &amp;&amp; containsSMask == true)) != true)</test>
			<error>
				<message>Entry SMask with type Stream in XObjectImage does not satisfy special case: fn:SinceVersion(1.5 , fn:Not(fn:IsPresent(@SMaskInData &gt; 0)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40704"/>
			<description>Entry SMaskInData in XObjectImage shall have type Integer</description>
			<test>containsSMaskInData == false || SMaskInDataHasTypeInteger == true</test>
			<error>
				<message>Entry SMaskInData in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="6" testNumber="40705"/>
			<description>Entry SMaskInData with type Integer in XObjectImage shall have one of values: 0, 1, 2</description>
			<test>SMaskInDataHasTypeInteger != true || SMaskInDataIntegerValue == 0 || SMaskInDataIntegerValue == 1 || SMaskInDataIntegerValue == 2</test>
			<error>
				<message>Entry SMaskInData with type Integer in XObjectImage has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SMaskInDataIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40706"/>
			<description>Entry StructParent in XObjectImage shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage" deferred="true">
			<id specification="ISO_32000_1_5" clause="11" testNumber="40707"/>
			<description>Entry StructParent in XObjectImage is required, when fn:IsRequired(fn:ImageIsStructContentItem())</description>
			<test>(containsStructParent == true || ((imageIsStructContentItem == true &amp;&amp; SubtypeNameValue == "Image")) == false)</test>
			<error>
				<message>Entry StructParent in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40708"/>
			<description>Entry Subtype in XObjectImage shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectImage is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="7" testNumber="40709"/>
			<description>Entry Subtype in XObjectImage is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="6" testNumber="40710"/>
			<description>Entry Subtype with type Name in XObjectImage shall have value Image</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Image"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectImage has incorrect value %2 instead of Image</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40711"/>
			<description>Entry Type in XObjectImage shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectImage is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="6" testNumber="40712"/>
			<description>Entry Type with type Name in XObjectImage shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectImage has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="8" testNumber="40713"/>
			<description>Entry Width in XObjectImage shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_5" clause="7" testNumber="40714"/>
			<description>Entry Width in XObjectImage is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="1" testNumber="41071"/>
			<description>XObjectImageMask shall not contain entries except Alternates, BitsPerComponent, DL, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Height, ID, ImageMask, Intent, Interpolate, Length, Metadata, Name, OC, OPI, SMask, SMaskInData, StructParent, Subtype, Type, Width</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Alternates' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'SMaskInData' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width').length == 0</test>
			<error>
				<message>XObjectImageMask contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Alternates' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'SMaskInData' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41072"/>
			<description>Entry Alternates with type Array in XObjectImageMask shall be object ArrayOfImageAlternates</description>
			<test>AlternatesHasTypeArray != true || Alternates_size == 1</test>
			<error>
				<message>Entry Alternates with type Array in XObjectImageMask is not object ArrayOfImageAlternates</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41073"/>
			<description>Entry Alternates in XObjectImageMask shall have type Array</description>
			<test>containsAlternates == false || AlternatesHasTypeArray == true</test>
			<error>
				<message>Entry Alternates in XObjectImageMask is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41074"/>
			<description>Entry BitsPerComponent in XObjectImageMask shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImageMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="6" testNumber="41075"/>
			<description>Entry BitsPerComponent with type Integer in XObjectImageMask shall have value 1</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in XObjectImageMask has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41076"/>
			<description>Entry DL in XObjectImageMask shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XObjectImageMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41077"/>
			<description>Entry DL with type Integer in XObjectImageMask shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XObjectImageMask does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41078"/>
			<description>Entry Decode with type Array in XObjectImageMask shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in XObjectImageMask is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41079"/>
			<description>Entry Decode in XObjectImageMask shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in XObjectImageMask is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="20" testNumber="41080"/>
			<description>Entry Decode with type Array in XObjectImageMask shall have one of values: [1,0], [0,1]</description>
			<test>(DecodeArraySize == 2 &amp;&amp; Decode0IntegerValue == 0 &amp;&amp; Decode1IntegerValue == 1) || (DecodeArraySize == 2 &amp;&amp; Decode0IntegerValue == 1 &amp;&amp; Decode1IntegerValue == 0)</test>
			<error>
				<message>Entry Decode with type Array in XObjectImageMask has incorrect value instead of [1,0], [0,1]</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41081"/>
			<description>Entry DecodeParms with type Array in XObjectImageMask shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImageMask is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41082"/>
			<description>Entry DecodeParms with type Dictionary in XObjectImageMask shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectImageMask is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41083"/>
			<description>Entry DecodeParms in XObjectImageMask shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectImageMask is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41084"/>
			<description>Entry DecodeParms with type Array in XObjectImageMask shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImageMask does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41085"/>
			<description>Entry F with type Dictionary in XObjectImageMask shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectImageMask is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41086"/>
			<description>Entry F in XObjectImageMask shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in XObjectImageMask is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41087"/>
			<description>Entry FDecodeParms with type Array in XObjectImageMask shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectImageMask is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41088"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectImageMask shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectImageMask is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41089"/>
			<description>Entry FDecodeParms in XObjectImageMask shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectImageMask is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41090"/>
			<description>Entry FDecodeParms with type Array in XObjectImageMask shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectImageMask does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41091"/>
			<description>Entry FFilter with type Array in XObjectImageMask shall be object ArrayOfFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectImageMask is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41092"/>
			<description>Entry FFilter in XObjectImageMask shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectImageMask is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41093"/>
			<description>Entry FFilter with type Array in XObjectImageMask shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectImageMask does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="6" testNumber="41094"/>
			<description>Entry FFilter with type Name in XObjectImageMask shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "JBIG2Decode" || FFilterNameValue == "DCTDecode" || FFilterNameValue == "JPXDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectImageMask has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41095"/>
			<description>Entry Filter with type Array in XObjectImageMask shall be object ArrayOfFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectImageMask is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41096"/>
			<description>Entry Filter in XObjectImageMask shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectImageMask is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41097"/>
			<description>Entry Filter with type Array in XObjectImageMask shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectImageMask does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="6" testNumber="41098"/>
			<description>Entry Filter with type Name in XObjectImageMask shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "JBIG2Decode" || FilterNameValue == "DCTDecode" || FilterNameValue == "JPXDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectImageMask has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41099"/>
			<description>Entry Height in XObjectImageMask shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in XObjectImageMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="7" testNumber="41100"/>
			<description>Entry Height in XObjectImageMask is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in XObjectImageMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41101"/>
			<description>Entry ID in XObjectImageMask shall have type String</description>
			<test>containsID == false || entryIDHasTypeString == true</test>
			<error>
				<message>Entry ID in XObjectImageMask is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41102"/>
			<description>Entry ImageMask in XObjectImageMask shall have type Boolean</description>
			<test>containsImageMask == false || ImageMaskHasTypeBoolean == true</test>
			<error>
				<message>Entry ImageMask in XObjectImageMask is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="7" testNumber="41103"/>
			<description>Entry ImageMask in XObjectImageMask is required</description>
			<test>containsImageMask == true</test>
			<error>
				<message>Entry ImageMask in XObjectImageMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41104"/>
			<description>Entry ImageMask with type Boolean in XObjectImageMask shall satisfy special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1) &amp;&amp; fn:Not(fn:IsPresent(ColorSpace)) &amp;&amp; fn:Not(fn:IsPresent(Mask))) || (@ImageMask == false))</description>
			<test>ImageMaskHasTypeBoolean != true || (((ImageMaskBooleanValue == true) &amp;&amp; (BitsPerComponentIntegerValue == 1) &amp;&amp; ((containsColorSpace == true)) != true &amp;&amp; ((containsMask == true)) != true) || (ImageMaskBooleanValue == false))</test>
			<error>
				<message>Entry ImageMask with type Boolean in XObjectImageMask does not satisfy special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1) &amp;&amp; fn:Not(fn:IsPresent(ColorSpace)) &amp;&amp; fn:Not(fn:IsPresent(Mask))) || (@ImageMask == false))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41105"/>
			<description>Entry Intent in XObjectImageMask shall have type Name</description>
			<test>containsIntent == false || IntentHasTypeName == true</test>
			<error>
				<message>Entry Intent in XObjectImageMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41106"/>
			<description>Entry Interpolate in XObjectImageMask shall have type Boolean</description>
			<test>containsInterpolate == false || InterpolateHasTypeBoolean == true</test>
			<error>
				<message>Entry Interpolate in XObjectImageMask is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41107"/>
			<description>Entry Length in XObjectImageMask shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectImageMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="7" testNumber="41108"/>
			<description>Entry Length in XObjectImageMask is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectImageMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41109"/>
			<description>Entry Metadata with type Stream in XObjectImageMask shall be object Metadata</description>
			<test>MetadataHasTypeStream != true || Metadata_size == 1</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectImageMask is not object Metadata</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41110"/>
			<description>Entry Metadata in XObjectImageMask shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in XObjectImageMask is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="10" testNumber="41111"/>
			<description>Entry Metadata with type Stream in XObjectImageMask shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectImageMask is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41112"/>
			<description>Entry Name in XObjectImageMask shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectImageMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41113"/>
			<description>Entry OC with type Dictionary in XObjectImageMask shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in XObjectImageMask is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41114"/>
			<description>Entry OC in XObjectImageMask shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in XObjectImageMask is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41115"/>
			<description>Entry OPI with type Dictionary in XObjectImageMask shall be one of objects OPIVersion13, OPIVersion20</description>
			<test>OPIHasTypeDictionary != true || OPI_size == 1</test>
			<error>
				<message>Entry OPI with type Dictionary in XObjectImageMask is not one of objects OPIVersion13, OPIVersion20</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41116"/>
			<description>Entry OPI in XObjectImageMask shall have type Dictionary</description>
			<test>containsOPI == false || OPIHasTypeDictionary == true</test>
			<error>
				<message>Entry OPI in XObjectImageMask is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41117"/>
			<description>Entry SMask with type Stream in XObjectImageMask shall be object XObjectImageSoftMask</description>
			<test>SMaskHasTypeStream != true || SMask_size == 1</test>
			<error>
				<message>Entry SMask with type Stream in XObjectImageMask is not object XObjectImageSoftMask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41118"/>
			<description>Entry SMask in XObjectImageMask shall have type Stream</description>
			<test>containsSMask == false || SMaskHasTypeStream == true</test>
			<error>
				<message>Entry SMask in XObjectImageMask is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="10" testNumber="41119"/>
			<description>Entry SMask with type Stream in XObjectImageMask shall be indirect</description>
			<test>SMaskHasTypeStream != true || isSMaskIndirect == true</test>
			<error>
				<message>Entry SMask with type Stream in XObjectImageMask is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41120"/>
			<description>Entry SMaskInData in XObjectImageMask shall have type Integer</description>
			<test>containsSMaskInData == false || SMaskInDataHasTypeInteger == true</test>
			<error>
				<message>Entry SMaskInData in XObjectImageMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41121"/>
			<description>Entry StructParent in XObjectImageMask shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in XObjectImageMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask" deferred="true">
			<id specification="ISO_32000_1_5" clause="11" testNumber="41122"/>
			<description>Entry StructParent in XObjectImageMask is required, when fn:IsRequired(fn:ImageIsStructContentItem())</description>
			<test>(containsStructParent == true || ((imageIsStructContentItem == true &amp;&amp; SubtypeNameValue == "Image")) == false)</test>
			<error>
				<message>Entry StructParent in XObjectImageMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41123"/>
			<description>Entry Subtype in XObjectImageMask shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectImageMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="7" testNumber="41124"/>
			<description>Entry Subtype in XObjectImageMask is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectImageMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="6" testNumber="41125"/>
			<description>Entry Subtype with type Name in XObjectImageMask shall have value Image</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Image"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectImageMask has incorrect value %2 instead of Image</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41126"/>
			<description>Entry Type in XObjectImageMask shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectImageMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="6" testNumber="41127"/>
			<description>Entry Type with type Name in XObjectImageMask shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectImageMask has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41128"/>
			<description>Entry Width in XObjectImageMask shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in XObjectImageMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_5" clause="7" testNumber="41129"/>
			<description>Entry Width in XObjectImageMask is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in XObjectImageMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="1" testNumber="41371"/>
			<description>XObjectImageSoftMask shall not contain entries except BitsPerComponent, ColorSpace, DL, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Height, ImageMask, Intent, Interpolate, Length, Matte, Metadata, Name, Subtype, Type, Width</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matte' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width').length == 0</test>
			<error>
				<message>XObjectImageSoftMask contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matte' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41372"/>
			<description>Entry BitsPerComponent in XObjectImageSoftMask shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImageSoftMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="11" testNumber="41373"/>
			<description>Entry BitsPerComponent in XObjectImageSoftMask is required, when fn:IsRequired(fn:Not(fn:Contains(@Filter , JPXDecode) || (@ImageMask == true)))</description>
			<test>(containsBitsPerComponent == true || (((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "JPXDecode").length &gt; 0) || (ImageMaskBooleanValue == true)) != true) == false)</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImageSoftMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="15" testNumber="41374"/>
			<description>Entry BitsPerComponent in XObjectImageSoftMask shall have Integer value 1, if this object satisfies condition (fn:Contains(@Filter , CCITTFaxDecode) || fn:Contains(@Filter , JBIG2Decode))</description>
			<test>((((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "CCITTFaxDecode").length &gt; 0) || (FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "JBIG2Decode").length &gt; 0))) == false || BitsPerComponentIntegerValue == 1)</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImageSoftMask does not have value 1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="15" testNumber="41375"/>
			<description>Entry BitsPerComponent in XObjectImageSoftMask shall have Integer value 8, if this object satisfies condition (fn:Contains(@Filter , RunLengthDecode) || fn:Contains(@Filter , DCTDecode))</description>
			<test>((((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "RunLengthDecode").length &gt; 0) || (FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "DCTDecode").length &gt; 0))) == false || BitsPerComponentIntegerValue == 8)</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImageSoftMask does not have value 8</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="13" testNumber="41376"/>
			<description>Entry BitsPerComponent with type Integer in XObjectImageSoftMask shall have one of values: 1, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in XObjectImageSoftMask has incorrect value %2 instead of 1, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41377"/>
			<description>Entry ColorSpace in XObjectImageSoftMask shall have type Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in XObjectImageSoftMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="7" testNumber="41378"/>
			<description>Entry ColorSpace in XObjectImageSoftMask is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in XObjectImageSoftMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="6" testNumber="41379"/>
			<description>Entry ColorSpace with type Name in XObjectImageSoftMask shall have value DeviceGray</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in XObjectImageSoftMask has incorrect value %2 instead of DeviceGray</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41380"/>
			<description>Entry DL in XObjectImageSoftMask shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XObjectImageSoftMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41381"/>
			<description>Entry DL with type Integer in XObjectImageSoftMask shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XObjectImageSoftMask does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41382"/>
			<description>Entry Decode with type Array in XObjectImageSoftMask shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in XObjectImageSoftMask is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41383"/>
			<description>Entry Decode in XObjectImageSoftMask shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in XObjectImageSoftMask is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41384"/>
			<description>Entry DecodeParms with type Array in XObjectImageSoftMask shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImageSoftMask is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41385"/>
			<description>Entry DecodeParms with type Dictionary in XObjectImageSoftMask shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectImageSoftMask is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41386"/>
			<description>Entry DecodeParms in XObjectImageSoftMask shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectImageSoftMask is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41387"/>
			<description>Entry DecodeParms with type Array in XObjectImageSoftMask shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImageSoftMask does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41388"/>
			<description>Entry F with type Dictionary in XObjectImageSoftMask shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectImageSoftMask is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41389"/>
			<description>Entry F in XObjectImageSoftMask shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in XObjectImageSoftMask is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41390"/>
			<description>Entry FDecodeParms with type Array in XObjectImageSoftMask shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectImageSoftMask is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41391"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectImageSoftMask shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectImageSoftMask is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41392"/>
			<description>Entry FDecodeParms in XObjectImageSoftMask shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectImageSoftMask is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41393"/>
			<description>Entry FDecodeParms with type Array in XObjectImageSoftMask shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectImageSoftMask does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41394"/>
			<description>Entry FFilter with type Array in XObjectImageSoftMask shall be object ArrayOfFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectImageSoftMask is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41395"/>
			<description>Entry FFilter in XObjectImageSoftMask shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectImageSoftMask is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41396"/>
			<description>Entry FFilter with type Array in XObjectImageSoftMask shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectImageSoftMask does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="6" testNumber="41397"/>
			<description>Entry FFilter with type Name in XObjectImageSoftMask shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "JBIG2Decode" || FFilterNameValue == "DCTDecode" || FFilterNameValue == "JPXDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectImageSoftMask has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41398"/>
			<description>Entry Filter with type Array in XObjectImageSoftMask shall be object ArrayOfFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectImageSoftMask is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41399"/>
			<description>Entry Filter in XObjectImageSoftMask shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectImageSoftMask is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41400"/>
			<description>Entry Filter with type Array in XObjectImageSoftMask shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectImageSoftMask does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="6" testNumber="41401"/>
			<description>Entry Filter with type Name in XObjectImageSoftMask shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "JBIG2Decode" || FilterNameValue == "DCTDecode" || FilterNameValue == "JPXDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectImageSoftMask has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41402"/>
			<description>Entry Height in XObjectImageSoftMask shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in XObjectImageSoftMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="7" testNumber="41403"/>
			<description>Entry Height in XObjectImageSoftMask is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in XObjectImageSoftMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41404"/>
			<description>Entry Height with type Integer in XObjectImageSoftMask shall satisfy special case: fn:Eval(fn:IsPresent(Matte , (@Height == parent::@Height)))</description>
			<test>HeightHasTypeInteger != true || (((containsMatte == false) || ((HeightIntegerValue == parentHeightIntegerValue)) == true))</test>
			<error>
				<message>Entry Height with type Integer in XObjectImageSoftMask does not satisfy special case: fn:Eval(fn:IsPresent(Matte , (@Height == parent::@Height)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41405"/>
			<description>Entry ImageMask in XObjectImageSoftMask shall have type Boolean</description>
			<test>containsImageMask == false || ImageMaskHasTypeBoolean == true</test>
			<error>
				<message>Entry ImageMask in XObjectImageSoftMask is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41406"/>
			<description>Entry ImageMask with type Boolean in XObjectImageSoftMask shall satisfy special case: fn:Eval(@ImageMask == false)</description>
			<test>ImageMaskHasTypeBoolean != true || (ImageMaskBooleanValue == false)</test>
			<error>
				<message>Entry ImageMask with type Boolean in XObjectImageSoftMask does not satisfy special case: fn:Eval(@ImageMask == false)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41407"/>
			<description>Entry Intent in XObjectImageSoftMask shall have type Name</description>
			<test>containsIntent == false || IntentHasTypeName == true</test>
			<error>
				<message>Entry Intent in XObjectImageSoftMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41408"/>
			<description>Entry Interpolate in XObjectImageSoftMask shall have type Boolean</description>
			<test>containsInterpolate == false || InterpolateHasTypeBoolean == true</test>
			<error>
				<message>Entry Interpolate in XObjectImageSoftMask is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41409"/>
			<description>Entry Length in XObjectImageSoftMask shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectImageSoftMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="7" testNumber="41410"/>
			<description>Entry Length in XObjectImageSoftMask is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectImageSoftMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41411"/>
			<description>Entry Matte with type Array in XObjectImageSoftMask shall be object ArrayOfNumbersGeneral</description>
			<test>MatteHasTypeArray != true || Matte_size == 1</test>
			<error>
				<message>Entry Matte with type Array in XObjectImageSoftMask is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41412"/>
			<description>Entry Matte in XObjectImageSoftMask shall have type Array</description>
			<test>containsMatte == false || MatteHasTypeArray == true</test>
			<error>
				<message>Entry Matte in XObjectImageSoftMask is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41413"/>
			<description>Entry Matte with type Array in XObjectImageSoftMask shall satisfy special case: fn:Eval(fn:ArrayLength(Matte) &gt; 0)</description>
			<test>MatteHasTypeArray != true || (MatteArraySize &gt; 0)</test>
			<error>
				<message>Entry Matte with type Array in XObjectImageSoftMask does not satisfy special case: fn:Eval(fn:ArrayLength(Matte) &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41414"/>
			<description>Entry Metadata with type Stream in XObjectImageSoftMask shall be object Metadata</description>
			<test>MetadataHasTypeStream != true || Metadata_size == 1</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectImageSoftMask is not object Metadata</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41415"/>
			<description>Entry Metadata in XObjectImageSoftMask shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in XObjectImageSoftMask is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="10" testNumber="41416"/>
			<description>Entry Metadata with type Stream in XObjectImageSoftMask shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectImageSoftMask is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41417"/>
			<description>Entry Name in XObjectImageSoftMask shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectImageSoftMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41418"/>
			<description>Entry Subtype in XObjectImageSoftMask shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectImageSoftMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="7" testNumber="41419"/>
			<description>Entry Subtype in XObjectImageSoftMask is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectImageSoftMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="6" testNumber="41420"/>
			<description>Entry Subtype with type Name in XObjectImageSoftMask shall have value Image</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Image"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectImageSoftMask has incorrect value %2 instead of Image</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41421"/>
			<description>Entry Type in XObjectImageSoftMask shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectImageSoftMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="6" testNumber="41422"/>
			<description>Entry Type with type Name in XObjectImageSoftMask shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectImageSoftMask has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41423"/>
			<description>Entry Width in XObjectImageSoftMask shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in XObjectImageSoftMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="7" testNumber="41424"/>
			<description>Entry Width in XObjectImageSoftMask is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in XObjectImageSoftMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41425"/>
			<description>Entry Width with type Integer in XObjectImageSoftMask shall satisfy special case: fn:Eval(fn:IsPresent(Matte , (@Width == parent::@Width)))</description>
			<test>WidthHasTypeInteger != true || (((containsMatte == false) || ((WidthIntegerValue == parentWidthIntegerValue)) == true))</test>
			<error>
				<message>Entry Width with type Integer in XObjectImageSoftMask does not satisfy special case: fn:Eval(fn:IsPresent(Matte , (@Width == parent::@Width)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectMapEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41606"/>
			<description>Entry with type Stream in XObjectMap shall be one of objects XObjectFormType1, XObjectImage, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in XObjectMap is not one of objects XObjectFormType1, XObjectImage, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectMapEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41607"/>
			<description>Entry in XObjectMap shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in XObjectMap is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectMapEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="41608"/>
			<description>Entry with type Stream in XObjectMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in XObjectMap is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="1" testNumber="41618"/>
			<description>XRefStream shall not contain entries except DL, DecodeParms, Encrypt, F, FDecodeParms, FFilter, Filter, ID, Index, Info, Length, Prev, Root, Size, Type, W</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Encrypt' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Index' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Root' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W').length == 0</test>
			<error>
				<message>XRefStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Encrypt' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Index' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Root' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41619"/>
			<description>Entry DL in XRefStream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XRefStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="14" testNumber="41620"/>
			<description>Entry DL with type Integer in XRefStream shall satisfy possible value predicate: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || DLIntegerValue &gt;= 0</test>
			<error>
				<message>Entry DL with type Integer in XRefStream does not satisfy possible value predicate: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41621"/>
			<description>Entry DL with type Integer in XRefStream shall satisfy special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XRefStream does not satisfy special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41622"/>
			<description>Entry DecodeParms with type Array in XRefStream shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XRefStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41623"/>
			<description>Entry DecodeParms with type Dictionary in XRefStream shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XRefStream is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41624"/>
			<description>Entry DecodeParms in XRefStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XRefStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="16" testNumber="41625"/>
			<description>If entry DecodeParms with type Array in XRefStream satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>DecodeParmsHasTypeArray != true || (isDecodeParmsIndirect == false)</test>
			<error>
				<message>Entry DecodeParms with type Array in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41626"/>
			<description>Entry DecodeParms with type Array in XRefStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XRefStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="16" testNumber="41627"/>
			<description>If entry DecodeParms with type Dictionary in XRefStream satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>DecodeParmsHasTypeDictionary != true || (isDecodeParmsIndirect == false)</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41628"/>
			<description>Entry Encrypt with type Dictionary in XRefStream shall be one of objects EncryptionStandard, EncryptionPublicKey</description>
			<test>EncryptHasTypeDictionary != true || Encrypt_size == 1</test>
			<error>
				<message>Entry Encrypt with type Dictionary in XRefStream is not one of objects EncryptionStandard, EncryptionPublicKey</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41629"/>
			<description>Entry Encrypt in XRefStream shall have type Dictionary</description>
			<test>containsEncrypt == false || EncryptHasTypeDictionary == true</test>
			<error>
				<message>Entry Encrypt in XRefStream is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41630"/>
			<description>Entry F with type Dictionary in XRefStream shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XRefStream is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41631"/>
			<description>Entry F in XRefStream shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in XRefStream is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41632"/>
			<description>Entry FDecodeParms with type Array in XRefStream shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XRefStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41633"/>
			<description>Entry FDecodeParms with type Dictionary in XRefStream shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XRefStream is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41634"/>
			<description>Entry FDecodeParms in XRefStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XRefStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41635"/>
			<description>Entry FDecodeParms with type Array in XRefStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XRefStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41636"/>
			<description>Entry FFilter with type Array in XRefStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XRefStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41637"/>
			<description>Entry FFilter in XRefStream shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XRefStream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41638"/>
			<description>Entry FFilter with type Array in XRefStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XRefStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="41639"/>
			<description>Entry FFilter with type Name in XRefStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in XRefStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41640"/>
			<description>Entry Filter with type Array in XRefStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XRefStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41641"/>
			<description>Entry Filter in XRefStream shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XRefStream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="16" testNumber="41642"/>
			<description>If entry Filter with type Array in XRefStream satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>FilterHasTypeArray != true || (isFilterIndirect == false)</test>
			<error>
				<message>Entry Filter with type Array in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41643"/>
			<description>Entry Filter with type Array in XRefStream shall satisfy special case: fn:Eval((fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter)) &amp;&amp; fn:Not(fn:Contains(@Filter , Crypt)))</description>
			<test>FilterHasTypeArray != true || ((DecodeParmsArraySize == FilterArraySize) &amp;&amp; ((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "Crypt").length &gt; 0)) != true)</test>
			<error>
				<message>Entry Filter with type Array in XRefStream does not satisfy special case: fn:Eval((fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter)) &amp;&amp; fn:Not(fn:Contains(@Filter , Crypt)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="16" testNumber="41644"/>
			<description>If entry Filter with type Name in XRefStream satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>FilterHasTypeName != true || (isFilterIndirect == false)</test>
			<error>
				<message>Entry Filter with type Name in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="41645"/>
			<description>Entry Filter with type Name in XRefStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in XRefStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41646"/>
			<description>Entry ID with type Array in XRefStream shall be object TrailerIDArray</description>
			<test>entryIDHasTypeArray != true || entryID_size == 1</test>
			<error>
				<message>Entry ID with type Array in XRefStream is not object TrailerIDArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41647"/>
			<description>Entry ID in XRefStream shall have type Array</description>
			<test>containsID == false || entryIDHasTypeArray == true</test>
			<error>
				<message>Entry ID in XRefStream is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="11" testNumber="41648"/>
			<description>Entry ID in XRefStream is required, when fn:IsRequired(fn:IsPresent(Encrypt))</description>
			<test>(containsID == true || ((containsEncrypt == true)) == false)</test>
			<error>
				<message>Entry ID in XRefStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="16" testNumber="41649"/>
			<description>If entry ID with type Array in XRefStream satisfies condition fn:MustBeDirect(fn:IsPresent(Encrypt)), it shall be direct</description>
			<test>entryIDHasTypeArray != true || (isentryIDIndirect == false || ((containsEncrypt == true)) == false)</test>
			<error>
				<message>Entry ID with type Array in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41650"/>
			<description>Entry Index with type Array in XRefStream shall be object ArrayOfXRefIndexIntegers</description>
			<test>IndexHasTypeArray != true || Index_size == 1</test>
			<error>
				<message>Entry Index with type Array in XRefStream is not object ArrayOfXRefIndexIntegers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41651"/>
			<description>Entry Index in XRefStream shall have type Array</description>
			<test>containsIndex == false || IndexHasTypeArray == true</test>
			<error>
				<message>Entry Index in XRefStream is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="16" testNumber="41652"/>
			<description>If entry Index with type Array in XRefStream satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>IndexHasTypeArray != true || (isIndexIndirect == false)</test>
			<error>
				<message>Entry Index with type Array in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="9" testNumber="41653"/>
			<description>Entry Index with type Array in XRefStream shall satisfy special case: fn:Eval(((fn:ArrayLength(Index) mod 2) == 0) &amp;&amp; fn:ArraySortAscending(Index , 2))</description>
			<test>IndexHasTypeArray != true || (((IndexArraySize % 2) == 0) &amp;&amp; isIndexArraySortAscending2 == true)</test>
			<error>
				<message>Entry Index with type Array in XRefStream does not satisfy special case: fn:Eval(((fn:ArrayLength(Index) mod 2) == 0) &amp;&amp; fn:ArraySortAscending(Index , 2))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41654"/>
			<description>Entry Info with type Dictionary in XRefStream shall be object DocInfo</description>
			<test>InfoHasTypeDictionary != true || Info_size == 1</test>
			<error>
				<message>Entry Info with type Dictionary in XRefStream is not object DocInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41655"/>
			<description>Entry Info in XRefStream shall have type Dictionary</description>
			<test>containsInfo == false || InfoHasTypeDictionary == true</test>
			<error>
				<message>Entry Info in XRefStream is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="12" testNumber="41656"/>
			<description>If entry Info with type Dictionary in XRefStream satisfies condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>InfoHasTypeDictionary != true || (isInfoIndirect == true || (true) == false)</test>
			<error>
				<message>Entry Info with type Dictionary in XRefStream is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41657"/>
			<description>Entry Length in XRefStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XRefStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="7" testNumber="41658"/>
			<description>Entry Length in XRefStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XRefStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="14" testNumber="41659"/>
			<description>Entry Length with type Integer in XRefStream shall satisfy possible value predicate: fn:Eval(@Length &gt;= 0)</description>
			<test>LengthHasTypeInteger != true || LengthIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Length with type Integer in XRefStream does not satisfy possible value predicate: fn:Eval(@Length &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41660"/>
			<description>Entry Prev in XRefStream shall have type Integer</description>
			<test>containsPrev == false || PrevHasTypeInteger == true</test>
			<error>
				<message>Entry Prev in XRefStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="16" testNumber="41661"/>
			<description>If entry Prev with type Integer in XRefStream satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>PrevHasTypeInteger != true || (isPrevIndirect == false)</test>
			<error>
				<message>Entry Prev with type Integer in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="14" testNumber="41662"/>
			<description>Entry Prev with type Integer in XRefStream shall satisfy possible value predicate: fn:Eval((@Prev &gt;= 0) &amp;&amp; (@Prev &lt;= fn:FileSize()))</description>
			<test>PrevHasTypeInteger != true || (PrevIntegerValue &gt;= 0) &amp;&amp; (PrevIntegerValue &lt;= fileSize)</test>
			<error>
				<message>Entry Prev with type Integer in XRefStream does not satisfy possible value predicate: fn:Eval((@Prev &gt;= 0) &amp;&amp; (@Prev &lt;= fn:FileSize()))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41663"/>
			<description>Entry Root with type Dictionary in XRefStream shall be object Catalog</description>
			<test>RootHasTypeDictionary != true || Root_size == 1</test>
			<error>
				<message>Entry Root with type Dictionary in XRefStream is not object Catalog</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41664"/>
			<description>Entry Root in XRefStream shall have type Dictionary</description>
			<test>containsRoot == false || RootHasTypeDictionary == true</test>
			<error>
				<message>Entry Root in XRefStream is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="7" testNumber="41665"/>
			<description>Entry Root in XRefStream is required</description>
			<test>containsRoot == true</test>
			<error>
				<message>Entry Root in XRefStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="10" testNumber="41666"/>
			<description>Entry Root with type Dictionary in XRefStream shall be indirect</description>
			<test>RootHasTypeDictionary != true || isRootIndirect == true</test>
			<error>
				<message>Entry Root with type Dictionary in XRefStream is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41667"/>
			<description>Entry Size in XRefStream shall have type Integer</description>
			<test>containsSize == false || SizeHasTypeInteger == true</test>
			<error>
				<message>Entry Size in XRefStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="7" testNumber="41668"/>
			<description>Entry Size in XRefStream is required</description>
			<test>containsSize == true</test>
			<error>
				<message>Entry Size in XRefStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="16" testNumber="41669"/>
			<description>If entry Size with type Integer in XRefStream satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>SizeHasTypeInteger != true || (isSizeIndirect == false)</test>
			<error>
				<message>Entry Size with type Integer in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="14" testNumber="41670"/>
			<description>Entry Size with type Integer in XRefStream shall satisfy possible value predicate: fn:Eval(@Size &gt; 1)</description>
			<test>SizeHasTypeInteger != true || SizeIntegerValue &gt; 1</test>
			<error>
				<message>Entry Size with type Integer in XRefStream does not satisfy possible value predicate: fn:Eval(@Size &gt; 1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41671"/>
			<description>Entry Type in XRefStream shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XRefStream is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="7" testNumber="41672"/>
			<description>Entry Type in XRefStream is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in XRefStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="16" testNumber="41673"/>
			<description>If entry Type with type Name in XRefStream satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>TypeHasTypeName != true || (isTypeIndirect == false)</test>
			<error>
				<message>Entry Type with type Name in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="6" testNumber="41674"/>
			<description>Entry Type with type Name in XRefStream shall have value XRef</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XRef"</test>
			<error>
				<message>Entry Type with type Name in XRefStream has incorrect value %2 instead of XRef</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41675"/>
			<description>Entry W with type Array in XRefStream shall be object ArrayOfXRefWIntegers</description>
			<test>WHasTypeArray != true || W_size == 1</test>
			<error>
				<message>Entry W with type Array in XRefStream is not object ArrayOfXRefWIntegers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41676"/>
			<description>Entry W in XRefStream shall have type Array</description>
			<test>containsW == false || WHasTypeArray == true</test>
			<error>
				<message>Entry W in XRefStream is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="7" testNumber="41677"/>
			<description>Entry W in XRefStream is required</description>
			<test>containsW == true</test>
			<error>
				<message>Entry W in XRefStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_5" clause="16" testNumber="41678"/>
			<description>If entry W with type Array in XRefStream satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>WHasTypeArray != true || (isWIndirect == false)</test>
			<error>
				<message>Entry W with type Array in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalArrayEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41881"/>
			<description>Entry with type Array in _UniversalArray shall be object _UniversalArray</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in _UniversalArray is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalArrayEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41882"/>
			<description>Entry with type Stream in _UniversalArray shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in _UniversalArray is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalArrayEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41883"/>
			<description>Entry with type Dictionary in _UniversalArray shall be object _UniversalDictionary</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in _UniversalArray is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalArrayEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41884"/>
			<description>Entry in _UniversalArray shall have one of types: Array, Stream, Boolean, Number, String, Name, Null, Dictionary</description>
			<test>HasTypeArray == true || HasTypeStream == true || HasTypeBoolean == true || HasTypeNumber == true || HasTypeString == true || HasTypeName == true || HasTypeNull == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in _UniversalArray is not one of types: Array, Stream, Boolean, Number, String, Name, Null, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalArrayEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="41885"/>
			<description>Entry with type Stream in _UniversalArray shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in _UniversalArray is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalDictionaryEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41916"/>
			<description>Entry with type Array in _UniversalDictionary shall be object _UniversalArray</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in _UniversalDictionary is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalDictionaryEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41917"/>
			<description>Entry with type Stream in _UniversalDictionary shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in _UniversalDictionary is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalDictionaryEntry">
			<id specification="ISO_32000_1_5" clause="17" testNumber="41918"/>
			<description>Entry with type Dictionary in _UniversalDictionary shall be object _UniversalDictionary</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in _UniversalDictionary is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalDictionaryEntry">
			<id specification="ISO_32000_1_5" clause="8" testNumber="41919"/>
			<description>Entry in _UniversalDictionary shall have one of types: Array, Stream, Boolean, Number, String, Name, Null, Dictionary</description>
			<test>HasTypeArray == true || HasTypeStream == true || HasTypeBoolean == true || HasTypeNumber == true || HasTypeString == true || HasTypeName == true || HasTypeNull == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in _UniversalDictionary is not one of types: Array, Stream, Boolean, Number, String, Name, Null, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalDictionaryEntry">
			<id specification="ISO_32000_1_5" clause="10" testNumber="41920"/>
			<description>Entry with type Stream in _UniversalDictionary shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in _UniversalDictionary is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
	</rules>
	<variables/>
</profile>
